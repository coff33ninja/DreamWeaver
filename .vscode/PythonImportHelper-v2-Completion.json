[
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "whisper",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "whisper",
        "description": "whisper",
        "detail": "whisper",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "cpu_count",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "cpu_count",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "ConfigObj",
        "importPath": "configobj",
        "description": "configobj",
        "isExtraImport": true,
        "detail": "configobj",
        "documentation": {}
    },
    {
        "label": "ConfigObj",
        "importPath": "configobj",
        "description": "configobj",
        "isExtraImport": true,
        "detail": "configobj",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "find_executable",
        "importPath": "distutils.spawn",
        "description": "distutils.spawn",
        "isExtraImport": true,
        "detail": "distutils.spawn",
        "documentation": {}
    },
    {
        "label": "find_executable",
        "importPath": "distutils.spawn",
        "description": "distutils.spawn",
        "isExtraImport": true,
        "detail": "distutils.spawn",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "six.moves",
        "description": "six.moves",
        "isExtraImport": true,
        "detail": "six.moves",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "six.moves",
        "description": "six.moves",
        "isExtraImport": true,
        "detail": "six.moves",
        "documentation": {}
    },
    {
        "label": "loadStorageSchemas",
        "importPath": "carbon.storage",
        "description": "carbon.storage",
        "isExtraImport": true,
        "detail": "carbon.storage",
        "documentation": {}
    },
    {
        "label": "loadAggregationSchemas",
        "importPath": "carbon.storage",
        "description": "carbon.storage",
        "isExtraImport": true,
        "detail": "carbon.storage",
        "documentation": {}
    },
    {
        "label": "loadStorageSchemas",
        "importPath": "carbon.storage",
        "description": "carbon.storage",
        "isExtraImport": true,
        "detail": "carbon.storage",
        "documentation": {}
    },
    {
        "label": "loadAggregationSchemas",
        "importPath": "carbon.storage",
        "description": "carbon.storage",
        "isExtraImport": true,
        "detail": "carbon.storage",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "mmap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mmap",
        "description": "mmap",
        "detail": "mmap",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.bipartite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.bipartite",
        "description": "networkx.algorithms.bipartite",
        "detail": "networkx.algorithms.bipartite",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.approximation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.approximation",
        "description": "networkx.algorithms.approximation",
        "detail": "networkx.algorithms.approximation",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocketDisconnect",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "WebSocketClientProtocol",
        "importPath": "websockets.client",
        "description": "websockets.client",
        "isExtraImport": true,
        "detail": "websockets.client",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "DataCollatorForLanguageModeling",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "BitsAndBytesConfig",
        "importPath": "transformers.utils.quantization_config",
        "description": "transformers.utils.quantization_config",
        "isExtraImport": true,
        "detail": "transformers.utils.quantization_config",
        "documentation": {}
    },
    {
        "label": "BitsAndBytesConfig",
        "importPath": "transformers.utils.quantization_config",
        "description": "transformers.utils.quantization_config",
        "isExtraImport": true,
        "detail": "transformers.utils.quantization_config",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "transformers.trainer",
        "description": "transformers.trainer",
        "isExtraImport": true,
        "detail": "transformers.trainer",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "transformers.trainer",
        "description": "transformers.trainer",
        "isExtraImport": true,
        "detail": "transformers.trainer",
        "documentation": {}
    },
    {
        "label": "TrainingArguments",
        "importPath": "transformers.training_args",
        "description": "transformers.training_args",
        "isExtraImport": true,
        "detail": "transformers.training_args",
        "documentation": {}
    },
    {
        "label": "TrainingArguments",
        "importPath": "transformers.training_args",
        "description": "transformers.training_args",
        "isExtraImport": true,
        "detail": "transformers.training_args",
        "documentation": {}
    },
    {
        "label": "DataCollatorForLanguageModeling",
        "importPath": "transformers.data.data_collator",
        "description": "transformers.data.data_collator",
        "isExtraImport": true,
        "detail": "transformers.data.data_collator",
        "documentation": {}
    },
    {
        "label": "DataCollatorForLanguageModeling",
        "importPath": "transformers.data.data_collator",
        "description": "transformers.data.data_collator",
        "isExtraImport": true,
        "detail": "transformers.data.data_collator",
        "documentation": {}
    },
    {
        "label": "logging.handlers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "AsyncMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "CharacterClient",
        "importPath": "character_client",
        "description": "character_client",
        "isExtraImport": true,
        "detail": "character_client",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "character_client",
        "description": "character_client",
        "isExtraImport": true,
        "detail": "character_client",
        "documentation": {}
    },
    {
        "label": "initialize_character_client",
        "importPath": "character_client",
        "description": "character_client",
        "isExtraImport": true,
        "detail": "character_client",
        "documentation": {}
    },
    {
        "label": "CLIENT_TTS_REFERENCE_VOICES_PATH",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "REFERENCE_VOICES_AUDIO_PATH",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CHARACTERS_AUDIO_PATH",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ConnectionError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "Timeout",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "CharacterClient",
        "importPath": "src.character_client",
        "description": "src.character_client",
        "isExtraImport": true,
        "detail": "src.character_client",
        "documentation": {}
    },
    {
        "label": "CharacterClient",
        "importPath": "src.character_client",
        "description": "src.character_client",
        "isExtraImport": true,
        "detail": "src.character_client",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "src.character_client",
        "description": "src.character_client",
        "isExtraImport": true,
        "detail": "src.character_client",
        "documentation": {}
    },
    {
        "label": "initialize_character_client",
        "importPath": "src.character_client",
        "description": "src.character_client",
        "isExtraImport": true,
        "detail": "src.character_client",
        "documentation": {}
    },
    {
        "label": "start_heartbeat_task",
        "importPath": "src.character_client",
        "description": "src.character_client",
        "isExtraImport": true,
        "detail": "src.character_client",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "CharacterClientError",
        "importPath": "CharacterClient.exceptions",
        "description": "CharacterClient.exceptions",
        "isExtraImport": true,
        "detail": "CharacterClient.exceptions",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOGS_PATH",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOGS_PATH",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOGS_PATH",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "setup_client_logging",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOG_FILE",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "setup_client_logging",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOG_FILE",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "setup_client_logging",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOG_FILE",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "LOGGER_NAME",
        "importPath": "logging_config",
        "description": "logging_config",
        "isExtraImport": true,
        "detail": "logging_config",
        "documentation": {}
    },
    {
        "label": "LLMEngine",
        "importPath": "CharacterClient.src.llm_engine",
        "description": "CharacterClient.src.llm_engine",
        "isExtraImport": true,
        "detail": "CharacterClient.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CLIENT_MODEL_NAME",
        "importPath": "CharacterClient.src.llm_engine",
        "description": "CharacterClient.src.llm_engine",
        "isExtraImport": true,
        "detail": "CharacterClient.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "JsonDataset",
        "importPath": "CharacterClient.src.llm_engine",
        "description": "CharacterClient.src.llm_engine",
        "isExtraImport": true,
        "detail": "CharacterClient.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "CLIENT_LLM_MODELS_PATH",
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "isExtraImport": true,
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_TTS_MODELS_PATH",
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "isExtraImport": true,
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_TEMP_AUDIO_PATH",
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "isExtraImport": true,
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "TTSManager",
        "importPath": "CharacterClient.src.tts_manager",
        "description": "CharacterClient.src.tts_manager",
        "isExtraImport": true,
        "detail": "CharacterClient.src.tts_manager",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "setup_client_logging",
        "importPath": "src.logging_config",
        "description": "src.logging_config",
        "isExtraImport": true,
        "detail": "src.logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "src.logging_config",
        "description": "src.logging_config",
        "isExtraImport": true,
        "detail": "src.logging_config",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "src.logging_config",
        "description": "src.logging_config",
        "isExtraImport": true,
        "detail": "src.logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "src.logging_config",
        "description": "src.logging_config",
        "isExtraImport": true,
        "detail": "src.logging_config",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "gradio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gradio",
        "description": "gradio",
        "detail": "gradio",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "serial",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "serial",
        "description": "serial",
        "detail": "serial",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "AutoModelForCausalLM",
        "importPath": "transformers.models.auto.modeling_auto",
        "description": "transformers.models.auto.modeling_auto",
        "isExtraImport": true,
        "detail": "transformers.models.auto.modeling_auto",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers.models.auto.tokenization_auto",
        "description": "transformers.models.auto.tokenization_auto",
        "isExtraImport": true,
        "detail": "transformers.models.auto.tokenization_auto",
        "documentation": {}
    },
    {
        "label": "LoraConfig",
        "importPath": "peft",
        "description": "peft",
        "isExtraImport": true,
        "detail": "peft",
        "documentation": {}
    },
    {
        "label": "get_peft_model",
        "importPath": "peft",
        "description": "peft",
        "isExtraImport": true,
        "detail": "peft",
        "documentation": {}
    },
    {
        "label": "prepare_model_for_kbit_training",
        "importPath": "peft",
        "description": "peft",
        "isExtraImport": true,
        "detail": "peft",
        "documentation": {}
    },
    {
        "label": "PeftModel",
        "importPath": "peft",
        "description": "peft",
        "isExtraImport": true,
        "detail": "peft",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "datasets",
        "description": "datasets",
        "isExtraImport": true,
        "detail": "datasets",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "pyannote.audio",
        "description": "pyannote.audio",
        "isExtraImport": true,
        "detail": "pyannote.audio",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "gtts",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtts",
        "description": "gtts",
        "detail": "gtts",
        "documentation": {}
    },
    {
        "label": "ChaosEngine",
        "importPath": "src.chaos_engine",
        "description": "src.chaos_engine",
        "isExtraImport": true,
        "detail": "src.chaos_engine",
        "documentation": {}
    },
    {
        "label": "CharacterServer",
        "importPath": "src.character_server",
        "description": "src.character_server",
        "isExtraImport": true,
        "detail": "src.character_server",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "median",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "MockCharacterServer",
        "importPath": "tests.test_character_server",
        "description": "tests.test_character_server",
        "isExtraImport": true,
        "detail": "tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "LLMEngine",
        "importPath": "src.llm_engine",
        "description": "src.llm_engine",
        "isExtraImport": true,
        "detail": "src.llm_engine",
        "documentation": {}
    },
    {
        "label": "ADAPTERS_PATH",
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "isExtraImport": true,
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "MODELS_PATH",
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "isExtraImport": true,
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "MODELS_PATH",
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "isExtraImport": true,
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "TTS_MODELS_PATH",
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "isExtraImport": true,
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "TTSManager",
        "importPath": "src.tts_manager",
        "description": "src.tts_manager",
        "isExtraImport": true,
        "detail": "src.tts_manager",
        "documentation": {}
    },
    {
        "label": "WebSocketConnectionManager",
        "importPath": "websocket_manager",
        "description": "websocket_manager",
        "isExtraImport": true,
        "detail": "websocket_manager",
        "documentation": {}
    },
    {
        "label": "connection_manager",
        "importPath": "websocket_manager",
        "description": "websocket_manager",
        "isExtraImport": true,
        "detail": "websocket_manager",
        "documentation": {}
    },
    {
        "label": "launch_interface",
        "importPath": "src.gradio_interface",
        "description": "src.gradio_interface",
        "isExtraImport": true,
        "detail": "src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "src.server_api",
        "description": "src.server_api",
        "isExtraImport": true,
        "detail": "src.server_api",
        "documentation": {}
    },
    {
        "label": "sounddevice",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sounddevice",
        "description": "sounddevice",
        "detail": "sounddevice",
        "documentation": {}
    },
    {
        "label": "TTS",
        "importPath": "TTS.api",
        "description": "TTS.api",
        "isExtraImport": true,
        "detail": "TTS.api",
        "documentation": {}
    },
    {
        "label": "walk_dir",
        "kind": 2,
        "importPath": ".venv.Scripts.find-corrupt-whisper-files",
        "description": ".venv.Scripts.find-corrupt-whisper-files",
        "peekOfCode": "def walk_dir(base_dir, delete_corrupt=False, verbose=False):\n    for dirpath, dirnames, filenames in os.walk(base_dir):\n        if verbose:\n            print(\"Scanning %s…\" % dirpath)\n        whisper_files = (os.path.join(dirpath, i) for i in filenames if i.endswith('.wsp'))\n        for f in whisper_files:\n            try:\n                info = whisper.info(f)\n            except whisper.CorruptWhisperFile:\n                if delete_corrupt:",
        "detail": ".venv.Scripts.find-corrupt-whisper-files",
        "documentation": {}
    },
    {
        "label": "aggregationMethods",
        "kind": 5,
        "importPath": ".venv.Scripts.rrd2whisper",
        "description": ".venv.Scripts.rrd2whisper",
        "peekOfCode": "aggregationMethods = list(whisper.aggregationMethods)\n# RRD doesn't have a 'sum' or 'total' type\naggregationMethods.remove('sum')\n# RRD doesn't have a 'absmax' type\naggregationMethods.remove('absmax')\n# RRD doesn't have a 'absmin' type\naggregationMethods.remove('absmin')\noption_parser = optparse.OptionParser(usage='''%prog rrd_path''')\noption_parser.add_option(\n    '--xFilesFactor',",
        "detail": ".venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.rrd2whisper",
        "description": ".venv.Scripts.rrd2whisper",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog rrd_path''')\noption_parser.add_option(\n    '--xFilesFactor',\n    help=\"The xFilesFactor to use in the output file. \" +\n    \"Defaults to the input RRD's xFilesFactor\",\n    default=None,\n    type='float')\noption_parser.add_option(\n    '--aggregationMethod',\n    help=\"The consolidation function to fetch from on input and \" +",
        "detail": ".venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "rrd_path",
        "kind": 5,
        "importPath": ".venv.Scripts.rrd2whisper",
        "description": ".venv.Scripts.rrd2whisper",
        "peekOfCode": "rrd_path = args[0]\ntry:\n  rrd_info = rrdtool.info(rrd_path)\nexcept rrdtool.error as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\nseconds_per_pdp = rrd_info['step']\n# Reconcile old vs new python-rrdtool APIs (yuck)\n# leave consistent 'rras' and 'datasources' lists\nif 'rra' in rrd_info:\n  rras = rrd_info['rra']",
        "detail": ".venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "seconds_per_pdp",
        "kind": 5,
        "importPath": ".venv.Scripts.rrd2whisper",
        "description": ".venv.Scripts.rrd2whisper",
        "peekOfCode": "seconds_per_pdp = rrd_info['step']\n# Reconcile old vs new python-rrdtool APIs (yuck)\n# leave consistent 'rras' and 'datasources' lists\nif 'rra' in rrd_info:\n  rras = rrd_info['rra']\nelse:\n  rra_indices = []\n  for key in rrd_info:\n    if key.startswith('rra['):\n      index = int(key.split('[')[1].split(']')[0])",
        "detail": ".venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "relevant_rras",
        "kind": 5,
        "importPath": ".venv.Scripts.rrd2whisper",
        "description": ".venv.Scripts.rrd2whisper",
        "peekOfCode": "relevant_rras = []\nfor rra in rras:\n  if rra['cf'] == options.aggregationMethod.upper():\n    relevant_rras.append(rra)\nif not relevant_rras:\n  err = \"[ERROR] Unable to find any RRAs with consolidation function: %s\" % \\\n        options.aggregationMethod.upper()\n  raise SystemExit(err)\narchives = []\nxFilesFactor = options.xFilesFactor",
        "detail": ".venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "archives",
        "kind": 5,
        "importPath": ".venv.Scripts.rrd2whisper",
        "description": ".venv.Scripts.rrd2whisper",
        "peekOfCode": "archives = []\nxFilesFactor = options.xFilesFactor\nfor rra in relevant_rras:\n  precision = rra['pdp_per_row'] * seconds_per_pdp\n  points = rra['rows']\n  if not xFilesFactor:\n    xFilesFactor = rra['xff']\n  archives.append((precision, points))\nfor datasource in datasources:\n  now = int(time.time())",
        "detail": ".venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "xFilesFactor",
        "kind": 5,
        "importPath": ".venv.Scripts.rrd2whisper",
        "description": ".venv.Scripts.rrd2whisper",
        "peekOfCode": "xFilesFactor = options.xFilesFactor\nfor rra in relevant_rras:\n  precision = rra['pdp_per_row'] * seconds_per_pdp\n  points = rra['rows']\n  if not xFilesFactor:\n    xFilesFactor = rra['xff']\n  archives.append((precision, points))\nfor datasource in datasources:\n  now = int(time.time())\n  suffix = '_%s' % datasource if len(datasources) > 1 else ''",
        "detail": ".venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "config_schemas",
        "kind": 2,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "def config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:\n            if item[0] == '^':\n                item = item[1:]\n            SCHEMA_LIST[item] = {'retentions': schema[1]['retentions'],",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "fix_metric",
        "kind": 2,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "def fix_metric(metric):\n    if not SCHEMA_LIST:\n        LOG.error(\"Didn't initialize schemas!\")\n        return []\n    if DEBUG:\n        LOG.info(\"Testing %s for modification\" % metric)\n    devnull = open(os.devnull, 'w')\n    command_string = list(BASE_COMMAND) + [metric]\n    retention = DEFAULT_SCHEMA['retentions']\n    matching = metric[len(ROOT_PATH):].replace('/', '.')",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "search_and_fix",
        "kind": 2,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "def search_and_fix(subdir):\n    if not SCHEMA_LIST:\n        LOG.error(\"Didn't initialize schemas!\")\n        return\n    fpath = os.path.join(ROOT_PATH, subdir)\n    pool = Pool(cpu_count())\n    LOG.info('Creating new storage schemas for metrics under %s ...' % fpath)\n    results = pool.map(fix_metric, _find_metrics(fpath), 100)\n    pool.close()\n    pool.join()",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "cli_opts",
        "kind": 2,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "def cli_opts():\n    parser = argparse.ArgumentParser(\"Correct storage settings on multiple whisper files\")\n    parser.add_argument('--cfg', action='store', dest='cfg',\n                        help='The storage-schemas.conf file path',\n                        required=True)\n    parser.add_argument('--path', action='store', dest='path',\n                        help='The root path to find metrics in',\n                        required=True)\n    parser.add_argument('--debug', action='store_true', dest='debug',\n                        help='Display debug information',",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "LOG = logging.getLogger()\nLOG.setLevel(logging.INFO)\nSCHEMA_LIST = {}\n# The very basic default retentions\nDEFAULT_SCHEMA = {'match': re.compile('.*'),\n                  'retentions': '1m:7d'}\nDEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "SCHEMA_LIST",
        "kind": 5,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "SCHEMA_LIST = {}\n# The very basic default retentions\nDEFAULT_SCHEMA = {'match': re.compile('.*'),\n                  'retentions': '1m:7d'}\nDEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "DEFAULT_SCHEMA = {'match': re.compile('.*'),\n                  'retentions': '1m:7d'}\nDEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "DEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "DRY_RUN",
        "kind": 5,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "DRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:\n            if item[0] == '^':",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "ROOT_PATH",
        "kind": 5,
        "importPath": ".venv.Scripts.update-storage-times",
        "description": ".venv.Scripts.update-storage-times",
        "peekOfCode": "ROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:\n            if item[0] == '^':\n                item = item[1:]",
        "detail": ".venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "processMetric",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "def processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary\n        Parameters:\n            fullPath    - full path to the metric whisper file\n            schemas     - carbon storage schemas loaded from config\n            agg_schemas - carbon storage aggregation schemas load from confg\n    \"\"\"\n    schema_config_args = ''\n    schema_file_args = ''",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "getMetricFromPath",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "def getMetricFromPath(filePath):\n    \"\"\"\n        this method takes the full file path of a whisper file an converts it\n        to a gaphite metric name\n        Parameters:\n            filePath - full file path to a whisper file\n        Returns a string representing the metric name\n    \"\"\"\n    # sanitize directory since we may get a trailing slash or not, and if we\n    # don't it creates a leading '.'",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "confirm",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "def confirm(question, error_response='Valid options : yes or no'):\n    \"\"\"\n         ask the user if they would like to perform the action\n         Parameters:\n             question       - the question you would like to ask the user to confirm.\n             error_response - the message to display if an invalid option is given.\n    \"\"\"\n    while True:\n        answer = input(question).lower()\n        if answer in ('y', 'yes'):",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "whisperResizeExecutable",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "whisperResizeExecutable = find_executable(\"whisper-resize.py\")\nif whisperResizeExecutable is None:\n    whisperResizeExecutable = find_executable(\"whisper-resize\")\n    if whisperResizeExecutable is None:\n        # Probably will fail later, set it nevertheless\n        whisperResizeExecutable = \"whisper-resize.py\"\noption_parser = OptionParser(\n    usage='''%prog storagePath configPath\nstoragePath   the Path to the directory containing whisper files (CAN NOT BE A\n              SUBDIR, use --subdir for that)",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "option_parser = OptionParser(\n    usage='''%prog storagePath configPath\nstoragePath   the Path to the directory containing whisper files (CAN NOT BE A\n              SUBDIR, use --subdir for that)\nconfigPath    the path to your carbon config files\n''', version=\"%prog 0.1\")\noption_parser.add_option(\n    '--doit', default=False, action='store_true',\n    help=\"This is not a drill, lets do it\")\noption_parser.add_option(",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "storagePath",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "storagePath = args[0]\nconfigPath = args[1]\n# check to see if we are processing a subfolder\n# we need to have a separate config option for this since\n# otherwise the metric test thinks the metric is at the root\n# of the storage path and can match schemas incorrectly\nif options.subdir is None:\n    processPath = args[0]\nelse:\n    processPath = options.subdir",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "configPath",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "configPath = args[1]\n# check to see if we are processing a subfolder\n# we need to have a separate config option for this since\n# otherwise the metric test thinks the metric is at the root\n# of the storage path and can match schemas incorrectly\nif options.subdir is None:\n    processPath = args[0]\nelse:\n    processPath = options.subdir\n# Injecting the Whisper Lib Path if needed",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "settings.CONF_DIR",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "settings.CONF_DIR = configPath\nsettings.LOCAL_DATA_DIR = storagePath\n# import these once we have the settings figured out\nfrom carbon.storage import loadStorageSchemas, loadAggregationSchemas\n# Load the Defined Schemas from our config files\nschemas = loadStorageSchemas()\nagg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "settings.LOCAL_DATA_DIR",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "settings.LOCAL_DATA_DIR = storagePath\n# import these once we have the settings figured out\nfrom carbon.storage import loadStorageSchemas, loadAggregationSchemas\n# Load the Defined Schemas from our config files\nschemas = loadStorageSchemas()\nagg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "schemas = loadStorageSchemas()\nagg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary\n        Parameters:\n            fullPath    - full path to the metric whisper file\n            schemas     - carbon storage schemas loaded from config\n            agg_schemas - carbon storage aggregation schemas load from confg",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "agg_schemas",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-resize",
        "description": ".venv.Scripts.whisper-auto-resize",
        "peekOfCode": "agg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary\n        Parameters:\n            fullPath    - full path to the metric whisper file\n            schemas     - carbon storage schemas loaded from config\n            agg_schemas - carbon storage aggregation schemas load from confg\n    \"\"\"",
        "detail": ".venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "update_value",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "def update_value(timestamp, value):\n  if value is None:\n    return value\n  return value * 1024 * 1024 * 1024\n# Ignore SIGPIPE\nsignal.signal(signal.SIGPIPE, signal.SIG_DFL)\nnow = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "now = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "yesterday",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "yesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(\n  '--pretty', default=False, action='store_true',",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "path = args[0]\nfrom_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values_old) = data\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "from_time",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "from_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values_old) = data\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\n(start, end, step) = timeInfo",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "until_time",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "until_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values_old) = data\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\n(start, end, step) = timeInfo\nt = start",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-auto-update",
        "description": ".venv.Scripts.whisper-auto-update",
        "peekOfCode": "t = start\nfor value_old in values_old:\n  value_str_old = str(value_old)\n  value_new = update_value(t, value_old)\n  value_str_new = str(value_new)\n  if options.pretty:\n    timestr = time.ctime(t)\n  else:\n    timestr = str(t)\n  print(\"%s\\t%s -> %s\" % (timestr, value_str_old, value_str_new))",
        "detail": ".venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "byte_format",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-create",
        "description": ".venv.Scripts.whisper-create",
        "peekOfCode": "def byte_format(num):\n  for x in ['bytes', 'KB', 'MB']:\n    if num < 1024.0:\n      return \"%.3f%s\" % (num, x)\n    num /= 1024.0\n  return \"%.3f%s\" % (num, 'GB')\n# Ignore SIGPIPE\ntry:\n  signal.signal(signal.SIGPIPE, signal.SIG_DFL)\nexcept AttributeError:",
        "detail": ".venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-create",
        "description": ".venv.Scripts.whisper-create",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='''%prog path timePerPoint:timeToStore [timePerPoint:timeToStore]*\n%prog --estimate timePerPoint:timeToStore [timePerPoint:timeToStore]*\ntimePerPoint and timeToStore specify lengths of time, for example:\n60:1440      60 seconds per datapoint, 1440 datapoints = 1 day of retention\n15m:8        15 minutes per datapoint, 8 datapoints = 2 hours of retention\n1h:7d        1 hour per datapoint, 7 days of retention\n12h:2y       12 hours per datapoint, 2 years of retention\n''')\noption_parser.add_option('--xFilesFactor', default=0.5, type='float')",
        "detail": ".venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-create",
        "description": ".venv.Scripts.whisper-create",
        "peekOfCode": "path = args[0]\narchives = [whisper.parseRetentionDef(retentionDef)\n            for retentionDef in args[1:]]\nif os.path.exists(path) and options.overwrite:\n  print('Overwriting existing file: %s' % path)\n  os.unlink(path)\ntry:\n  whisper.create(path, archives, xFilesFactor=options.xFilesFactor,\n                 aggregationMethod=options.aggregationMethod, sparse=options.sparse,\n                 useFallocate=options.fallocate)",
        "detail": ".venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "archives",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-create",
        "description": ".venv.Scripts.whisper-create",
        "peekOfCode": "archives = [whisper.parseRetentionDef(retentionDef)\n            for retentionDef in args[1:]]\nif os.path.exists(path) and options.overwrite:\n  print('Overwriting existing file: %s' % path)\n  os.unlink(path)\ntry:\n  whisper.create(path, archives, xFilesFactor=options.xFilesFactor,\n                 aggregationMethod=options.aggregationMethod, sparse=options.sparse,\n                 useFallocate=options.fallocate)\nexcept whisper.WhisperException as exc:",
        "detail": ".venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-create",
        "description": ".venv.Scripts.whisper-create",
        "peekOfCode": "size = os.stat(path).st_size\nprint('Created: %s (%d bytes)' % (path, size))",
        "detail": ".venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "print_diffs",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-diff",
        "description": ".venv.Scripts.whisper-diff",
        "peekOfCode": "def print_diffs(diffs, pretty=True, headers=True):\n  if pretty:\n    h = \"%7s %11s %13s %13s\\n\"\n    f = \"%7s %11d %13s %13s\\n\"\n  else:\n    h = \"%s %s %s %s\\n\"\n    f = \"%s %d %s %s\\n\"\n  if headers:\n    sys.stdout.write(h % ('archive', 'timestamp', 'value_a', 'value_b'))\n  for archive, points, total in diffs:",
        "detail": ".venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "print_summary",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-diff",
        "description": ".venv.Scripts.whisper-diff",
        "peekOfCode": "def print_summary(diffs, pretty=True, headers=True):\n  if pretty:\n    f = \"%7s %9s %9s\\n\"\n  else:\n    f = \"%s %s %s\\n\"\n  if headers:\n    sys.stdout.write(f % ('archive', 'total', 'differing'))\n  for archive, points, total in diffs:\n    sys.stdout.write(f % (archive, total, points.__len__()))\ndef print_summary_json(diffs, path_a, path_b):",
        "detail": ".venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "print_summary_json",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-diff",
        "description": ".venv.Scripts.whisper-diff",
        "peekOfCode": "def print_summary_json(diffs, path_a, path_b):\n  print(json.dumps({'path_a': path_a,\n                    'path_b': path_b,\n                    'archives': [{'archive': archive,\n                                  'total': total,\n                                  'points': points.__len__()}\n                                 for archive, points, total in diffs]},\n                   sort_keys=True, indent=2, separators=(',', ' : ')))\ndef print_diffs_json(diffs, path_a, path_b):\n  print(json.dumps({'path_a': path_a,",
        "detail": ".venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "print_diffs_json",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-diff",
        "description": ".venv.Scripts.whisper-diff",
        "peekOfCode": "def print_diffs_json(diffs, path_a, path_b):\n  print(json.dumps({'path_a': path_a,\n                    'path_b': path_b,\n                    'archives': [{'archive': archive,\n                                  'total': total,\n                                  'points': points.__len__(),\n                                  'datapoint': [{\n                                      'timestamp': p[0],\n                                      'value_a': p[1],\n                                      'value_b': p[2]",
        "detail": ".venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-diff",
        "description": ".venv.Scripts.whisper-diff",
        "peekOfCode": "def main():\n  archive_diffs = whisper.diff(path_a, path_b, ignore_empty=options.ignore_empty,\n                               until_time=until_time)\n  if options.summary:\n    if options.json:\n      print_summary_json(archive_diffs, path_a, path_b)\n    else:\n      print_summary(archive_diffs, pretty=(not options.columns),\n                    headers=(not options.no_headers))\n  else:",
        "detail": ".venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-diff",
        "description": ".venv.Scripts.whisper-diff",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path_a path_b''')\noption_parser.add_option('--summary', default=False, action='store_true',\n                         help=\"show summary of differences\")\noption_parser.add_option('--ignore-empty', default=False, action='store_true',\n                         help=\"skip comparison if either value is undefined\")\noption_parser.add_option('--columns', default=False, action='store_true',\n                         help=\"print output in simple columns\")\noption_parser.add_option('--no-headers', default=False, action='store_true',\n                         help=\"do not print column headers\")\noption_parser.add_option('--until', default=None, type='int',",
        "detail": ".venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "mmap_file",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "def mmap_file(filename):\n  fd = os.open(filename, os.O_RDONLY)\n  map = mmap.mmap(fd, os.fstat(fd).st_size, prot=mmap.PROT_READ)\n  os.close(fd)\n  return map\ndef read_header(map):\n  try:\n    (aggregationType, maxRetention, xFilesFactor, archiveCount) \\\n      = struct.unpack(whisper.metadataFormat, map[:whisper.metadataSize])\n  except (struct.error, ValueError, TypeError):",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "read_header",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "def read_header(map):\n  try:\n    (aggregationType, maxRetention, xFilesFactor, archiveCount) \\\n      = struct.unpack(whisper.metadataFormat, map[:whisper.metadataSize])\n  except (struct.error, ValueError, TypeError):\n    raise whisper.CorruptWhisperFile(\"Unable to unpack header\")\n  archives = []\n  archiveOffset = whisper.metadataSize\n  for i in xrange(archiveCount):\n    try:",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "dump_header",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "def dump_header(header):\n  print('Meta data:')\n  print('  aggregation method: %s' % header['aggregationMethod'])\n  print('  max retention: %d' % header['maxRetention'])\n  print('  xFilesFactor: %g' % header['xFilesFactor'])\n  print(\"\")\n  dump_archive_headers(header['archives'])\ndef dump_archive_headers(archives):\n  for i, archive in enumerate(archives):\n    print('Archive %d info:' % i)",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "dump_archive_headers",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "def dump_archive_headers(archives):\n  for i, archive in enumerate(archives):\n    print('Archive %d info:' % i)\n    print('  offset: %d' % archive['offset'])\n    print('  seconds per point: %d' % archive['secondsPerPoint'])\n    print('  points: %d' % archive['points'])\n    print('  retention: %d' % archive['retention'])\n    print('  size: %d' % archive['size'])\n    print(\"\")\ndef dump_archives(archives, options):",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "dump_archives",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "def dump_archives(archives, options):\n  for i, archive in enumerate(archives):\n    if not options.raw:\n      print('Archive %d data:' % i)\n    offset = archive['offset']\n    for point in xrange(archive['points']):\n      (timestamp, value) = struct.unpack(\n        whisper.pointFormat,\n        map[offset:offset + whisper.pointSize]\n      )",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog path''')\noption_parser.add_option(\n  '--pretty', default=False, action='store_true',\n  help=\"Show human-readable timestamps instead of unix times\")\noption_parser.add_option(\n  '-t', '--time-format', action='store', type='string', dest='time_format',\n  help='Time format to use with --pretty; see time.strftime()')\noption_parser.add_option(\n  '-r', '--raw', default=False, action='store_true',\n  help='Dump value only in the same format for whisper-update (UTC timestamps)')",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "map",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "map = mmap_file(path)\nheader = read_header(map)\nif not options.raw:\n  dump_header(header)\ndump_archives(header['archives'], options)",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-dump",
        "description": ".venv.Scripts.whisper-dump",
        "peekOfCode": "header = read_header(map)\nif not options.raw:\n  dump_header(header)\ndump_archives(header['archives'], options)",
        "detail": ".venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "_DROP_FUNCTIONS",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "_DROP_FUNCTIONS = {\n    'zeroes': lambda x: x != 0,\n    'nulls': lambda x: x is not None,\n    'empty': lambda x: x != 0 and x is not None\n}\n# Ignore SIGPIPE\nsignal.signal(signal.SIGPIPE, signal.SIG_DFL)\nnow = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "now = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "yesterday",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "yesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(\n  '--json', default=False, action='store_true',",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "path = args[0]\nfrom_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values) = data\nexcept (whisper.WhisperException, IOError) as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "from_time",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "from_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values) = data\nexcept (whisper.WhisperException, IOError) as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\nif options.drop:",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "until_time",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "until_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values) = data\nexcept (whisper.WhisperException, IOError) as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\nif options.drop:\n  fcn = _DROP_FUNCTIONS.get(options.drop)",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-fetch",
        "description": ".venv.Scripts.whisper-fetch",
        "peekOfCode": "t = start\nfor value in values:\n  if options.pretty:\n    if options.time_format:\n      timestr = time.strftime(options.time_format, time.localtime(t))\n    else:\n      timestr = time.ctime(t)\n  else:\n    timestr = str(t)\n  if value is None:",
        "detail": ".venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-fill",
        "description": ".venv.Scripts.whisper-fill",
        "peekOfCode": "def itemgetter(*items):\n    if HAS_OPERATOR:\n        return operator.itemgetter(*items)\n    else:\n        if len(items) == 1:\n            item = items[0]\n            def g(obj):\n                return obj[item]\n        else:\n            def g(obj):",
        "detail": ".venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "fill",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-fill",
        "description": ".venv.Scripts.whisper-fill",
        "peekOfCode": "def fill(src, dst, tstart, tstop):\n    # fetch range start-stop from src, taking values from the highest\n    # precision archive, thus optionally requiring multiple fetch + merges\n    srcHeader = whisper.info(src)\n    srcArchives = srcHeader['archives']\n    srcArchives.sort(key=itemgetter('retention'))\n    # find oldest point in time, stored by both files\n    srcTime = int(time.time()) - srcHeader['maxRetention']\n    if tstart < srcTime and tstop < srcTime:\n        return",
        "detail": ".venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "fill_archives",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-fill",
        "description": ".venv.Scripts.whisper-fill",
        "peekOfCode": "def fill_archives(src, dst, startFrom):\n    header = whisper.info(dst)\n    archives = header['archives']\n    archives = sorted(archives, key=lambda t: t['retention'])\n    for archive in archives:\n        fromTime = time.time() - archive['retention']\n        if fromTime >= startFrom:\n            continue\n        (timeInfo, values) = whisper.fetch(dst, fromTime, startFrom)\n        (start, end, step) = timeInfo",
        "detail": ".venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-fill",
        "description": ".venv.Scripts.whisper-fill",
        "peekOfCode": "def main():\n    option_parser = optparse.OptionParser(\n        usage='%prog [--lock] src dst',\n        description='copies data from src in dst, if missing')\n    option_parser.add_option(\n        '--lock', help='Lock whisper files',\n        default=False, action='store_true')\n    (options, args) = option_parser.parse_args()\n    if len(args) != 2:\n        option_parser.print_help()",
        "detail": ".venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-info",
        "description": ".venv.Scripts.whisper-info",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path [field]''')\noption_parser.add_option('--json', default=False, action='store_true',\n                         help=\"Output results in JSON form\")\n(options, args) = option_parser.parse_args()\nif len(args) < 1:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\nif len(args) > 1:\n  field = args[1]",
        "detail": ".venv.Scripts.whisper-info",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-info",
        "description": ".venv.Scripts.whisper-info",
        "peekOfCode": "path = args[0]\nif len(args) > 1:\n  field = args[1]\nelse:\n  field = None\ntry:\n  info = whisper.info(path)\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\ninfo['fileSize'] = os.stat(path).st_size",
        "detail": ".venv.Scripts.whisper-info",
        "documentation": {}
    },
    {
        "label": "info['fileSize']",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-info",
        "description": ".venv.Scripts.whisper-info",
        "peekOfCode": "info['fileSize'] = os.stat(path).st_size\nif field:\n  if field not in info:\n    print('Unknown field \"%s\". Valid fields are %s' % (field, ','.join(info)))\n    sys.exit(1)\n  print(info[field])\n  sys.exit(0)\nif options.json:\n  print(json.dumps(info, indent=2, separators=(',', ': ')))\nelse:",
        "detail": ".venv.Scripts.whisper-info",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-merge",
        "description": ".venv.Scripts.whisper-merge",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='''%prog [options] from_path to_path''')\noption_parser.add_option(\n  '--from', default=None, type='int', dest='_from',\n  help=(\"Begining of interval, unix timestamp (default: epoch)\"))\noption_parser.add_option(\n  '--until', default=None, type='int',\n  help=\"End of interval, unix timestamp (default: now)\")\n(options, args) = option_parser.parse_args()\nif len(args) < 2:",
        "detail": ".venv.Scripts.whisper-merge",
        "documentation": {}
    },
    {
        "label": "path_from",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-merge",
        "description": ".venv.Scripts.whisper-merge",
        "peekOfCode": "path_from = args[0]\npath_to = args[1]\nfor filename in (path_from, path_to):\n  if not os.path.exists(filename):\n    raise SystemExit('[ERROR] File \"%s\" does not exist!' % filename)\nwhisper.merge(path_from, path_to, options._from, options.until)",
        "detail": ".venv.Scripts.whisper-merge",
        "documentation": {}
    },
    {
        "label": "path_to",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-merge",
        "description": ".venv.Scripts.whisper-merge",
        "peekOfCode": "path_to = args[1]\nfor filename in (path_from, path_to):\n  if not os.path.exists(filename):\n    raise SystemExit('[ERROR] File \"%s\" does not exist!' % filename)\nwhisper.merge(path_from, path_to, options._from, options.until)",
        "detail": ".venv.Scripts.whisper-merge",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "now = int(time.time())\noption_parser = optparse.OptionParser(\n    usage='''%prog path timePerPoint:timeToStore [timePerPoint:timeToStore]*\ntimePerPoint and timeToStore specify lengths of time, for example:\n60:1440      60 seconds per datapoint, 1440 datapoints = 1 day of retention\n15m:8        15 minutes per datapoint, 8 datapoints = 2 hours of retention\n1h:7d        1 hour per datapoint, 7 days of retention\n12h:2y       12 hours per datapoint, 2 years of retention\n''')\noption_parser.add_option(",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='''%prog path timePerPoint:timeToStore [timePerPoint:timeToStore]*\ntimePerPoint and timeToStore specify lengths of time, for example:\n60:1440      60 seconds per datapoint, 1440 datapoints = 1 day of retention\n15m:8        15 minutes per datapoint, 8 datapoints = 2 hours of retention\n1h:7d        1 hour per datapoint, 7 days of retention\n12h:2y       12 hours per datapoint, 2 years of retention\n''')\noption_parser.add_option(\n    '--xFilesFactor', default=None,",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "path = args[0]\nif not os.path.exists(path):\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()\n  sys.exit(1)\ninfo = whisper.info(path)\nnew_archives = [whisper.parseRetentionDef(retentionDef)\n                for retentionDef in args[1:]]\nold_archives = info['archives']\n# sort by precision, lowest to highest",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "info = whisper.info(path)\nnew_archives = [whisper.parseRetentionDef(retentionDef)\n                for retentionDef in args[1:]]\nold_archives = info['archives']\n# sort by precision, lowest to highest\nold_archives.sort(key=lambda a: a['secondsPerPoint'], reverse=True)\nif options.xFilesFactor is None:\n  xff = info['xFilesFactor']\nelse:\n  xff = options.xFilesFactor",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "new_archives",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "new_archives = [whisper.parseRetentionDef(retentionDef)\n                for retentionDef in args[1:]]\nold_archives = info['archives']\n# sort by precision, lowest to highest\nold_archives.sort(key=lambda a: a['secondsPerPoint'], reverse=True)\nif options.xFilesFactor is None:\n  xff = info['xFilesFactor']\nelse:\n  xff = options.xFilesFactor\nif options.aggregationMethod is None:",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "old_archives",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "old_archives = info['archives']\n# sort by precision, lowest to highest\nold_archives.sort(key=lambda a: a['secondsPerPoint'], reverse=True)\nif options.xFilesFactor is None:\n  xff = info['xFilesFactor']\nelse:\n  xff = options.xFilesFactor\nif options.aggregationMethod is None:\n  aggregationMethod = info['aggregationMethod']\nelse:",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "size = os.stat(newfile).st_size\nprint('Created: %s (%d bytes)' % (newfile, size))\nif options.aggregate:\n  # This is where data will be interpolated (best effort)\n  print('Migrating data with aggregation...')\n  all_datapoints = []\n  for archive in sorted(old_archives, key=lambda x: x['secondsPerPoint']):\n    # Loading all datapoints into memory for fast querying\n    timeinfo, values = archive['data']\n    new_datapoints = list(zip(range(*timeinfo), values))",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "backup",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-resize",
        "description": ".venv.Scripts.whisper-resize",
        "peekOfCode": "backup = path + '.bak'\nprint('Renaming old database to: %s' % backup)\nos.rename(path, backup)\ntry:\n  print('Renaming new database to: %s' % path)\n  os.rename(tmpfile, path)\nexcept (OSError):\n  traceback.print_exc()\n  print('\\nOperation failed, restoring backup')\n  os.rename(backup, path)",
        "detail": ".venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-set-aggregation-method",
        "description": ".venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='%%prog path <%s> [xFilesFactor]' % '|'.join(whisper.aggregationMethods))\n(options, args) = option_parser.parse_args()\nif len(args) < 2:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\naggregationMethod = args[1]\nxFilesFactor = None\nif len(args) == 3:",
        "detail": ".venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-set-aggregation-method",
        "description": ".venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "path = args[0]\naggregationMethod = args[1]\nxFilesFactor = None\nif len(args) == 3:\n  xFilesFactor = args[2]\ntry:\n  oldAggregationMethod = whisper.setAggregationMethod(path, aggregationMethod, xFilesFactor)\nexcept IOError:\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()",
        "detail": ".venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "aggregationMethod",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-set-aggregation-method",
        "description": ".venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "aggregationMethod = args[1]\nxFilesFactor = None\nif len(args) == 3:\n  xFilesFactor = args[2]\ntry:\n  oldAggregationMethod = whisper.setAggregationMethod(path, aggregationMethod, xFilesFactor)\nexcept IOError:\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()\n  sys.exit(1)",
        "detail": ".venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "xFilesFactor",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-set-aggregation-method",
        "description": ".venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "xFilesFactor = None\nif len(args) == 3:\n  xFilesFactor = args[2]\ntry:\n  oldAggregationMethod = whisper.setAggregationMethod(path, aggregationMethod, xFilesFactor)\nexcept IOError:\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()\n  sys.exit(1)\nexcept whisper.WhisperException as exc:",
        "detail": ".venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.Scripts.whisper-set-xfilesfactor",
        "description": ".venv.Scripts.whisper-set-xfilesfactor",
        "peekOfCode": "def main():\n    \"\"\"Set xFilesFactor for existing whisper file\"\"\"\n    parser = argparse.ArgumentParser(\n        description='Set xFilesFactor for existing whisper file')\n    parser.add_argument('path', type=str, help='path to whisper file')\n    parser.add_argument('xff', metavar='xFilesFactor', type=float,\n                        help='new xFilesFactor, a float between 0 and 1')\n    args = parser.parse_args()\n    try:\n        old_xff = whisper.setXFilesFactor(args.path, args.xff)",
        "detail": ".venv.Scripts.whisper-set-xfilesfactor",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-update",
        "description": ".venv.Scripts.whisper-update",
        "peekOfCode": "now = int(time.time())\noption_parser = optparse.OptionParser(\n  usage='''%prog [options] path [timestamp:value]*\n  If no values are passed as arguments, they are read one-per-line from stdin.''')\n(options, args) = option_parser.parse_args()\nif not args:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\nif len(args) >= 2:",
        "detail": ".venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-update",
        "description": ".venv.Scripts.whisper-update",
        "peekOfCode": "option_parser = optparse.OptionParser(\n  usage='''%prog [options] path [timestamp:value]*\n  If no values are passed as arguments, they are read one-per-line from stdin.''')\n(options, args) = option_parser.parse_args()\nif not args:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\nif len(args) >= 2:\n  datapoint_strings = args[1:]",
        "detail": ".venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-update",
        "description": ".venv.Scripts.whisper-update",
        "peekOfCode": "path = args[0]\nif len(args) >= 2:\n  datapoint_strings = args[1:]\nelse:\n  # no argv values, so read from stdin\n  datapoint_strings = sys.stdin\ndatapoint_strings = [point.replace('N:', '%d:' % now)\n                     for point in datapoint_strings]\ndatapoints = [tuple(point.split(':')) for point in datapoint_strings]\ntry:",
        "detail": ".venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "datapoint_strings",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-update",
        "description": ".venv.Scripts.whisper-update",
        "peekOfCode": "datapoint_strings = [point.replace('N:', '%d:' % now)\n                     for point in datapoint_strings]\ndatapoints = [tuple(point.split(':')) for point in datapoint_strings]\ntry:\n  if len(datapoints) == 1:\n    timestamp, value = datapoints[0]\n    whisper.update(path, value, timestamp)\n  else:\n    whisper.update_many(path, datapoints)\nexcept whisper.WhisperException as exc:",
        "detail": ".venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "datapoints",
        "kind": 5,
        "importPath": ".venv.Scripts.whisper-update",
        "description": ".venv.Scripts.whisper-update",
        "peekOfCode": "datapoints = [tuple(point.split(':')) for point in datapoint_strings]\ntry:\n  if len(datapoints) == 1:\n    timestamp, value = datapoints[0]\n    whisper.update(path, value, timestamp)\n  else:\n    whisper.update_many(path, datapoints)\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))",
        "detail": ".venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\")\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k**p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), G.order() // node_divisor))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": dict(color=\"Red\"),\n    \"B\": dict(color=\"Red\"),\n    \"C\": dict(color=\"Red\"),\n    \"D\": dict(color=\"Red\"),\n    \"E\": dict(color=\"Blue\"),\n    \"F\": dict(color=\"Blue\"),\n    \"G\": dict(color=\"Blue\"),\n    \"H\": dict(color=\"Blue\"),\n    \"I\": dict(color=\"Yellow\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "graph_partitioning",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "def graph_partitioning(G, plotting=True):\n    \"\"\"Partition a directed graph into a list of subgraphs that contain\n    only entirely supported or entirely unsupported nodes.\n    \"\"\"\n    # Categorize nodes by their node_type attribute\n    supported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"supported\"}\n    unsupported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"unsupported\"}\n    # Make a copy of the graph.\n    H = G.copy()\n    # Remove all edges connecting supported and unsupported nodes.",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex = nx.DiGraph()\nG_ex.add_nodes_from([\"In\"], node_type=\"input\", node_color=\"b\")\nG_ex.add_nodes_from([\"A\", \"C\", \"E\", \"F\"], node_type=\"supported\", node_color=\"g\")\nG_ex.add_nodes_from([\"B\", \"D\"], node_type=\"unsupported\", node_color=\"r\")\nG_ex.add_nodes_from([\"Out\"], node_type=\"output\", node_color=\"m\")\nG_ex.add_edges_from(\n    [\n        (\"In\", \"A\"),\n        (\"A\", \"B\"),\n        (\"B\", \"C\"),",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################\n# Calculate the subgraphs with plotting all results of intemediate steps.",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex_r",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex_r = nx.DiGraph()\n# Composing all subgraphs.\nfor subgraph in subgraphs_of_G_ex:\n    G_ex_r = nx.compose(G_ex_r, subgraph)\n# Adding the previously stored edges.\nG_ex_r.add_edges_from(removed_edges.edges())\n###############################################################################\n# Check that the original graph and the reconstructed graphs are isomorphic.\n# --------------------------------------------------------------------------\n#",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex_r.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for (i, layer) in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "G = nx.random_geometric_graph(20, radius=0.4, seed=3)\npos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos[0]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "pos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "H = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "cycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "edge_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "edge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,\n    edge_color=\"red\",",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor (u, v, d) in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "edge_labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "edge_labels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(G, pos, edge_labels)\nax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "options = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "morse_encode",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "def morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol\n# Verify that the trie encoding is correct\nimport string\nfor letter in string.ascii_lowercase:\n    assert morse_encode(letter) == morse_direct_mapping[letter]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "dot = \"•\"\ndash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dash",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "dash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_direct_mapping",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,\n    \"h\": dot * 4,\n    \"i\": dot * 2,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_mapping_sorted",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_mapping_sorted = dict(\n    sorted(morse_direct_mapping.items(), key=lambda item: (len(item[1]), item[1]))\n)\n# More preprocessing: create the reverse mapping to simplify lookup\nreverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping[\"\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "G = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:\n        G.nodes[n][\"layer\"] = i\npos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")\n# Flip the layout so the root node is on top\nfor k in pos:\n    pos[k][-1] *= -1\n# Visualize the trie\nnx.draw(G, pos=pos, with_labels=True)\nelabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "elabels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "elabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node\ndef morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [G.pop[n] // 300 for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor (source, target) in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "options = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create parititions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\")\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k**p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), G.order() // node_divisor))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(nx.info(G))\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": dict(color=\"Red\"),\n    \"B\": dict(color=\"Red\"),\n    \"C\": dict(color=\"Red\"),\n    \"D\": dict(color=\"Red\"),\n    \"E\": dict(color=\"Blue\"),\n    \"F\": dict(color=\"Blue\"),\n    \"G\": dict(color=\"Blue\"),\n    \"H\": dict(color=\"Blue\"),\n    \"I\": dict(color=\"Yellow\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = dict(with_labels=True, edgecolors=\"black\", node_size=500)\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "graph_partitioning",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "def graph_partitioning(G, plotting=True):\n    \"\"\"Partition a directed graph into a list of subgraphs that contain\n    only entirely supported or entirely unsupported nodes.\n    \"\"\"\n    # Categorize nodes by their node_type attribute\n    supported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"supported\"}\n    unsupported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"unsupported\"}\n    # Make a copy of the graph.\n    H = G.copy()\n    # Remove all edges connecting supported and unsupported nodes.",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex = nx.DiGraph()\nG_ex.add_nodes_from([\"In\"], node_type=\"input\", node_color=\"b\")\nG_ex.add_nodes_from([\"A\", \"C\", \"E\", \"F\"], node_type=\"supported\", node_color=\"g\")\nG_ex.add_nodes_from([\"B\", \"D\"], node_type=\"unsupported\", node_color=\"r\")\nG_ex.add_nodes_from([\"Out\"], node_type=\"output\", node_color=\"m\")\nG_ex.add_edges_from(\n    [\n        (\"In\", \"A\"),\n        (\"A\", \"B\"),\n        (\"B\", \"C\"),",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################\n# Calculate the subgraphs with plotting all results of intemediate steps.",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex_r",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex_r = nx.DiGraph()\n# Composing all subgraphs.\nfor subgraph in subgraphs_of_G_ex:\n    G_ex_r = nx.compose(G_ex_r, subgraph)\n# Adding the previously stored edges.\nG_ex_r.add_edges_from(removed_edges.edges())\n###############################################################################\n# Check that the original graph and the reconstructed graphs are isomorphic.\n# --------------------------------------------------------------------------\n#",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex_r.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor (white, black, game_info) in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor (u, v, d) in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor (u, v, d) in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for (i, layer) in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "G = nx.random_geometric_graph(20, radius=0.4, seed=3)\npos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos[0]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "pos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "H = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "cycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "edge_list",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "peekOfCode": "edge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,\n    edge_color=\"red\",",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor (u, v, d) in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "edge_labels",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "edge_labels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(G, pos, edge_labels)\nax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(z, seed=seed)  # configuration model, seed for reproduciblity\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "options = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "morse_encode",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "def morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol\n# Verify that the trie encoding is correct\nimport string\nfor letter in string.ascii_lowercase:\n    assert morse_encode(letter) == morse_direct_mapping[letter]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "dot = \"•\"\ndash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dash",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "dash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_direct_mapping",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,\n    \"h\": dot * 4,\n    \"i\": dot * 2,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_mapping_sorted",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_mapping_sorted = dict(\n    sorted(morse_direct_mapping.items(), key=lambda item: (len(item[1]), item[1]))\n)\n# More preprocessing: create the reverse mapping to simplify lookup\nreverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping[\"\"]",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "G = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:\n        G.nodes[n][\"layer\"] = i\npos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")\n# Flip the layout so the root node is on top\nfor k in pos:\n    pos[k][-1] *= -1\n# Visualize the trie\nnx.draw(G, pos=pos, with_labels=True)\nelabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "elabels",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "peekOfCode": "elabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node\ndef morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [G.pop[n] // 300 for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor (source, target) in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "options = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "description": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": "CharacterClient..venv.share.doc.networkx-2.8.8.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "CharacterClient",
        "kind": 6,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "class CharacterClient:\n    def __init__(self, token: str, Actor_id: str, server_url: str, client_port: int):\n        \"\"\"\n        Initialize a CharacterClient instance with the provided authentication and connection details.\n        This constructor sets up the basic attributes for the client but does not perform any blocking or network operations. To complete initialization, call the asynchronous `async_init()` method after construction.\n        Parameters:\n            token (str): Authentication token for server communication.\n            Actor_id (str): Unique identifier for the character actor.\n            server_url (str): URL of the server to register and communicate with.\n            client_port (int): Port number on which the client operates.",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "start_heartbeat_task",
        "kind": 2,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "def start_heartbeat_task(client: CharacterClient):\n    \"\"\"\n    Starts the asynchronous heartbeat task for the given CharacterClient if it is not already running.\n    \"\"\"\n    global _heartbeat_task_instance\n    if _heartbeat_task_instance is None or _heartbeat_task_instance.done():\n        try:\n            loop = asyncio.get_running_loop()\n            _heartbeat_task_instance = loop.create_task(_heartbeat_task_runner(client))\n            logger.info(f\"Asynchronous heartbeat task started for {client.Actor_id}.\")",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "initialize_character_client",
        "kind": 2,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "def initialize_character_client(\n    token: str, Actor_id: str, server_url: str, client_port: int\n):\n    \"\"\"\n    Asynchronously initializes the CharacterClient singleton and starts the heartbeat task if not already running.\n    Ensures required client directories exist, creates and initializes a CharacterClient instance with the provided parameters, stores it in the FastAPI app state, and schedules the heartbeat background task. If the client is already initialized, no action is taken.\n    \"\"\"\n    global _heartbeat_task_instance\n    if (\n        not hasattr(app.state, \"character_client_instance\")",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_client\")  # Get client logger\napp = FastAPI()\nensure_client_directories()  # This function in config.py should also use logging if it prints\nHEARTBEAT_INTERVAL_SECONDS = 60\nDEFAULT_MAX_RETRIES = 3\nDEFAULT_BASE_DELAY_SECONDS = 2\nclass CharacterClient:\n    def __init__(self, token: str, Actor_id: str, server_url: str, client_port: int):\n        \"\"\"\n        Initialize a CharacterClient instance with the provided authentication and connection details.",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "app = FastAPI()\nensure_client_directories()  # This function in config.py should also use logging if it prints\nHEARTBEAT_INTERVAL_SECONDS = 60\nDEFAULT_MAX_RETRIES = 3\nDEFAULT_BASE_DELAY_SECONDS = 2\nclass CharacterClient:\n    def __init__(self, token: str, Actor_id: str, server_url: str, client_port: int):\n        \"\"\"\n        Initialize a CharacterClient instance with the provided authentication and connection details.\n        This constructor sets up the basic attributes for the client but does not perform any blocking or network operations. To complete initialization, call the asynchronous `async_init()` method after construction.",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "HEARTBEAT_INTERVAL_SECONDS",
        "kind": 5,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "HEARTBEAT_INTERVAL_SECONDS = 60\nDEFAULT_MAX_RETRIES = 3\nDEFAULT_BASE_DELAY_SECONDS = 2\nclass CharacterClient:\n    def __init__(self, token: str, Actor_id: str, server_url: str, client_port: int):\n        \"\"\"\n        Initialize a CharacterClient instance with the provided authentication and connection details.\n        This constructor sets up the basic attributes for the client but does not perform any blocking or network operations. To complete initialization, call the asynchronous `async_init()` method after construction.\n        Parameters:\n            token (str): Authentication token for server communication.",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MAX_RETRIES",
        "kind": 5,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "DEFAULT_MAX_RETRIES = 3\nDEFAULT_BASE_DELAY_SECONDS = 2\nclass CharacterClient:\n    def __init__(self, token: str, Actor_id: str, server_url: str, client_port: int):\n        \"\"\"\n        Initialize a CharacterClient instance with the provided authentication and connection details.\n        This constructor sets up the basic attributes for the client but does not perform any blocking or network operations. To complete initialization, call the asynchronous `async_init()` method after construction.\n        Parameters:\n            token (str): Authentication token for server communication.\n            Actor_id (str): Unique identifier for the character actor.",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BASE_DELAY_SECONDS",
        "kind": 5,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "DEFAULT_BASE_DELAY_SECONDS = 2\nclass CharacterClient:\n    def __init__(self, token: str, Actor_id: str, server_url: str, client_port: int):\n        \"\"\"\n        Initialize a CharacterClient instance with the provided authentication and connection details.\n        This constructor sets up the basic attributes for the client but does not perform any blocking or network operations. To complete initialization, call the asynchronous `async_init()` method after construction.\n        Parameters:\n            token (str): Authentication token for server communication.\n            Actor_id (str): Unique identifier for the character actor.\n            server_url (str): URL of the server to register and communicate with.",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "_heartbeat_task_instance",
        "kind": 5,
        "importPath": "CharacterClient.src.character_client",
        "description": "CharacterClient.src.character_client",
        "peekOfCode": "_heartbeat_task_instance = None\ndef start_heartbeat_task(client: CharacterClient):\n    \"\"\"\n    Starts the asynchronous heartbeat task for the given CharacterClient if it is not already running.\n    \"\"\"\n    global _heartbeat_task_instance\n    if _heartbeat_task_instance is None or _heartbeat_task_instance.done():\n        try:\n            loop = asyncio.get_running_loop()\n            _heartbeat_task_instance = loop.create_task(_heartbeat_task_runner(client))",
        "detail": "CharacterClient.src.character_client",
        "documentation": {}
    },
    {
        "label": "ensure_client_directories",
        "kind": 2,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "def ensure_client_directories():\n    \"\"\"\n    Ensure that all required directories for the client application exist, creating them if necessary.\n    Uses a basic logger for this pre-initialization phase, as the main client logger might not be set up yet.\n    \"\"\"\n    # Use a temporary logger for this specific function, as it runs at import time.\n    # This avoids dependency on the full logging_config being initialized if this module is imported first.\n    temp_logger = logging.getLogger(\"dreamweaver_client_config_setup\")\n    if (\n        not temp_logger.hasHandlers()",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_ROOT",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n# --- Base Data Path ---\n# Users can override this by setting the DREAMWEAVER_CLIENT_DATA_PATH environment variable.\n# Default is 'CharacterClient/data/' relative to the client root.\nDEFAULT_CLIENT_DATA_PATH = os.path.join(CLIENT_ROOT, \"data\")\nCLIENT_DATA_PATH = os.getenv(\"DREAMWEAVER_CLIENT_DATA_PATH\", DEFAULT_CLIENT_DATA_PATH)\n# --- Models Path ---\n# Users can override this by setting the DREAMWEAVER_CLIENT_MODELS_PATH environment variable.\n# Default is '[CLIENT_DATA_PATH]/models/'.\nDEFAULT_CLIENT_MODELS_PATH = os.path.join(CLIENT_DATA_PATH, \"models\")",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CLIENT_DATA_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "DEFAULT_CLIENT_DATA_PATH = os.path.join(CLIENT_ROOT, \"data\")\nCLIENT_DATA_PATH = os.getenv(\"DREAMWEAVER_CLIENT_DATA_PATH\", DEFAULT_CLIENT_DATA_PATH)\n# --- Models Path ---\n# Users can override this by setting the DREAMWEAVER_CLIENT_MODELS_PATH environment variable.\n# Default is '[CLIENT_DATA_PATH]/models/'.\nDEFAULT_CLIENT_MODELS_PATH = os.path.join(CLIENT_DATA_PATH, \"models\")\nCLIENT_MODELS_PATH = os.getenv(\n    \"DREAMWEAVER_CLIENT_MODELS_PATH\", DEFAULT_CLIENT_MODELS_PATH\n)\n# Specific model type paths within CLIENT_MODELS_PATH",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_DATA_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_DATA_PATH = os.getenv(\"DREAMWEAVER_CLIENT_DATA_PATH\", DEFAULT_CLIENT_DATA_PATH)\n# --- Models Path ---\n# Users can override this by setting the DREAMWEAVER_CLIENT_MODELS_PATH environment variable.\n# Default is '[CLIENT_DATA_PATH]/models/'.\nDEFAULT_CLIENT_MODELS_PATH = os.path.join(CLIENT_DATA_PATH, \"models\")\nCLIENT_MODELS_PATH = os.getenv(\n    \"DREAMWEAVER_CLIENT_MODELS_PATH\", DEFAULT_CLIENT_MODELS_PATH\n)\n# Specific model type paths within CLIENT_MODELS_PATH\nCLIENT_LLM_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"llm\")",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CLIENT_MODELS_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "DEFAULT_CLIENT_MODELS_PATH = os.path.join(CLIENT_DATA_PATH, \"models\")\nCLIENT_MODELS_PATH = os.getenv(\n    \"DREAMWEAVER_CLIENT_MODELS_PATH\", DEFAULT_CLIENT_MODELS_PATH\n)\n# Specific model type paths within CLIENT_MODELS_PATH\nCLIENT_LLM_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"llm\")\nCLIENT_TTS_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"tts\")\nCLIENT_TTS_REFERENCE_VOICES_PATH = os.path.join(\n    CLIENT_TTS_MODELS_PATH, \"reference_voices\"\n)",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_MODELS_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_MODELS_PATH = os.getenv(\n    \"DREAMWEAVER_CLIENT_MODELS_PATH\", DEFAULT_CLIENT_MODELS_PATH\n)\n# Specific model type paths within CLIENT_MODELS_PATH\nCLIENT_LLM_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"llm\")\nCLIENT_TTS_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"tts\")\nCLIENT_TTS_REFERENCE_VOICES_PATH = os.path.join(\n    CLIENT_TTS_MODELS_PATH, \"reference_voices\"\n)\n# --- Logs Path ---",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LLM_MODELS_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_LLM_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"llm\")\nCLIENT_TTS_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"tts\")\nCLIENT_TTS_REFERENCE_VOICES_PATH = os.path.join(\n    CLIENT_TTS_MODELS_PATH, \"reference_voices\"\n)\n# --- Logs Path ---\n# Default is '[CLIENT_DATA_PATH]/logs/'.\nCLIENT_LOGS_PATH = os.path.join(CLIENT_DATA_PATH, \"logs\")\n# --- Temporary Audio Path ---\n# For storing synthesized audio before sending to server, or other temp files.",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_TTS_MODELS_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_TTS_MODELS_PATH = os.path.join(CLIENT_MODELS_PATH, \"tts\")\nCLIENT_TTS_REFERENCE_VOICES_PATH = os.path.join(\n    CLIENT_TTS_MODELS_PATH, \"reference_voices\"\n)\n# --- Logs Path ---\n# Default is '[CLIENT_DATA_PATH]/logs/'.\nCLIENT_LOGS_PATH = os.path.join(CLIENT_DATA_PATH, \"logs\")\n# --- Temporary Audio Path ---\n# For storing synthesized audio before sending to server, or other temp files.\n# Default is '[CLIENT_DATA_PATH]/temp_audio/'.",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_TTS_REFERENCE_VOICES_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_TTS_REFERENCE_VOICES_PATH = os.path.join(\n    CLIENT_TTS_MODELS_PATH, \"reference_voices\"\n)\n# --- Logs Path ---\n# Default is '[CLIENT_DATA_PATH]/logs/'.\nCLIENT_LOGS_PATH = os.path.join(CLIENT_DATA_PATH, \"logs\")\n# --- Temporary Audio Path ---\n# For storing synthesized audio before sending to server, or other temp files.\n# Default is '[CLIENT_DATA_PATH]/temp_audio/'.\nCLIENT_TEMP_AUDIO_PATH = os.path.join(CLIENT_DATA_PATH, \"temp_audio\")",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOGS_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_LOGS_PATH = os.path.join(CLIENT_DATA_PATH, \"logs\")\n# --- Temporary Audio Path ---\n# For storing synthesized audio before sending to server, or other temp files.\n# Default is '[CLIENT_DATA_PATH]/temp_audio/'.\nCLIENT_TEMP_AUDIO_PATH = os.path.join(CLIENT_DATA_PATH, \"temp_audio\")\nimport logging\n# --- Function to Create Directories ---\ndef ensure_client_directories():\n    \"\"\"\n    Ensure that all required directories for the client application exist, creating them if necessary.",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "CLIENT_TEMP_AUDIO_PATH",
        "kind": 5,
        "importPath": "CharacterClient.src.config",
        "description": "CharacterClient.src.config",
        "peekOfCode": "CLIENT_TEMP_AUDIO_PATH = os.path.join(CLIENT_DATA_PATH, \"temp_audio\")\nimport logging\n# --- Function to Create Directories ---\ndef ensure_client_directories():\n    \"\"\"\n    Ensure that all required directories for the client application exist, creating them if necessary.\n    Uses a basic logger for this pre-initialization phase, as the main client logger might not be set up yet.\n    \"\"\"\n    # Use a temporary logger for this specific function, as it runs at import time.\n    # This avoids dependency on the full logging_config being initialized if this module is imported first.",
        "detail": "CharacterClient.src.config",
        "documentation": {}
    },
    {
        "label": "JsonDataset",
        "kind": 6,
        "importPath": "CharacterClient.src.llm_engine",
        "description": "CharacterClient.src.llm_engine",
        "peekOfCode": "class JsonDataset(torch.utils.data.Dataset):\n    def __init__(self, data_list, tokenizer, max_length=512):\n        \"\"\"\n        Initialize the dataset with a list of data samples, a tokenizer, and a maximum token length.\n        Parameters:\n            data_list (list): List of training samples, each containing 'input' and 'output' fields.\n            tokenizer: Tokenizer used to process text samples.\n            max_length (int, optional): Maximum number of tokens per sample. Defaults to 512.\n        \"\"\"\n        self.data = data_list",
        "detail": "CharacterClient.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "LLMEngine",
        "kind": 6,
        "importPath": "CharacterClient.src.llm_engine",
        "description": "CharacterClient.src.llm_engine",
        "peekOfCode": "class LLMEngine:\n    def __init__(self, model_name: str = \"\", Actor_id: str = \"default_client_Actor\"):\n        \"\"\"\n        Initialize the LLMEngine with specified model and actor identifiers, setting up directory paths and loading the model and tokenizer.\n        Parameters:\n            model_name (str, optional): Name of the language model to load. Defaults to a preconfigured model if not provided.\n            Actor_id (str, optional): Unique identifier for the client actor. Defaults to \"default_client_Actor\".\n        \"\"\"\n        self.Actor_id = Actor_id or \"default_client_Actor\"\n        self.model_name = model_name if model_name else DEFAULT_CLIENT_MODEL_NAME",
        "detail": "CharacterClient.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "CharacterClient.src.llm_engine",
        "description": "CharacterClient.src.llm_engine",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_client\")\nensure_client_directories()  # This in config.py should also be logged if it prints\nDEFAULT_CLIENT_MODEL_NAME = \"TinyLlama/TinyLlama-1.1B-Chat-v1.0\"\nclass JsonDataset(torch.utils.data.Dataset):\n    def __init__(self, data_list, tokenizer, max_length=512):\n        \"\"\"\n        Initialize the dataset with a list of data samples, a tokenizer, and a maximum token length.\n        Parameters:\n            data_list (list): List of training samples, each containing 'input' and 'output' fields.\n            tokenizer: Tokenizer used to process text samples.",
        "detail": "CharacterClient.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CLIENT_MODEL_NAME",
        "kind": 5,
        "importPath": "CharacterClient.src.llm_engine",
        "description": "CharacterClient.src.llm_engine",
        "peekOfCode": "DEFAULT_CLIENT_MODEL_NAME = \"TinyLlama/TinyLlama-1.1B-Chat-v1.0\"\nclass JsonDataset(torch.utils.data.Dataset):\n    def __init__(self, data_list, tokenizer, max_length=512):\n        \"\"\"\n        Initialize the dataset with a list of data samples, a tokenizer, and a maximum token length.\n        Parameters:\n            data_list (list): List of training samples, each containing 'input' and 'output' fields.\n            tokenizer: Tokenizer used to process text samples.\n            max_length (int, optional): Maximum number of tokens per sample. Defaults to 512.\n        \"\"\"",
        "detail": "CharacterClient.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "setup_client_logging",
        "kind": 2,
        "importPath": "CharacterClient.src.logging_config",
        "description": "CharacterClient.src.logging_config",
        "peekOfCode": "def setup_client_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver Character Client application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in the directory specified by CLIENT_LOGS_PATH (e.g., CharacterClient/data/logs/client.log).\n    \"\"\"\n    # config.ensure_client_directories() should have already created CLIENT_LOGS_PATH\n    # but a check here doesn't hurt, though it might be redundant if called after config import.\n    # For simplicity, we assume CLIENT_LOGS_PATH exists as per config.py's import-time execution.\n    logger = logging.getLogger(LOGGER_NAME)",
        "detail": "CharacterClient.src.logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "CharacterClient.src.logging_config",
        "description": "CharacterClient.src.logging_config",
        "peekOfCode": "def get_logger(name=LOGGER_NAME):\n    \"\"\"\n    Returns the configured application logger for the client.\n    \"\"\"\n    return logging.getLogger(name)\nif __name__ == \"__main__\":\n    # This part is for testing the logging_config.py itself.\n    # It requires config.py to be available in the path.\n    # To run this directly for testing, you might need to adjust Python's path or run as a module.\n    print(",
        "detail": "CharacterClient.src.logging_config",
        "documentation": {}
    },
    {
        "label": "CLIENT_LOG_FILE",
        "kind": 5,
        "importPath": "CharacterClient.src.logging_config",
        "description": "CharacterClient.src.logging_config",
        "peekOfCode": "CLIENT_LOG_FILE = os.path.join(CLIENT_LOGS_PATH, \"client.log\")\nDEFAULT_LOG_LEVEL = logging.INFO\nLOGGER_NAME = \"dreamweaver_client\"\ndef setup_client_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver Character Client application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in the directory specified by CLIENT_LOGS_PATH (e.g., CharacterClient/data/logs/client.log).\n    \"\"\"\n    # config.ensure_client_directories() should have already created CLIENT_LOGS_PATH",
        "detail": "CharacterClient.src.logging_config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_LEVEL",
        "kind": 5,
        "importPath": "CharacterClient.src.logging_config",
        "description": "CharacterClient.src.logging_config",
        "peekOfCode": "DEFAULT_LOG_LEVEL = logging.INFO\nLOGGER_NAME = \"dreamweaver_client\"\ndef setup_client_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver Character Client application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in the directory specified by CLIENT_LOGS_PATH (e.g., CharacterClient/data/logs/client.log).\n    \"\"\"\n    # config.ensure_client_directories() should have already created CLIENT_LOGS_PATH\n    # but a check here doesn't hurt, though it might be redundant if called after config import.",
        "detail": "CharacterClient.src.logging_config",
        "documentation": {}
    },
    {
        "label": "LOGGER_NAME",
        "kind": 5,
        "importPath": "CharacterClient.src.logging_config",
        "description": "CharacterClient.src.logging_config",
        "peekOfCode": "LOGGER_NAME = \"dreamweaver_client\"\ndef setup_client_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver Character Client application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in the directory specified by CLIENT_LOGS_PATH (e.g., CharacterClient/data/logs/client.log).\n    \"\"\"\n    # config.ensure_client_directories() should have already created CLIENT_LOGS_PATH\n    # but a check here doesn't hurt, though it might be redundant if called after config import.\n    # For simplicity, we assume CLIENT_LOGS_PATH exists as per config.py's import-time execution.",
        "detail": "CharacterClient.src.logging_config",
        "documentation": {}
    },
    {
        "label": "TTSManager",
        "kind": 6,
        "importPath": "CharacterClient.src.tts_manager",
        "description": "CharacterClient.src.tts_manager",
        "peekOfCode": "class TTSManager:\n    def __init__(\n        self,\n        tts_service_name: str,\n        model_name: Optional[str] = None,\n        speaker_wav_path: Optional[str] = None,\n        language: Optional[str] = \"en\",\n    ):\n        \"\"\"\n        Initialize a TTSManager instance for the specified text-to-speech service and model.",
        "detail": "CharacterClient.src.tts_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "CharacterClient.src.tts_manager",
        "description": "CharacterClient.src.tts_manager",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_client\")\nensure_client_directories()  # This in config.py should also be logged if it prints\ntry:\n    import gtts\nexcept ImportError:\n    gtts = None\n    logger.info(\n        \"Client TTSManager: gtts library not found. gTTS service will not be available.\"\n    )\ntry:",
        "detail": "CharacterClient.src.tts_manager",
        "documentation": {}
    },
    {
        "label": "sample_character",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def sample_character():\n    \"\"\"Sample character data for testing.\"\"\"\n    return {\n        \"id\": 1,\n        \"name\": \"Test Hero\",\n        \"class\": \"Paladin\",\n        \"level\": 15,\n        \"health\": 150,\n        \"mana\": 75,\n        \"attributes\": {",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "character_client",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def character_client():\n    \"\"\"CharacterClient instance for testing.\"\"\"\n    from CharacterClient.character_client import CharacterClient\n    return CharacterClient(base_url=\"https://test.api.com\", api_key=\"test_key\")\n@pytest.fixture\ndef mock_api_response():\n    \"\"\"Mock API response helper.\"\"\"\n    def _mock_response(status_code=200, json_data=None, headers=None):\n        mock_response = Mock()\n        mock_response.status_code = status_code",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_api_response",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def mock_api_response():\n    \"\"\"Mock API response helper.\"\"\"\n    def _mock_response(status_code=200, json_data=None, headers=None):\n        mock_response = Mock()\n        mock_response.status_code = status_code\n        mock_response.json.return_value = json_data or {}\n        mock_response.headers = headers or {}\n        mock_response.text = str(json_data) if json_data else \"\"\n        return mock_response\n    return _mock_response",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def event_loop():\n    \"\"\"Create an instance of the default event loop for the test session.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture(scope=\"session\")\ndef temp_test_dir():\n    \"\"\"Create a temporary directory for test files.\"\"\"\n    with tempfile.TemporaryDirectory() as temp_dir:\n        yield temp_dir",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "temp_test_dir",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def temp_test_dir():\n    \"\"\"Create a temporary directory for test files.\"\"\"\n    with tempfile.TemporaryDirectory() as temp_dir:\n        yield temp_dir\n@pytest.fixture(scope=\"function\")\ndef clean_temp_files():\n    \"\"\"Clean up temporary files after each test.\"\"\"\n    temp_files = []\n    def track_temp_file(filepath):\n        temp_files.append(filepath)",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "clean_temp_files",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def clean_temp_files():\n    \"\"\"Clean up temporary files after each test.\"\"\"\n    temp_files = []\n    def track_temp_file(filepath):\n        temp_files.append(filepath)\n        return filepath\n    yield track_temp_file\n    # Cleanup\n    for filepath in temp_files:\n        try:",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "setup_test_environment",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def setup_test_environment():\n    \"\"\"Set up the test environment.\"\"\"\n    # Set test environment variables\n    os.environ[\"TTS_TEST_MODE\"] = \"1\"\n    os.environ[\"TTS_CACHE_DISABLED\"] = \"1\"\n    yield\n    # Cleanup\n    os.environ.pop(\"TTS_TEST_MODE\", None)\n    os.environ.pop(\"TTS_CACHE_DISABLED\", None)\n@pytest.fixture",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_audio_file",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def mock_audio_file():\n    \"\"\"Create a mock audio file for testing.\"\"\"\n    with tempfile.NamedTemporaryFile(suffix=\".wav\", delete=False) as temp_file:\n        temp_file.write(b\"fake_audio_data\")\n        temp_path = temp_file.name\n    yield temp_path\n    if os.path.exists(temp_path):\n        os.unlink(temp_path)\n@pytest.fixture\ndef mock_tts_config():",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_tts_config",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def mock_tts_config():\n    \"\"\"Provide a mock TTS configuration for testing.\"\"\"\n    return {\n        \"voice\": \"en-US-AriaNeural\",\n        \"speed\": 1.0,\n        \"pitch\": 1.0,\n        \"volume\": 0.8,\n        \"format\": \"wav\",\n    }\n# Performance test markers",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest_configure",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def pytest_configure(config):\n    \"\"\"Configure pytest markers.\"\"\"\n    config.addinivalue_line(\"markers\", \"slow: mark test as slow running\")\n    config.addinivalue_line(\"markers\", \"integration: mark test as integration test\")\n    config.addinivalue_line(\"markers\", \"performance: mark test as performance test\")\n    config.addinivalue_line(\"markers\", \"security: mark test as security test\")\n    config.addinivalue_line(\"markers\", \"unit: mark test as unit test\")\ndef pytest_collection_modifyitems(config, items):\n    \"\"\"Automatically mark certain tests based on their names.\"\"\"\n    for item in items:",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest_collection_modifyitems",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def pytest_collection_modifyitems(config, items):\n    \"\"\"Automatically mark certain tests based on their names.\"\"\"\n    for item in items:\n        # Mark performance tests\n        if \"performance\" in item.name.lower() or \"stress\" in item.name.lower():\n            item.add_marker(pytest.mark.slow)\n            item.add_marker(pytest.mark.performance)\n        # Mark security tests\n        if \"security\" in item.name.lower() or \"malicious\" in item.name.lower():\n            item.add_marker(pytest.mark.security)",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_logger",
        "kind": 2,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "def mock_logger():\n    \"\"\"Provide a mock logger for testing logging functionality.\"\"\"\n    with patch(\"logging.getLogger\") as mock_get_logger:\n        mock_logger_instance = Mock()\n        mock_get_logger.return_value = mock_logger_instance\n        yield mock_logger_instance",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest.mark.unit",
        "kind": 5,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "pytest.mark.unit = pytest.mark.unit\npytest.mark.integration = pytest.mark.integration\npytest.mark.performance = pytest.mark.performance\n\"\"\"\nEnhanced pytest configuration and fixtures for TTS Manager tests.\n\"\"\"\nimport pytest\nimport tempfile\nimport os\nimport asyncio",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest.mark.integration",
        "kind": 5,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "pytest.mark.integration = pytest.mark.integration\npytest.mark.performance = pytest.mark.performance\n\"\"\"\nEnhanced pytest configuration and fixtures for TTS Manager tests.\n\"\"\"\nimport pytest\nimport tempfile\nimport os\nimport asyncio\nfrom pathlib import Path",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest.mark.performance",
        "kind": 5,
        "importPath": "CharacterClient.tests.conftest",
        "description": "CharacterClient.tests.conftest",
        "peekOfCode": "pytest.mark.performance = pytest.mark.performance\n\"\"\"\nEnhanced pytest configuration and fixtures for TTS Manager tests.\n\"\"\"\nimport pytest\nimport tempfile\nimport os\nimport asyncio\nfrom pathlib import Path\nfrom unittest.mock import Mock, patch",
        "detail": "CharacterClient.tests.conftest",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "kind": 2,
        "importPath": "CharacterClient.tests.run_comprehensive_tests",
        "description": "CharacterClient.tests.run_comprehensive_tests",
        "peekOfCode": "def run_tests(test_type=\"all\", verbose=True, coverage=False):\n    \"\"\"Run tests with specified configuration.\"\"\"\n    cmd = [\"python\", \"-m\", \"pytest\"]\n    if verbose:\n        cmd.append(\"-v\")\n    if coverage:\n        cmd.extend([\"--cov=tts_manager\", \"--cov-report=html\", \"--cov-report=term\"])\n    # Test type selection\n    if test_type == \"unit\":\n        cmd.extend([\"-m\", \"unit\"])",
        "detail": "CharacterClient.tests.run_comprehensive_tests",
        "documentation": {}
    },
    {
        "label": "run_unittest_suite",
        "kind": 2,
        "importPath": "CharacterClient.tests.run_tests",
        "description": "CharacterClient.tests.run_tests",
        "peekOfCode": "def run_unittest_suite(pattern=\"test_*.py\", verbosity=2):\n    \"\"\"Run tests using unittest framework.\"\"\"\n    print(f\"Running tests with unittest (pattern: {pattern})...\")\n    loader = unittest.TestLoader()\n    test_dir = Path(__file__).parent\n    suite = loader.discover(str(test_dir), pattern=pattern)\n    runner = unittest.TextTestRunner(verbosity=verbosity, buffer=True, failfast=False)\n    result = runner.run(suite)\n    # Print summary\n    print(f\"\\nTest Summary:\")",
        "detail": "CharacterClient.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "run_pytest_suite",
        "kind": 2,
        "importPath": "CharacterClient.tests.run_tests",
        "description": "CharacterClient.tests.run_tests",
        "peekOfCode": "def run_pytest_suite(args=None):\n    \"\"\"Run tests using pytest framework.\"\"\"\n    try:\n        import pytest\n    except ImportError:\n        print(\"pytest not available, please install it: pip install pytest\")\n        return False\n    print(\"Running tests with pytest...\")\n    pytest_args = [\n        \"-v\",  # Verbose output",
        "detail": "CharacterClient.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "run_performance_tests",
        "kind": 2,
        "importPath": "CharacterClient.tests.run_tests",
        "description": "CharacterClient.tests.run_tests",
        "peekOfCode": "def run_performance_tests():\n    \"\"\"Run only performance tests.\"\"\"\n    print(\"Running performance tests...\")\n    return run_unittest_suite(pattern=\"test_*_performance.py\")\ndef run_integration_tests():\n    \"\"\"Run integration tests.\"\"\"\n    print(\"Running integration tests...\")\n    # Integration tests are included in the performance test file\n    return run_unittest_suite(pattern=\"test_*_performance.py\")\ndef main():",
        "detail": "CharacterClient.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "run_integration_tests",
        "kind": 2,
        "importPath": "CharacterClient.tests.run_tests",
        "description": "CharacterClient.tests.run_tests",
        "peekOfCode": "def run_integration_tests():\n    \"\"\"Run integration tests.\"\"\"\n    print(\"Running integration tests...\")\n    # Integration tests are included in the performance test file\n    return run_unittest_suite(pattern=\"test_*_performance.py\")\ndef main():\n    \"\"\"Main test runner function.\"\"\"\n    parser = argparse.ArgumentParser(description=\"CharacterClient Test Runner\")\n    parser.add_argument(\n        \"--framework\",",
        "detail": "CharacterClient.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "CharacterClient.tests.run_tests",
        "description": "CharacterClient.tests.run_tests",
        "peekOfCode": "def main():\n    \"\"\"Main test runner function.\"\"\"\n    parser = argparse.ArgumentParser(description=\"CharacterClient Test Runner\")\n    parser.add_argument(\n        \"--framework\",\n        choices=[\"unittest\", \"pytest\", \"auto\"],\n        default=\"auto\",\n        help=\"Testing framework to use\",\n    )\n    parser.add_argument(",
        "detail": "CharacterClient.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "TestCharacterClientInitializationAndFactory",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "class TestCharacterClientInitializationAndFactory:\n    def test_character_client_init(self, character_client_bare):\n        client = character_client_bare\n        assert client.token == \"test_token\"\n        assert client.Actor_id == \"test_actor\"\n        assert client.server_url == \"http://testserver:8000\"\n        assert client.client_port == 8001\n        assert client.session_token is None\n        assert client.session_token_expiry is None\n        assert client.ws_connection is None",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "TestCharacterClientAsyncInit",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "class TestCharacterClientAsyncInit:\n    @patch(\"asyncio.to_thread\")\n    async def test_async_init_success_path(self, mock_to_thread, character_client_bare, mock_external_classes, mock_network_calls):\n        client = character_client_bare # __init__ has run, async_init (mocked by fixture) has not.\n        # Restore real async_init for this test, mocking its sub-components\n        client.async_init = CharacterClient.async_init.__func__.__get__(client, CharacterClient)\n        mock_register_result = True\n        mock_traits_result = {\n            \"name\": \"FetchedActor\", \"personality\": \"fetched\", \"tts\": \"xttsv2\",\n            \"tts_model\": \"xtts_model\", \"reference_audio_filename\": \"ref.wav\",",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "TestCharacterClientHandshake",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "class TestCharacterClientHandshake:\n    @patch(\"asyncio.to_thread\", new_callable=AsyncMock)\n    async def test_perform_handshake_async_success(self, mock_to_thread, character_client_bare, mock_network_calls):\n        client = character_client_bare\n        mock_challenge_resp_json = {\"challenge\": \"test_challenge\"}\n        mock_session_resp_json = {\"session_token\": \"test_session_token\", \"expires_at\": (datetime.now(timezone.utc) + timedelta(hours=1)).isoformat()}\n        # Mock the return values of requests.post().json()\n        mock_resp_challenge = MagicMock()\n        mock_resp_challenge.json.return_value = mock_challenge_resp_json\n        mock_resp_challenge.raise_for_status.return_value = None",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "TestHandleConfigUpdate",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "class TestHandleConfigUpdate: # Removed (IsolatedAsyncioTestCase)\n    @pytest.fixture(autouse=True) # Auto-use this fixture for all methods in this class\n    async def setup_client_for_config_update(self, monkeypatch): # Renamed from asyncSetUp\n        # Patch LLM and TTS for CharacterClient's full instantiation via create()\n        self.mock_llm_engine_patch = patch(\"character_client.LLMEngine\", MagicMock())\n        self.mock_tts_manager_patch = patch(\"character_client.TTSManager\", MagicMock())\n        self.MockLLMEngine_cls = self.mock_llm_engine_patch.start()\n        self.MockTTSManager_cls = self.mock_tts_manager_patch.start()\n        self.mock_llm_instance = self.MockLLMEngine_cls.return_value\n        self.mock_llm_instance.is_initialized = True",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "reset_singleton_mocks",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "def reset_singleton_mocks():\n    \"\"\"Resets mocks that might be stateful if not reset.\"\"\"\n    MockTTSManager.reset_mock()\n    MockLLMEngine.reset_mock()\n    MockRequestsPost.reset_mock()\n    MockRequestsGet.reset_mock()\n    MockWebsocketsConnect.reset_mock()\n    # Default successful response for requests.post\n    mock_response_post = MagicMock()\n    mock_response_post.raise_for_status.return_value = None",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "mock_external_classes",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "def mock_external_classes(monkeypatch):\n    monkeypatch.setattr(\"character_client.TTSManager\", MockTTSManager)\n    monkeypatch.setattr(\"character_client.LLMEngine\", MockLLMEngine)\n@pytest.fixture\ndef mock_network_calls(monkeypatch):\n    monkeypatch.setattr(\"requests.post\", MockRequestsPost)\n    monkeypatch.setattr(\"requests.get\", MockRequestsGet)\n    monkeypatch.setattr(\"websockets.connect\", MockWebsocketsConnect)\n@pytest.fixture\ndef character_client_bare(mock_external_classes, mock_network_calls):",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "mock_network_calls",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "def mock_network_calls(monkeypatch):\n    monkeypatch.setattr(\"requests.post\", MockRequestsPost)\n    monkeypatch.setattr(\"requests.get\", MockRequestsGet)\n    monkeypatch.setattr(\"websockets.connect\", MockWebsocketsConnect)\n@pytest.fixture\ndef character_client_bare(mock_external_classes, mock_network_calls):\n    \"\"\"Provides a CharacterClient instance without calling async_init.\"\"\"\n    with patch.object(CharacterClient, \"async_init\", AsyncMock()) as mock_async_init_on_instance:\n        client = CharacterClient(\n            token=\"test_token\",",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "character_client_bare",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "def character_client_bare(mock_external_classes, mock_network_calls):\n    \"\"\"Provides a CharacterClient instance without calling async_init.\"\"\"\n    with patch.object(CharacterClient, \"async_init\", AsyncMock()) as mock_async_init_on_instance:\n        client = CharacterClient(\n            token=\"test_token\",\n            Actor_id=\"test_actor\",\n            server_url=\"http://testserver:8000\",\n            client_port=8001\n        )\n        # Ensure the instance's async_init is the mock, not the class's after patch is exited",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "MockTTSManager",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "MockTTSManager = MagicMock()\nMockLLMEngine = MagicMock()\nMockRequestsPost = MagicMock() # For requests.post\nMockRequestsGet = MagicMock()  # For requests.get\nMockWebsocketsConnect = AsyncMock() # For websockets.connect\n# --- Fixtures ---\n@pytest.fixture(autouse=True) # Apply to all tests in this file\ndef reset_singleton_mocks():\n    \"\"\"Resets mocks that might be stateful if not reset.\"\"\"\n    MockTTSManager.reset_mock()",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "MockLLMEngine",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "MockLLMEngine = MagicMock()\nMockRequestsPost = MagicMock() # For requests.post\nMockRequestsGet = MagicMock()  # For requests.get\nMockWebsocketsConnect = AsyncMock() # For websockets.connect\n# --- Fixtures ---\n@pytest.fixture(autouse=True) # Apply to all tests in this file\ndef reset_singleton_mocks():\n    \"\"\"Resets mocks that might be stateful if not reset.\"\"\"\n    MockTTSManager.reset_mock()\n    MockLLMEngine.reset_mock()",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "MockRequestsPost",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "MockRequestsPost = MagicMock() # For requests.post\nMockRequestsGet = MagicMock()  # For requests.get\nMockWebsocketsConnect = AsyncMock() # For websockets.connect\n# --- Fixtures ---\n@pytest.fixture(autouse=True) # Apply to all tests in this file\ndef reset_singleton_mocks():\n    \"\"\"Resets mocks that might be stateful if not reset.\"\"\"\n    MockTTSManager.reset_mock()\n    MockLLMEngine.reset_mock()\n    MockRequestsPost.reset_mock()",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "MockRequestsGet",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "MockRequestsGet = MagicMock()  # For requests.get\nMockWebsocketsConnect = AsyncMock() # For websockets.connect\n# --- Fixtures ---\n@pytest.fixture(autouse=True) # Apply to all tests in this file\ndef reset_singleton_mocks():\n    \"\"\"Resets mocks that might be stateful if not reset.\"\"\"\n    MockTTSManager.reset_mock()\n    MockLLMEngine.reset_mock()\n    MockRequestsPost.reset_mock()\n    MockRequestsGet.reset_mock()",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "MockWebsocketsConnect",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_character_client",
        "description": "CharacterClient.tests.test_character_client",
        "peekOfCode": "MockWebsocketsConnect = AsyncMock() # For websockets.connect\n# --- Fixtures ---\n@pytest.fixture(autouse=True) # Apply to all tests in this file\ndef reset_singleton_mocks():\n    \"\"\"Resets mocks that might be stateful if not reset.\"\"\"\n    MockTTSManager.reset_mock()\n    MockLLMEngine.reset_mock()\n    MockRequestsPost.reset_mock()\n    MockRequestsGet.reset_mock()\n    MockWebsocketsConnect.reset_mock()",
        "detail": "CharacterClient.tests.test_character_client",
        "documentation": {}
    },
    {
        "label": "TestCharacterClientIntegration",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_character_client_integration",
        "description": "CharacterClient.tests.test_character_client_integration",
        "peekOfCode": "class TestCharacterClientIntegration:\n    \"\"\"Integration tests for CharacterClient with realistic scenarios.\"\"\"\n    @pytest.fixture\n    def character_client(self):\n        \"\"\"Create CharacterClient instance for integration testing.\"\"\"\n        with patch(\"character_client.Config\") as mock_config_class:\n            mock_config_instance = Mock()\n            mock_config_instance.get.side_effect = lambda key, default=None: {\n                \"CHARACTER_API_URL\": \"https://test-api.character.com/v1\",\n                \"CHARACTER_API_KEY\": \"test-integration-key\",",
        "detail": "CharacterClient.tests.test_character_client_integration",
        "documentation": {}
    },
    {
        "label": "TestCharacterClientPerformance",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_character_client_performance",
        "description": "CharacterClient.tests.test_character_client_performance",
        "peekOfCode": "class TestCharacterClientPerformance(unittest.TestCase):\n    \"\"\"Performance-related tests for CharacterClient.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.client = CharacterClient(\n            base_url=\"https://test.api.com\", api_key=\"test_key\"\n        )\n    @patch(\"requests.Session.get\")\n    def test_concurrent_requests_thread_safety(self, mock_get):\n        \"\"\"Test that the client handles concurrent requests safely.\"\"\"",
        "detail": "CharacterClient.tests.test_character_client_performance",
        "documentation": {}
    },
    {
        "label": "TestCharacterClientIntegration",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_character_client_performance",
        "description": "CharacterClient.tests.test_character_client_performance",
        "peekOfCode": "class TestCharacterClientIntegration(unittest.TestCase):\n    \"\"\"Integration-style tests for CharacterClient workflows.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.client = CharacterClient(\n            base_url=\"https://test.api.com\", api_key=\"test_key\"\n        )\n    @patch(\"requests.Session.post\")\n    @patch(\"requests.Session.get\")\n    @patch(\"requests.Session.put\")",
        "detail": "CharacterClient.tests.test_character_client_performance",
        "documentation": {}
    },
    {
        "label": "TestConfigPaths",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestConfigPaths:\n    \"\"\"Test configuration path constants and derivation.\"\"\"\n    def test_client_root_exists(self):\n        \"\"\"Test that CLIENT_ROOT is properly defined and exists.\"\"\"\n        assert hasattr(config, \"CLIENT_ROOT\")\n        assert config.CLIENT_ROOT is not None\n        assert os.path.isabs(config.CLIENT_ROOT)  # Should be absolute path\n    def test_default_paths_structure(self):\n        \"\"\"Test that default paths follow expected structure.\"\"\"\n        assert hasattr(config, \"DEFAULT_CLIENT_DATA_PATH\")",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestEnvironmentVariableOverrides",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestEnvironmentVariableOverrides:\n    \"\"\"Test environment variable override functionality.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.original_env = os.environ.copy()\n    def teardown_method(self):\n        \"\"\"Restore original environment.\"\"\"\n        os.environ.clear()\n        os.environ.update(self.original_env)\n    @patch.dict(os.environ, {\"DREAMWEAVER_CLIENT_DATA_PATH\": \"/custom/data/path\"})",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestDirectoryCreation",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestDirectoryCreation:\n    \"\"\"Test the ensure_client_directories function.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test directories.\"\"\"\n        self.test_base_dir = tempfile.mkdtemp()\n        self.original_env = os.environ.copy()\n    def teardown_method(self):\n        \"\"\"Clean up test directories.\"\"\"\n        if os.path.exists(self.test_base_dir):\n            shutil.rmtree(self.test_base_dir)",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestConfigModuleExecution",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestConfigModuleExecution:\n    \"\"\"Test config module behavior when executed as main or imported.\"\"\"\n    def test_module_import_creates_directories(self):\n        \"\"\"Test that importing config module creates directories.\"\"\"\n        # Since config is already imported, directories should exist\n        # This tests the import-time execution behavior\n        assert os.path.exists(config.CLIENT_DATA_PATH)\n        assert os.path.exists(config.CLIENT_LOGS_PATH)\n    def test_module_attributes_accessibility(self):\n        \"\"\"Test that all expected module attributes are accessible.\"\"\"",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestLoggingConfigIntegration",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestLoggingConfigIntegration:\n    \"\"\"Test integration between config paths and logging configuration.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up logging test environment.\"\"\"\n        # Clear any existing handlers\n        logger = logging.getLogger(\"dreamweaver_client\")\n        for handler in logger.handlers[:]:\n            logger.removeHandler(handler)\n    def teardown_method(self):\n        \"\"\"Clean up logging test environment.\"\"\"",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestConfigEdgeCases",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestConfigEdgeCases:\n    \"\"\"Test edge cases and error conditions.\"\"\"\n    def test_config_with_unicode_paths(self):\n        \"\"\"Test configuration with Unicode characters in paths.\"\"\"\n        unicode_path = os.path.join(tempfile.gettempdir(), \"тест_客户端_🏠\")\n        with patch.dict(os.environ, {\"DREAMWEAVER_CLIENT_DATA_PATH\": unicode_path}):\n            try:\n                import importlib\n                importlib.reload(config)\n                # Should handle Unicode paths gracefully",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestConfigSecurity",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestConfigSecurity:\n    \"\"\"Test security-related aspects of configuration.\"\"\"\n    def test_config_no_sensitive_data_in_logs(self):\n        \"\"\"Test that configuration doesn't log sensitive information.\"\"\"\n        # Capture log output during module reload\n        import io\n        import sys\n        log_capture = io.StringIO()\n        # Redirect logging during config import\n        with patch(\"sys.stderr\", log_capture):",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestConfigPerformance",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "class TestConfigPerformance:\n    \"\"\"Test performance aspects of configuration operations.\"\"\"\n    def test_directory_creation_performance(self):\n        \"\"\"Test that directory creation is reasonably fast.\"\"\"\n        import time\n        temp_base = tempfile.mkdtemp()\n        try:\n            start_time = time.time()\n            # Create multiple directory structures\n            for i in range(10):",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_environment_variable_mapping",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "def test_environment_variable_mapping(env_var, config_attr):\n    \"\"\"Test that environment variables properly map to config attributes.\"\"\"\n    test_path = f\"/test/path/for/{env_var.lower()}\"\n    with patch.dict(os.environ, {env_var: test_path}):\n        import importlib\n        importlib.reload(config)\n        assert hasattr(config, config_attr)\n        assert getattr(config, config_attr) == test_path\n@pytest.mark.parametrize(\n    \"log_level\",",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_logging_levels",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "def test_logging_levels(log_level):\n    \"\"\"Test logging setup with different log levels.\"\"\"\n    setup_client_logging(log_level)\n    logger = get_logger()\n    assert logger.level == log_level\n@pytest.mark.parametrize(\n    \"directory_attr\",\n    [\n        \"CLIENT_DATA_PATH\",\n        \"CLIENT_MODELS_PATH\",",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "test_all_directories_created",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_config",
        "description": "CharacterClient.tests.test_config",
        "peekOfCode": "def test_all_directories_created(directory_attr):\n    \"\"\"Test that all configured directories are created.\"\"\"\n    if hasattr(config, directory_attr):\n        directory_path = getattr(config, directory_attr)\n        assert os.path.exists(directory_path)\n        assert os.path.isdir(directory_path)\nclass TestConfigPerformance:\n    \"\"\"Test performance aspects of configuration operations.\"\"\"\n    def test_directory_creation_performance(self):\n        \"\"\"Test that directory creation is reasonably fast.\"\"\"",
        "detail": "CharacterClient.tests.test_config",
        "documentation": {}
    },
    {
        "label": "TestConfigLoggingIntegration",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config_integration",
        "description": "CharacterClient.tests.test_config_integration",
        "peekOfCode": "class TestConfigLoggingIntegration:\n    \"\"\"Test integration between config and logging modules.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n        self.original_env = os.environ.copy()\n    def teardown_method(self):\n        \"\"\"Clean up test environment.\"\"\"\n        if os.path.exists(self.temp_dir):\n            shutil.rmtree(self.temp_dir)",
        "detail": "CharacterClient.tests.test_config_integration",
        "documentation": {}
    },
    {
        "label": "TestConfigEnvironmentPrecedence",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_config_integration",
        "description": "CharacterClient.tests.test_config_integration",
        "peekOfCode": "class TestConfigEnvironmentPrecedence:\n    \"\"\"Test environment variable precedence and inheritance.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n        self.original_env = os.environ.copy()\n    def teardown_method(self):\n        \"\"\"Clean up test environment.\"\"\"\n        if os.path.exists(self.temp_dir):\n            shutil.rmtree(self.temp_dir)",
        "detail": "CharacterClient.tests.test_config_integration",
        "documentation": {}
    },
    {
        "label": "TestLLMEngineInitialization",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "class TestLLMEngineInitialization:\n    # Tests from previous step - confirmed to be fine\n    def test_init_paths_and_defaults(self, llm_engine_no_init_client): # Use renamed fixture\n        engine = llm_engine_no_init_client\n        assert engine.Actor_id == \"test_actor\"\n        # ... (rest of assertions)\n    @patch(\"CharacterClient.src.llm_engine.os.makedirs\")\n    def test_init_creates_directories(self, mock_makedirs, mock_dependencies_llm_client): # Use renamed fixture\n        with patch.object(LLMEngine, \"_load_model_and_tokenizer\", MagicMock()):\n            LLMEngine(model_name=\"another_model\", Actor_id=\"another_actor\")",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "TestLLMEngineGenerate",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "class TestLLMEngineGenerate:\n    # Tests from previous step - confirmed to be fine\n    async def test_generate_success(self, llm_engine_no_init_client): # Use renamed fixture\n        engine = llm_engine_no_init_client\n        # ... (rest of test)\n# --- Tests for Fine-Tuning ---\n@pytest.mark.asyncio\nclass TestLLMEngineFineTuneAsync:\n    @patch(\"CharacterClient.src.llm_engine.os.makedirs\")\n    @patch(\"CharacterClient.src.llm_engine.os.listdir\")",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "TestLLMEngineFineTuneAsync",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "class TestLLMEngineFineTuneAsync:\n    @patch(\"CharacterClient.src.llm_engine.os.makedirs\")\n    @patch(\"CharacterClient.src.llm_engine.os.listdir\")\n    @patch(\"CharacterClient.src.llm_engine.json.dump\")\n    @patch(\"CharacterClient.src.llm_engine.json.load\")\n    @patch(\"builtins.open\", new_callable=mock_open)\n    async def test_fine_tune_async_full_flow(\n        self, mock_file_open, mock_json_load, mock_json_dump, mock_listdir, mock_os_makedirs,\n        llm_engine_no_init_client # Use client-specific fixture\n    ):",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "reset_global_mocks_llm_client",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "def reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()\n    if hasattr(MockPeftModel, 'save_pretrained'): # Ensure save_pretrained is a MagicMock if PeftModel is one\n        MockPeftModel.save_pretrained.reset_mock()\n    MockGetPeftModel.reset_mock()\n    MockLoraConfig.reset_mock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "mock_dependencies_llm_client",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "def mock_dependencies_llm_client(monkeypatch): # Renamed\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.AutoModelForCausalLM\", MockAutoModelForCausalLM)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.AutoTokenizer\", MockAutoTokenizer)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.BitsAndBytesConfig\", MockBitsAndBytesConfig)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.prepare_model_for_kbit_training\", MockPrepareModelForKbitTraining)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.PeftModel\", MockPeftModel)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.LoraConfig\", MockLoraConfig)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.get_peft_model\", MockGetPeftModel)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.torch\", MockTorch)\n    monkeypatch.setattr(\"CharacterClient.src.llm_engine.Dataset\", MockDataset)",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "llm_engine_no_init_client",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "def llm_engine_no_init_client(mock_dependencies_llm_client): # Renamed\n    with patch.object(LLMEngine, \"_load_model_and_tokenizer\", MagicMock()):\n        engine = LLMEngine(model_name=\"test_model\", Actor_id=\"test_actor\")\n        engine.is_initialized = False\n    return engine\n# --- Test Classes ---\nclass TestLLMEngineInitialization:\n    # Tests from previous step - confirmed to be fine\n    def test_init_paths_and_defaults(self, llm_engine_no_init_client): # Use renamed fixture\n        engine = llm_engine_no_init_client",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockPeftModel",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockPeftModel = MagicMock()\nMockAutoModelForCausalLM = MagicMock()\nMockAutoTokenizer = MagicMock()\nMockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockAutoModelForCausalLM",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockAutoModelForCausalLM = MagicMock()\nMockAutoTokenizer = MagicMock()\nMockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockAutoTokenizer",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockAutoTokenizer = MagicMock()\nMockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockBitsAndBytesConfig",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockPrepareModelForKbitTraining",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockLoraConfig",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockGetPeftModel",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockDataset",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockTrainer",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockTrainingArguments",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockTorch",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()\n    if hasattr(MockPeftModel, 'save_pretrained'): # Ensure save_pretrained is a MagicMock if PeftModel is one",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockDataCollatorForLanguageModeling",
        "kind": 5,
        "importPath": "CharacterClient.tests.test_llm_engine",
        "description": "CharacterClient.tests.test_llm_engine",
        "peekOfCode": "MockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_client(): # Renamed to be specific\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()\n    if hasattr(MockPeftModel, 'save_pretrained'): # Ensure save_pretrained is a MagicMock if PeftModel is one\n        MockPeftModel.save_pretrained.reset_mock()",
        "detail": "CharacterClient.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "TestLoggingConfiguration",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_logging_config",
        "description": "CharacterClient.tests.test_logging_config",
        "peekOfCode": "class TestLoggingConfiguration:\n    \"\"\"Test logging configuration functionality.\"\"\"\n    def setup_method(self):\n        \"\"\"Clear logging configuration before each test.\"\"\"\n        # Remove all handlers from the logger\n        logger = logging.getLogger(LOGGER_NAME)\n        for handler in logger.handlers[:]:\n            logger.removeHandler(handler)\n        logger.setLevel(logging.NOTSET)\n    def teardown_method(self):",
        "detail": "CharacterClient.tests.test_logging_config",
        "documentation": {}
    },
    {
        "label": "TestLoggingIntegration",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_logging_config",
        "description": "CharacterClient.tests.test_logging_config",
        "peekOfCode": "class TestLoggingIntegration:\n    \"\"\"Test integration between logging and other components.\"\"\"\n    def test_main_execution_logging(self):\n        \"\"\"Test logging when module is executed as main.\"\"\"\n        # This would test the if __name__ == \"__main__\" block\n        # We can verify the components work together\n        setup_client_logging(logging.DEBUG)\n        logger = get_logger()\n        # Test all log levels\n        logger.debug(\"Debug message\")",
        "detail": "CharacterClient.tests.test_logging_config",
        "documentation": {}
    },
    {
        "label": "TestTTSManagerInitialization",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_tts_manager",
        "description": "CharacterClient.tests.test_tts_manager",
        "peekOfCode": "class TestTTSManagerInitialization:\n    def test_init_gtts_service_success(self, tts_manager_gtts_success):\n        manager, mock_gtts_lib, _ = tts_manager_gtts_success\n        assert manager.service_name == \"gtts\"\n        assert manager.language == \"en\"\n        assert manager.is_initialized\n        assert manager.tts_instance == manager._gtts_synthesize_blocking\n        mock_gtts_lib.gTTS.assert_not_called() # Actual gTTS object is not created, only method stored\n    def test_init_gtts_service_failure_lib_missing(self, monkeypatch):\n        monkeypatch.setattr(\"CharacterClient.src.tts_manager.gtts\", None)",
        "detail": "CharacterClient.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "TestTTSManagerSynthesizeAsync",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_tts_manager",
        "description": "CharacterClient.tests.test_tts_manager",
        "peekOfCode": "class TestTTSManagerSynthesizeAsync:\n    @patch(\"CharacterClient.src.tts_manager.os.makedirs\")\n    @patch(\"CharacterClient.src.tts_manager.os.path.exists\")\n    @patch(\"CharacterClient.src.tts_manager.os.path.getsize\")\n    @patch(\"CharacterClient.src.tts_manager.asyncio.to_thread\")\n    async def test_synthesize_gtts_success(self, mock_to_thread, mock_getsize, mock_exists, mock_makedirs, tts_manager_gtts_success):\n        manager, _, _ = tts_manager_gtts_success\n        mock_exists.return_value = True\n        mock_getsize.return_value = 100 # Non-empty file\n        test_text = \"Hello gTTS\"",
        "detail": "CharacterClient.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "TestTTSManagerStaticMethods",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_tts_manager",
        "description": "CharacterClient.tests.test_tts_manager",
        "peekOfCode": "class TestTTSManagerStaticMethods:\n    @patch(\"CharacterClient.src.tts_manager.gtts\", MagicMock())\n    @patch(\"CharacterClient.src.tts_manager.CoquiTTS\", MagicMock())\n    def test_list_services_both_available(self):\n        services = TTSManager.list_services()\n        assert \"gtts\" in services\n        assert \"xttsv2\" in services\n    @patch(\"CharacterClient.src.tts_manager.gtts\", None)\n    @patch(\"CharacterClient.src.tts_manager.CoquiTTS\", MagicMock())\n    def test_list_services_only_xttsv2_available(self):",
        "detail": "CharacterClient.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "TestTTSManagerPrivateHelpers",
        "kind": 6,
        "importPath": "CharacterClient.tests.test_tts_manager",
        "description": "CharacterClient.tests.test_tts_manager",
        "peekOfCode": "class TestTTSManagerPrivateHelpers:\n    @patch(\"CharacterClient.src.tts_manager.os.makedirs\")\n    def test_get_or_download_model_blocking(self, mock_makedirs, monkeypatch):\n        # Need a TTSManager instance to call this method\n        monkeypatch.setattr(\"CharacterClient.src.tts_manager.gtts\", MagicMock()) # Mock gtts for init\n        manager = TTSManager(tts_service_name=\"gtts\") # Service doesn't matter much for this helper test\n        # Test for xttsv2\n        result_xtts = manager._get_or_download_model_blocking(\"xttsv2\", \"test_xtts_model\")\n        assert result_xtts == \"test_xtts_model\"\n        mock_makedirs.assert_any_call(os.path.join(CLIENT_TTS_MODELS_PATH, \"xttsv2\"), exist_ok=True)",
        "detail": "CharacterClient.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "tts_manager_gtts_success",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_tts_manager",
        "description": "CharacterClient.tests.test_tts_manager",
        "peekOfCode": "def tts_manager_gtts_success(monkeypatch):\n    \"\"\"Fixture for TTSManager with gTTS mocked for success.\"\"\"\n    mock_gtts_lib = MagicMock()\n    monkeypatch.setattr(\"CharacterClient.src.tts_manager.gtts\", mock_gtts_lib)\n    # Mock os.makedirs called during __init__ for CLIENT_TTS_MODELS_PATH/tts_models\n    with patch(\"os.makedirs\") as mock_os_makedirs:\n        manager = TTSManager(tts_service_name=\"gtts\", language=\"en\")\n    return manager, mock_gtts_lib, mock_os_makedirs\n@pytest.fixture\ndef tts_manager_xttsv2_success(monkeypatch):",
        "detail": "CharacterClient.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "tts_manager_xttsv2_success",
        "kind": 2,
        "importPath": "CharacterClient.tests.test_tts_manager",
        "description": "CharacterClient.tests.test_tts_manager",
        "peekOfCode": "def tts_manager_xttsv2_success(monkeypatch):\n    \"\"\"Fixture for TTSManager with CoquiTTS mocked for success.\"\"\"\n    mock_coqui_tts_lib = MagicMock()\n    mock_coqui_tts_instance = MagicMock()\n    mock_coqui_tts_lib.return_value = mock_coqui_tts_instance # Mock CoquiTTS() constructor call\n    monkeypatch.setattr(\"CharacterClient.src.tts_manager.CoquiTTS\", mock_coqui_tts_lib)\n    mock_torch = MagicMock()\n    mock_torch.cuda.is_available.return_value = False # Assume CPU for simplicity\n    monkeypatch.setattr(\"CharacterClient.src.tts_manager.torch\", mock_torch)\n    # Mock os.makedirs called during __init__",
        "detail": "CharacterClient.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "CharacterClient.main",
        "description": "CharacterClient.main",
        "peekOfCode": "def main():\n    \"\"\"\n    Loads environment variables from .env, parses command-line arguments,\n    initializes the DreamWeaver Character Client, and starts the FastAPI server.\n    Configuration is resolved in the following order of precedence:\n    1. Command-line arguments.\n    2. Environment variables (which can be loaded from a .env file).\n    3. Default values specified in argparse.\n    This function validates required parameters (especially the token),\n    initializes the character client instance, starts a heartbeat background task",
        "detail": "CharacterClient.main",
        "documentation": {}
    },
    {
        "label": "walk_dir",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.find-corrupt-whisper-files",
        "description": "SERVER..venv.Scripts.find-corrupt-whisper-files",
        "peekOfCode": "def walk_dir(base_dir, delete_corrupt=False, verbose=False):\n    for dirpath, dirnames, filenames in os.walk(base_dir):\n        if verbose:\n            print(\"Scanning %s…\" % dirpath)\n        whisper_files = (os.path.join(dirpath, i) for i in filenames if i.endswith('.wsp'))\n        for f in whisper_files:\n            try:\n                info = whisper.info(f)\n            except whisper.CorruptWhisperFile:\n                if delete_corrupt:",
        "detail": "SERVER..venv.Scripts.find-corrupt-whisper-files",
        "documentation": {}
    },
    {
        "label": "aggregationMethods",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.rrd2whisper",
        "description": "SERVER..venv.Scripts.rrd2whisper",
        "peekOfCode": "aggregationMethods = list(whisper.aggregationMethods)\n# RRD doesn't have a 'sum' or 'total' type\naggregationMethods.remove('sum')\n# RRD doesn't have a 'absmax' type\naggregationMethods.remove('absmax')\n# RRD doesn't have a 'absmin' type\naggregationMethods.remove('absmin')\noption_parser = optparse.OptionParser(usage='''%prog rrd_path''')\noption_parser.add_option(\n    '--xFilesFactor',",
        "detail": "SERVER..venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.rrd2whisper",
        "description": "SERVER..venv.Scripts.rrd2whisper",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog rrd_path''')\noption_parser.add_option(\n    '--xFilesFactor',\n    help=\"The xFilesFactor to use in the output file. \" +\n    \"Defaults to the input RRD's xFilesFactor\",\n    default=None,\n    type='float')\noption_parser.add_option(\n    '--aggregationMethod',\n    help=\"The consolidation function to fetch from on input and \" +",
        "detail": "SERVER..venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "rrd_path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.rrd2whisper",
        "description": "SERVER..venv.Scripts.rrd2whisper",
        "peekOfCode": "rrd_path = args[0]\ntry:\n  rrd_info = rrdtool.info(rrd_path)\nexcept rrdtool.error as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\nseconds_per_pdp = rrd_info['step']\n# Reconcile old vs new python-rrdtool APIs (yuck)\n# leave consistent 'rras' and 'datasources' lists\nif 'rra' in rrd_info:\n  rras = rrd_info['rra']",
        "detail": "SERVER..venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "seconds_per_pdp",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.rrd2whisper",
        "description": "SERVER..venv.Scripts.rrd2whisper",
        "peekOfCode": "seconds_per_pdp = rrd_info['step']\n# Reconcile old vs new python-rrdtool APIs (yuck)\n# leave consistent 'rras' and 'datasources' lists\nif 'rra' in rrd_info:\n  rras = rrd_info['rra']\nelse:\n  rra_indices = []\n  for key in rrd_info:\n    if key.startswith('rra['):\n      index = int(key.split('[')[1].split(']')[0])",
        "detail": "SERVER..venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "relevant_rras",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.rrd2whisper",
        "description": "SERVER..venv.Scripts.rrd2whisper",
        "peekOfCode": "relevant_rras = []\nfor rra in rras:\n  if rra['cf'] == options.aggregationMethod.upper():\n    relevant_rras.append(rra)\nif not relevant_rras:\n  err = \"[ERROR] Unable to find any RRAs with consolidation function: %s\" % \\\n        options.aggregationMethod.upper()\n  raise SystemExit(err)\narchives = []\nxFilesFactor = options.xFilesFactor",
        "detail": "SERVER..venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "archives",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.rrd2whisper",
        "description": "SERVER..venv.Scripts.rrd2whisper",
        "peekOfCode": "archives = []\nxFilesFactor = options.xFilesFactor\nfor rra in relevant_rras:\n  precision = rra['pdp_per_row'] * seconds_per_pdp\n  points = rra['rows']\n  if not xFilesFactor:\n    xFilesFactor = rra['xff']\n  archives.append((precision, points))\nfor datasource in datasources:\n  now = int(time.time())",
        "detail": "SERVER..venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "xFilesFactor",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.rrd2whisper",
        "description": "SERVER..venv.Scripts.rrd2whisper",
        "peekOfCode": "xFilesFactor = options.xFilesFactor\nfor rra in relevant_rras:\n  precision = rra['pdp_per_row'] * seconds_per_pdp\n  points = rra['rows']\n  if not xFilesFactor:\n    xFilesFactor = rra['xff']\n  archives.append((precision, points))\nfor datasource in datasources:\n  now = int(time.time())\n  suffix = '_%s' % datasource if len(datasources) > 1 else ''",
        "detail": "SERVER..venv.Scripts.rrd2whisper",
        "documentation": {}
    },
    {
        "label": "config_schemas",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "def config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:\n            if item[0] == '^':\n                item = item[1:]\n            SCHEMA_LIST[item] = {'retentions': schema[1]['retentions'],",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "fix_metric",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "def fix_metric(metric):\n    if not SCHEMA_LIST:\n        LOG.error(\"Didn't initialize schemas!\")\n        return []\n    if DEBUG:\n        LOG.info(\"Testing %s for modification\" % metric)\n    devnull = open(os.devnull, 'w')\n    command_string = list(BASE_COMMAND) + [metric]\n    retention = DEFAULT_SCHEMA['retentions']\n    matching = metric[len(ROOT_PATH):].replace('/', '.')",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "search_and_fix",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "def search_and_fix(subdir):\n    if not SCHEMA_LIST:\n        LOG.error(\"Didn't initialize schemas!\")\n        return\n    fpath = os.path.join(ROOT_PATH, subdir)\n    pool = Pool(cpu_count())\n    LOG.info('Creating new storage schemas for metrics under %s ...' % fpath)\n    results = pool.map(fix_metric, _find_metrics(fpath), 100)\n    pool.close()\n    pool.join()",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "cli_opts",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "def cli_opts():\n    parser = argparse.ArgumentParser(\"Correct storage settings on multiple whisper files\")\n    parser.add_argument('--cfg', action='store', dest='cfg',\n                        help='The storage-schemas.conf file path',\n                        required=True)\n    parser.add_argument('--path', action='store', dest='path',\n                        help='The root path to find metrics in',\n                        required=True)\n    parser.add_argument('--debug', action='store_true', dest='debug',\n                        help='Display debug information',",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "LOG",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "LOG = logging.getLogger()\nLOG.setLevel(logging.INFO)\nSCHEMA_LIST = {}\n# The very basic default retentions\nDEFAULT_SCHEMA = {'match': re.compile('.*'),\n                  'retentions': '1m:7d'}\nDEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "SCHEMA_LIST",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "SCHEMA_LIST = {}\n# The very basic default retentions\nDEFAULT_SCHEMA = {'match': re.compile('.*'),\n                  'retentions': '1m:7d'}\nDEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "DEFAULT_SCHEMA = {'match': re.compile('.*'),\n                  'retentions': '1m:7d'}\nDEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "DEBUG = False\nDRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "DRY_RUN",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "DRY_RUN = False\nROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:\n            if item[0] == '^':",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "ROOT_PATH",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.update-storage-times",
        "description": "SERVER..venv.Scripts.update-storage-times",
        "peekOfCode": "ROOT_PATH = \"\"\ndef config_schemas(cfg):\n    schema_conf = ConfigObj(cfg)\n    for schema in schema_conf.items():\n        item = schema[1]['pattern']\n        if item == '.*':\n            DEFAULT_SCHEMA['retentions'] = schema[1]['retentions']\n        else:\n            if item[0] == '^':\n                item = item[1:]",
        "detail": "SERVER..venv.Scripts.update-storage-times",
        "documentation": {}
    },
    {
        "label": "processMetric",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "def processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary\n        Parameters:\n            fullPath    - full path to the metric whisper file\n            schemas     - carbon storage schemas loaded from config\n            agg_schemas - carbon storage aggregation schemas load from confg\n    \"\"\"\n    schema_config_args = ''\n    schema_file_args = ''",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "getMetricFromPath",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "def getMetricFromPath(filePath):\n    \"\"\"\n        this method takes the full file path of a whisper file an converts it\n        to a gaphite metric name\n        Parameters:\n            filePath - full file path to a whisper file\n        Returns a string representing the metric name\n    \"\"\"\n    # sanitize directory since we may get a trailing slash or not, and if we\n    # don't it creates a leading '.'",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "confirm",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "def confirm(question, error_response='Valid options : yes or no'):\n    \"\"\"\n         ask the user if they would like to perform the action\n         Parameters:\n             question       - the question you would like to ask the user to confirm.\n             error_response - the message to display if an invalid option is given.\n    \"\"\"\n    while True:\n        answer = input(question).lower()\n        if answer in ('y', 'yes'):",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "whisperResizeExecutable",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "whisperResizeExecutable = find_executable(\"whisper-resize.py\")\nif whisperResizeExecutable is None:\n    whisperResizeExecutable = find_executable(\"whisper-resize\")\n    if whisperResizeExecutable is None:\n        # Probably will fail later, set it nevertheless\n        whisperResizeExecutable = \"whisper-resize.py\"\noption_parser = OptionParser(\n    usage='''%prog storagePath configPath\nstoragePath   the Path to the directory containing whisper files (CAN NOT BE A\n              SUBDIR, use --subdir for that)",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "option_parser = OptionParser(\n    usage='''%prog storagePath configPath\nstoragePath   the Path to the directory containing whisper files (CAN NOT BE A\n              SUBDIR, use --subdir for that)\nconfigPath    the path to your carbon config files\n''', version=\"%prog 0.1\")\noption_parser.add_option(\n    '--doit', default=False, action='store_true',\n    help=\"This is not a drill, lets do it\")\noption_parser.add_option(",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "storagePath",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "storagePath = args[0]\nconfigPath = args[1]\n# check to see if we are processing a subfolder\n# we need to have a separate config option for this since\n# otherwise the metric test thinks the metric is at the root\n# of the storage path and can match schemas incorrectly\nif options.subdir is None:\n    processPath = args[0]\nelse:\n    processPath = options.subdir",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "configPath",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "configPath = args[1]\n# check to see if we are processing a subfolder\n# we need to have a separate config option for this since\n# otherwise the metric test thinks the metric is at the root\n# of the storage path and can match schemas incorrectly\nif options.subdir is None:\n    processPath = args[0]\nelse:\n    processPath = options.subdir\n# Injecting the Whisper Lib Path if needed",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "settings.CONF_DIR",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "settings.CONF_DIR = configPath\nsettings.LOCAL_DATA_DIR = storagePath\n# import these once we have the settings figured out\nfrom carbon.storage import loadStorageSchemas, loadAggregationSchemas\n# Load the Defined Schemas from our config files\nschemas = loadStorageSchemas()\nagg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "settings.LOCAL_DATA_DIR",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "settings.LOCAL_DATA_DIR = storagePath\n# import these once we have the settings figured out\nfrom carbon.storage import loadStorageSchemas, loadAggregationSchemas\n# Load the Defined Schemas from our config files\nschemas = loadStorageSchemas()\nagg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "schemas",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "schemas = loadStorageSchemas()\nagg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary\n        Parameters:\n            fullPath    - full path to the metric whisper file\n            schemas     - carbon storage schemas loaded from config\n            agg_schemas - carbon storage aggregation schemas load from confg",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "agg_schemas",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-resize",
        "description": "SERVER..venv.Scripts.whisper-auto-resize",
        "peekOfCode": "agg_schemas = loadAggregationSchemas()\n# check to see if a metric needs to be resized based on the current config\ndef processMetric(fullPath, schemas, agg_schemas):\n    \"\"\"\n        method to process a given metric, and resize it if necessary\n        Parameters:\n            fullPath    - full path to the metric whisper file\n            schemas     - carbon storage schemas loaded from config\n            agg_schemas - carbon storage aggregation schemas load from confg\n    \"\"\"",
        "detail": "SERVER..venv.Scripts.whisper-auto-resize",
        "documentation": {}
    },
    {
        "label": "update_value",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "def update_value(timestamp, value):\n  if value is None:\n    return value\n  return value * 1024 * 1024 * 1024\n# Ignore SIGPIPE\nsignal.signal(signal.SIGPIPE, signal.SIG_DFL)\nnow = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "now = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "yesterday",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "yesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(\n  '--pretty', default=False, action='store_true',",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "path = args[0]\nfrom_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values_old) = data\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "from_time",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "from_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values_old) = data\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\n(start, end, step) = timeInfo",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "until_time",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "until_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values_old) = data\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\n(start, end, step) = timeInfo\nt = start",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-auto-update",
        "description": "SERVER..venv.Scripts.whisper-auto-update",
        "peekOfCode": "t = start\nfor value_old in values_old:\n  value_str_old = str(value_old)\n  value_new = update_value(t, value_old)\n  value_str_new = str(value_new)\n  if options.pretty:\n    timestr = time.ctime(t)\n  else:\n    timestr = str(t)\n  print(\"%s\\t%s -> %s\" % (timestr, value_str_old, value_str_new))",
        "detail": "SERVER..venv.Scripts.whisper-auto-update",
        "documentation": {}
    },
    {
        "label": "byte_format",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-create",
        "description": "SERVER..venv.Scripts.whisper-create",
        "peekOfCode": "def byte_format(num):\n  for x in ['bytes', 'KB', 'MB']:\n    if num < 1024.0:\n      return \"%.3f%s\" % (num, x)\n    num /= 1024.0\n  return \"%.3f%s\" % (num, 'GB')\n# Ignore SIGPIPE\ntry:\n  signal.signal(signal.SIGPIPE, signal.SIG_DFL)\nexcept AttributeError:",
        "detail": "SERVER..venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-create",
        "description": "SERVER..venv.Scripts.whisper-create",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='''%prog path timePerPoint:timeToStore [timePerPoint:timeToStore]*\n%prog --estimate timePerPoint:timeToStore [timePerPoint:timeToStore]*\ntimePerPoint and timeToStore specify lengths of time, for example:\n60:1440      60 seconds per datapoint, 1440 datapoints = 1 day of retention\n15m:8        15 minutes per datapoint, 8 datapoints = 2 hours of retention\n1h:7d        1 hour per datapoint, 7 days of retention\n12h:2y       12 hours per datapoint, 2 years of retention\n''')\noption_parser.add_option('--xFilesFactor', default=0.5, type='float')",
        "detail": "SERVER..venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-create",
        "description": "SERVER..venv.Scripts.whisper-create",
        "peekOfCode": "path = args[0]\narchives = [whisper.parseRetentionDef(retentionDef)\n            for retentionDef in args[1:]]\nif os.path.exists(path) and options.overwrite:\n  print('Overwriting existing file: %s' % path)\n  os.unlink(path)\ntry:\n  whisper.create(path, archives, xFilesFactor=options.xFilesFactor,\n                 aggregationMethod=options.aggregationMethod, sparse=options.sparse,\n                 useFallocate=options.fallocate)",
        "detail": "SERVER..venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "archives",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-create",
        "description": "SERVER..venv.Scripts.whisper-create",
        "peekOfCode": "archives = [whisper.parseRetentionDef(retentionDef)\n            for retentionDef in args[1:]]\nif os.path.exists(path) and options.overwrite:\n  print('Overwriting existing file: %s' % path)\n  os.unlink(path)\ntry:\n  whisper.create(path, archives, xFilesFactor=options.xFilesFactor,\n                 aggregationMethod=options.aggregationMethod, sparse=options.sparse,\n                 useFallocate=options.fallocate)\nexcept whisper.WhisperException as exc:",
        "detail": "SERVER..venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-create",
        "description": "SERVER..venv.Scripts.whisper-create",
        "peekOfCode": "size = os.stat(path).st_size\nprint('Created: %s (%d bytes)' % (path, size))",
        "detail": "SERVER..venv.Scripts.whisper-create",
        "documentation": {}
    },
    {
        "label": "print_diffs",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-diff",
        "description": "SERVER..venv.Scripts.whisper-diff",
        "peekOfCode": "def print_diffs(diffs, pretty=True, headers=True):\n  if pretty:\n    h = \"%7s %11s %13s %13s\\n\"\n    f = \"%7s %11d %13s %13s\\n\"\n  else:\n    h = \"%s %s %s %s\\n\"\n    f = \"%s %d %s %s\\n\"\n  if headers:\n    sys.stdout.write(h % ('archive', 'timestamp', 'value_a', 'value_b'))\n  for archive, points, total in diffs:",
        "detail": "SERVER..venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "print_summary",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-diff",
        "description": "SERVER..venv.Scripts.whisper-diff",
        "peekOfCode": "def print_summary(diffs, pretty=True, headers=True):\n  if pretty:\n    f = \"%7s %9s %9s\\n\"\n  else:\n    f = \"%s %s %s\\n\"\n  if headers:\n    sys.stdout.write(f % ('archive', 'total', 'differing'))\n  for archive, points, total in diffs:\n    sys.stdout.write(f % (archive, total, points.__len__()))\ndef print_summary_json(diffs, path_a, path_b):",
        "detail": "SERVER..venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "print_summary_json",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-diff",
        "description": "SERVER..venv.Scripts.whisper-diff",
        "peekOfCode": "def print_summary_json(diffs, path_a, path_b):\n  print(json.dumps({'path_a': path_a,\n                    'path_b': path_b,\n                    'archives': [{'archive': archive,\n                                  'total': total,\n                                  'points': points.__len__()}\n                                 for archive, points, total in diffs]},\n                   sort_keys=True, indent=2, separators=(',', ' : ')))\ndef print_diffs_json(diffs, path_a, path_b):\n  print(json.dumps({'path_a': path_a,",
        "detail": "SERVER..venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "print_diffs_json",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-diff",
        "description": "SERVER..venv.Scripts.whisper-diff",
        "peekOfCode": "def print_diffs_json(diffs, path_a, path_b):\n  print(json.dumps({'path_a': path_a,\n                    'path_b': path_b,\n                    'archives': [{'archive': archive,\n                                  'total': total,\n                                  'points': points.__len__(),\n                                  'datapoint': [{\n                                      'timestamp': p[0],\n                                      'value_a': p[1],\n                                      'value_b': p[2]",
        "detail": "SERVER..venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-diff",
        "description": "SERVER..venv.Scripts.whisper-diff",
        "peekOfCode": "def main():\n  archive_diffs = whisper.diff(path_a, path_b, ignore_empty=options.ignore_empty,\n                               until_time=until_time)\n  if options.summary:\n    if options.json:\n      print_summary_json(archive_diffs, path_a, path_b)\n    else:\n      print_summary(archive_diffs, pretty=(not options.columns),\n                    headers=(not options.no_headers))\n  else:",
        "detail": "SERVER..venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-diff",
        "description": "SERVER..venv.Scripts.whisper-diff",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path_a path_b''')\noption_parser.add_option('--summary', default=False, action='store_true',\n                         help=\"show summary of differences\")\noption_parser.add_option('--ignore-empty', default=False, action='store_true',\n                         help=\"skip comparison if either value is undefined\")\noption_parser.add_option('--columns', default=False, action='store_true',\n                         help=\"print output in simple columns\")\noption_parser.add_option('--no-headers', default=False, action='store_true',\n                         help=\"do not print column headers\")\noption_parser.add_option('--until', default=None, type='int',",
        "detail": "SERVER..venv.Scripts.whisper-diff",
        "documentation": {}
    },
    {
        "label": "mmap_file",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "def mmap_file(filename):\n  fd = os.open(filename, os.O_RDONLY)\n  map = mmap.mmap(fd, os.fstat(fd).st_size, prot=mmap.PROT_READ)\n  os.close(fd)\n  return map\ndef read_header(map):\n  try:\n    (aggregationType, maxRetention, xFilesFactor, archiveCount) \\\n      = struct.unpack(whisper.metadataFormat, map[:whisper.metadataSize])\n  except (struct.error, ValueError, TypeError):",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "read_header",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "def read_header(map):\n  try:\n    (aggregationType, maxRetention, xFilesFactor, archiveCount) \\\n      = struct.unpack(whisper.metadataFormat, map[:whisper.metadataSize])\n  except (struct.error, ValueError, TypeError):\n    raise whisper.CorruptWhisperFile(\"Unable to unpack header\")\n  archives = []\n  archiveOffset = whisper.metadataSize\n  for i in xrange(archiveCount):\n    try:",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "dump_header",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "def dump_header(header):\n  print('Meta data:')\n  print('  aggregation method: %s' % header['aggregationMethod'])\n  print('  max retention: %d' % header['maxRetention'])\n  print('  xFilesFactor: %g' % header['xFilesFactor'])\n  print(\"\")\n  dump_archive_headers(header['archives'])\ndef dump_archive_headers(archives):\n  for i, archive in enumerate(archives):\n    print('Archive %d info:' % i)",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "dump_archive_headers",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "def dump_archive_headers(archives):\n  for i, archive in enumerate(archives):\n    print('Archive %d info:' % i)\n    print('  offset: %d' % archive['offset'])\n    print('  seconds per point: %d' % archive['secondsPerPoint'])\n    print('  points: %d' % archive['points'])\n    print('  retention: %d' % archive['retention'])\n    print('  size: %d' % archive['size'])\n    print(\"\")\ndef dump_archives(archives, options):",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "dump_archives",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "def dump_archives(archives, options):\n  for i, archive in enumerate(archives):\n    if not options.raw:\n      print('Archive %d data:' % i)\n    offset = archive['offset']\n    for point in xrange(archive['points']):\n      (timestamp, value) = struct.unpack(\n        whisper.pointFormat,\n        map[offset:offset + whisper.pointSize]\n      )",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog path''')\noption_parser.add_option(\n  '--pretty', default=False, action='store_true',\n  help=\"Show human-readable timestamps instead of unix times\")\noption_parser.add_option(\n  '-t', '--time-format', action='store', type='string', dest='time_format',\n  help='Time format to use with --pretty; see time.strftime()')\noption_parser.add_option(\n  '-r', '--raw', default=False, action='store_true',\n  help='Dump value only in the same format for whisper-update (UTC timestamps)')",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "map",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "map = mmap_file(path)\nheader = read_header(map)\nif not options.raw:\n  dump_header(header)\ndump_archives(header['archives'], options)",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-dump",
        "description": "SERVER..venv.Scripts.whisper-dump",
        "peekOfCode": "header = read_header(map)\nif not options.raw:\n  dump_header(header)\ndump_archives(header['archives'], options)",
        "detail": "SERVER..venv.Scripts.whisper-dump",
        "documentation": {}
    },
    {
        "label": "_DROP_FUNCTIONS",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "_DROP_FUNCTIONS = {\n    'zeroes': lambda x: x != 0,\n    'nulls': lambda x: x is not None,\n    'empty': lambda x: x != 0 and x is not None\n}\n# Ignore SIGPIPE\nsignal.signal(signal.SIGPIPE, signal.SIG_DFL)\nnow = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "now = int(time.time())\nyesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "yesterday",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "yesterday = now - (60 * 60 * 24)\noption_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path''')\noption_parser.add_option(\n  '--from', default=yesterday, type='int', dest='_from',\n  help=(\"Unix epoch time of the beginning of \"\n        \"your requested interval (default: 24 hours ago)\"))\noption_parser.add_option(\n  '--until', default=now, type='int',\n  help=\"Unix epoch time of the end of your requested interval (default: now)\")\noption_parser.add_option(\n  '--json', default=False, action='store_true',",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "path = args[0]\nfrom_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values) = data\nexcept (whisper.WhisperException, IOError) as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "from_time",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "from_time = int(options._from)\nuntil_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values) = data\nexcept (whisper.WhisperException, IOError) as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\nif options.drop:",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "until_time",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "until_time = int(options.until)\ntry:\n  data = whisper.fetch(path, from_time, until_time)\n  if not data:\n    raise SystemExit('No data in selected timerange')\n  (timeInfo, values) = data\nexcept (whisper.WhisperException, IOError) as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\nif options.drop:\n  fcn = _DROP_FUNCTIONS.get(options.drop)",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-fetch",
        "description": "SERVER..venv.Scripts.whisper-fetch",
        "peekOfCode": "t = start\nfor value in values:\n  if options.pretty:\n    if options.time_format:\n      timestr = time.strftime(options.time_format, time.localtime(t))\n    else:\n      timestr = time.ctime(t)\n  else:\n    timestr = str(t)\n  if value is None:",
        "detail": "SERVER..venv.Scripts.whisper-fetch",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-fill",
        "description": "SERVER..venv.Scripts.whisper-fill",
        "peekOfCode": "def itemgetter(*items):\n    if HAS_OPERATOR:\n        return operator.itemgetter(*items)\n    else:\n        if len(items) == 1:\n            item = items[0]\n            def g(obj):\n                return obj[item]\n        else:\n            def g(obj):",
        "detail": "SERVER..venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "fill",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-fill",
        "description": "SERVER..venv.Scripts.whisper-fill",
        "peekOfCode": "def fill(src, dst, tstart, tstop):\n    # fetch range start-stop from src, taking values from the highest\n    # precision archive, thus optionally requiring multiple fetch + merges\n    srcHeader = whisper.info(src)\n    srcArchives = srcHeader['archives']\n    srcArchives.sort(key=itemgetter('retention'))\n    # find oldest point in time, stored by both files\n    srcTime = int(time.time()) - srcHeader['maxRetention']\n    if tstart < srcTime and tstop < srcTime:\n        return",
        "detail": "SERVER..venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "fill_archives",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-fill",
        "description": "SERVER..venv.Scripts.whisper-fill",
        "peekOfCode": "def fill_archives(src, dst, startFrom):\n    header = whisper.info(dst)\n    archives = header['archives']\n    archives = sorted(archives, key=lambda t: t['retention'])\n    for archive in archives:\n        fromTime = time.time() - archive['retention']\n        if fromTime >= startFrom:\n            continue\n        (timeInfo, values) = whisper.fetch(dst, fromTime, startFrom)\n        (start, end, step) = timeInfo",
        "detail": "SERVER..venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-fill",
        "description": "SERVER..venv.Scripts.whisper-fill",
        "peekOfCode": "def main():\n    option_parser = optparse.OptionParser(\n        usage='%prog [--lock] src dst',\n        description='copies data from src in dst, if missing')\n    option_parser.add_option(\n        '--lock', help='Lock whisper files',\n        default=False, action='store_true')\n    (options, args) = option_parser.parse_args()\n    if len(args) != 2:\n        option_parser.print_help()",
        "detail": "SERVER..venv.Scripts.whisper-fill",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-info",
        "description": "SERVER..venv.Scripts.whisper-info",
        "peekOfCode": "option_parser = optparse.OptionParser(usage='''%prog [options] path [field]''')\noption_parser.add_option('--json', default=False, action='store_true',\n                         help=\"Output results in JSON form\")\n(options, args) = option_parser.parse_args()\nif len(args) < 1:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\nif len(args) > 1:\n  field = args[1]",
        "detail": "SERVER..venv.Scripts.whisper-info",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-info",
        "description": "SERVER..venv.Scripts.whisper-info",
        "peekOfCode": "path = args[0]\nif len(args) > 1:\n  field = args[1]\nelse:\n  field = None\ntry:\n  info = whisper.info(path)\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))\ninfo['fileSize'] = os.stat(path).st_size",
        "detail": "SERVER..venv.Scripts.whisper-info",
        "documentation": {}
    },
    {
        "label": "info['fileSize']",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-info",
        "description": "SERVER..venv.Scripts.whisper-info",
        "peekOfCode": "info['fileSize'] = os.stat(path).st_size\nif field:\n  if field not in info:\n    print('Unknown field \"%s\". Valid fields are %s' % (field, ','.join(info)))\n    sys.exit(1)\n  print(info[field])\n  sys.exit(0)\nif options.json:\n  print(json.dumps(info, indent=2, separators=(',', ': ')))\nelse:",
        "detail": "SERVER..venv.Scripts.whisper-info",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-merge",
        "description": "SERVER..venv.Scripts.whisper-merge",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='''%prog [options] from_path to_path''')\noption_parser.add_option(\n  '--from', default=None, type='int', dest='_from',\n  help=(\"Begining of interval, unix timestamp (default: epoch)\"))\noption_parser.add_option(\n  '--until', default=None, type='int',\n  help=\"End of interval, unix timestamp (default: now)\")\n(options, args) = option_parser.parse_args()\nif len(args) < 2:",
        "detail": "SERVER..venv.Scripts.whisper-merge",
        "documentation": {}
    },
    {
        "label": "path_from",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-merge",
        "description": "SERVER..venv.Scripts.whisper-merge",
        "peekOfCode": "path_from = args[0]\npath_to = args[1]\nfor filename in (path_from, path_to):\n  if not os.path.exists(filename):\n    raise SystemExit('[ERROR] File \"%s\" does not exist!' % filename)\nwhisper.merge(path_from, path_to, options._from, options.until)",
        "detail": "SERVER..venv.Scripts.whisper-merge",
        "documentation": {}
    },
    {
        "label": "path_to",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-merge",
        "description": "SERVER..venv.Scripts.whisper-merge",
        "peekOfCode": "path_to = args[1]\nfor filename in (path_from, path_to):\n  if not os.path.exists(filename):\n    raise SystemExit('[ERROR] File \"%s\" does not exist!' % filename)\nwhisper.merge(path_from, path_to, options._from, options.until)",
        "detail": "SERVER..venv.Scripts.whisper-merge",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "now = int(time.time())\noption_parser = optparse.OptionParser(\n    usage='''%prog path timePerPoint:timeToStore [timePerPoint:timeToStore]*\ntimePerPoint and timeToStore specify lengths of time, for example:\n60:1440      60 seconds per datapoint, 1440 datapoints = 1 day of retention\n15m:8        15 minutes per datapoint, 8 datapoints = 2 hours of retention\n1h:7d        1 hour per datapoint, 7 days of retention\n12h:2y       12 hours per datapoint, 2 years of retention\n''')\noption_parser.add_option(",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='''%prog path timePerPoint:timeToStore [timePerPoint:timeToStore]*\ntimePerPoint and timeToStore specify lengths of time, for example:\n60:1440      60 seconds per datapoint, 1440 datapoints = 1 day of retention\n15m:8        15 minutes per datapoint, 8 datapoints = 2 hours of retention\n1h:7d        1 hour per datapoint, 7 days of retention\n12h:2y       12 hours per datapoint, 2 years of retention\n''')\noption_parser.add_option(\n    '--xFilesFactor', default=None,",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "path = args[0]\nif not os.path.exists(path):\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()\n  sys.exit(1)\ninfo = whisper.info(path)\nnew_archives = [whisper.parseRetentionDef(retentionDef)\n                for retentionDef in args[1:]]\nold_archives = info['archives']\n# sort by precision, lowest to highest",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "info = whisper.info(path)\nnew_archives = [whisper.parseRetentionDef(retentionDef)\n                for retentionDef in args[1:]]\nold_archives = info['archives']\n# sort by precision, lowest to highest\nold_archives.sort(key=lambda a: a['secondsPerPoint'], reverse=True)\nif options.xFilesFactor is None:\n  xff = info['xFilesFactor']\nelse:\n  xff = options.xFilesFactor",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "new_archives",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "new_archives = [whisper.parseRetentionDef(retentionDef)\n                for retentionDef in args[1:]]\nold_archives = info['archives']\n# sort by precision, lowest to highest\nold_archives.sort(key=lambda a: a['secondsPerPoint'], reverse=True)\nif options.xFilesFactor is None:\n  xff = info['xFilesFactor']\nelse:\n  xff = options.xFilesFactor\nif options.aggregationMethod is None:",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "old_archives",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "old_archives = info['archives']\n# sort by precision, lowest to highest\nold_archives.sort(key=lambda a: a['secondsPerPoint'], reverse=True)\nif options.xFilesFactor is None:\n  xff = info['xFilesFactor']\nelse:\n  xff = options.xFilesFactor\nif options.aggregationMethod is None:\n  aggregationMethod = info['aggregationMethod']\nelse:",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "size = os.stat(newfile).st_size\nprint('Created: %s (%d bytes)' % (newfile, size))\nif options.aggregate:\n  # This is where data will be interpolated (best effort)\n  print('Migrating data with aggregation...')\n  all_datapoints = []\n  for archive in sorted(old_archives, key=lambda x: x['secondsPerPoint']):\n    # Loading all datapoints into memory for fast querying\n    timeinfo, values = archive['data']\n    new_datapoints = list(zip(range(*timeinfo), values))",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "backup",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-resize",
        "description": "SERVER..venv.Scripts.whisper-resize",
        "peekOfCode": "backup = path + '.bak'\nprint('Renaming old database to: %s' % backup)\nos.rename(path, backup)\ntry:\n  print('Renaming new database to: %s' % path)\n  os.rename(tmpfile, path)\nexcept (OSError):\n  traceback.print_exc()\n  print('\\nOperation failed, restoring backup')\n  os.rename(backup, path)",
        "detail": "SERVER..venv.Scripts.whisper-resize",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "description": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "option_parser = optparse.OptionParser(\n    usage='%%prog path <%s> [xFilesFactor]' % '|'.join(whisper.aggregationMethods))\n(options, args) = option_parser.parse_args()\nif len(args) < 2:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\naggregationMethod = args[1]\nxFilesFactor = None\nif len(args) == 3:",
        "detail": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "description": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "path = args[0]\naggregationMethod = args[1]\nxFilesFactor = None\nif len(args) == 3:\n  xFilesFactor = args[2]\ntry:\n  oldAggregationMethod = whisper.setAggregationMethod(path, aggregationMethod, xFilesFactor)\nexcept IOError:\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()",
        "detail": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "aggregationMethod",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "description": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "aggregationMethod = args[1]\nxFilesFactor = None\nif len(args) == 3:\n  xFilesFactor = args[2]\ntry:\n  oldAggregationMethod = whisper.setAggregationMethod(path, aggregationMethod, xFilesFactor)\nexcept IOError:\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()\n  sys.exit(1)",
        "detail": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "xFilesFactor",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "description": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "peekOfCode": "xFilesFactor = None\nif len(args) == 3:\n  xFilesFactor = args[2]\ntry:\n  oldAggregationMethod = whisper.setAggregationMethod(path, aggregationMethod, xFilesFactor)\nexcept IOError:\n  sys.stderr.write(\"[ERROR] File '%s' does not exist!\\n\\n\" % path)\n  option_parser.print_help()\n  sys.exit(1)\nexcept whisper.WhisperException as exc:",
        "detail": "SERVER..venv.Scripts.whisper-set-aggregation-method",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "SERVER..venv.Scripts.whisper-set-xfilesfactor",
        "description": "SERVER..venv.Scripts.whisper-set-xfilesfactor",
        "peekOfCode": "def main():\n    \"\"\"Set xFilesFactor for existing whisper file\"\"\"\n    parser = argparse.ArgumentParser(\n        description='Set xFilesFactor for existing whisper file')\n    parser.add_argument('path', type=str, help='path to whisper file')\n    parser.add_argument('xff', metavar='xFilesFactor', type=float,\n                        help='new xFilesFactor, a float between 0 and 1')\n    args = parser.parse_args()\n    try:\n        old_xff = whisper.setXFilesFactor(args.path, args.xff)",
        "detail": "SERVER..venv.Scripts.whisper-set-xfilesfactor",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-update",
        "description": "SERVER..venv.Scripts.whisper-update",
        "peekOfCode": "now = int(time.time())\noption_parser = optparse.OptionParser(\n  usage='''%prog [options] path [timestamp:value]*\n  If no values are passed as arguments, they are read one-per-line from stdin.''')\n(options, args) = option_parser.parse_args()\nif not args:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\nif len(args) >= 2:",
        "detail": "SERVER..venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "option_parser",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-update",
        "description": "SERVER..venv.Scripts.whisper-update",
        "peekOfCode": "option_parser = optparse.OptionParser(\n  usage='''%prog [options] path [timestamp:value]*\n  If no values are passed as arguments, they are read one-per-line from stdin.''')\n(options, args) = option_parser.parse_args()\nif not args:\n  option_parser.print_help()\n  sys.exit(1)\npath = args[0]\nif len(args) >= 2:\n  datapoint_strings = args[1:]",
        "detail": "SERVER..venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-update",
        "description": "SERVER..venv.Scripts.whisper-update",
        "peekOfCode": "path = args[0]\nif len(args) >= 2:\n  datapoint_strings = args[1:]\nelse:\n  # no argv values, so read from stdin\n  datapoint_strings = sys.stdin\ndatapoint_strings = [point.replace('N:', '%d:' % now)\n                     for point in datapoint_strings]\ndatapoints = [tuple(point.split(':')) for point in datapoint_strings]\ntry:",
        "detail": "SERVER..venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "datapoint_strings",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-update",
        "description": "SERVER..venv.Scripts.whisper-update",
        "peekOfCode": "datapoint_strings = [point.replace('N:', '%d:' % now)\n                     for point in datapoint_strings]\ndatapoints = [tuple(point.split(':')) for point in datapoint_strings]\ntry:\n  if len(datapoints) == 1:\n    timestamp, value = datapoints[0]\n    whisper.update(path, value, timestamp)\n  else:\n    whisper.update_many(path, datapoints)\nexcept whisper.WhisperException as exc:",
        "detail": "SERVER..venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "datapoints",
        "kind": 5,
        "importPath": "SERVER..venv.Scripts.whisper-update",
        "description": "SERVER..venv.Scripts.whisper-update",
        "peekOfCode": "datapoints = [tuple(point.split(':')) for point in datapoint_strings]\ntry:\n  if len(datapoints) == 1:\n    timestamp, value = datapoints[0]\n    whisper.update(path, value, timestamp)\n  else:\n    whisper.update_many(path, datapoints)\nexcept whisper.WhisperException as exc:\n  raise SystemExit('[ERROR] %s' % str(exc))",
        "detail": "SERVER..venv.Scripts.whisper-update",
        "documentation": {}
    },
    {
        "label": "ChaosEngine",
        "kind": 6,
        "importPath": "SERVER.src.chaos_engine",
        "description": "SERVER.src.chaos_engine",
        "peekOfCode": "class ChaosEngine:\n    def __init__(self):\n        self.nasa_api_key = os.getenv(\"NASA_API_KEY\", \"DEMO_KEY\")\n        if not self.nasa_api_key or self.nasa_api_key == \"DEMO_KEY\":\n            logger.warning(\n                \"ChaosEngine: NASA API key not set or using DEMO_KEY. Actual NASA data for chaos events will be limited or unavailable.\"\n            )\n        else:\n            logger.info(\n                \"ChaosEngine: NASA API key found. Will use it for fetching cosmic events.\"",
        "detail": "SERVER.src.chaos_engine",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.chaos_engine",
        "description": "SERVER.src.chaos_engine",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nclass ChaosEngine:\n    def __init__(self):\n        self.nasa_api_key = os.getenv(\"NASA_API_KEY\", \"DEMO_KEY\")\n        if not self.nasa_api_key or self.nasa_api_key == \"DEMO_KEY\":\n            logger.warning(\n                \"ChaosEngine: NASA API key not set or using DEMO_KEY. Actual NASA data for chaos events will be limited or unavailable.\"\n            )\n        else:\n            logger.info(",
        "detail": "SERVER.src.chaos_engine",
        "documentation": {}
    },
    {
        "label": "CharacterServer",
        "kind": 6,
        "importPath": "SERVER.src.character_server",
        "description": "SERVER.src.character_server",
        "peekOfCode": "class CharacterServer:  # This is for Actor1, the server's own character\n    def __init__(self, db):\n        \"\"\"\n        Initialize the CharacterServer for \"Actor1\", loading character data from the database or creating a default if missing.\n        If the character data for \"Actor1\" is not found in the database, a default character profile is created and saved. LLM and TTS engines are not initialized here and must be set up asynchronously.\n        \"\"\"\n        self.db = db\n        self.character_Actor_id = \"Actor1\"  # Explicitly for Actor1\n        logger.info(f\"Initializing CharacterServer for {self.character_Actor_id}...\")\n        self.character = self.db.get_character(self.character_Actor_id)",
        "detail": "SERVER.src.character_server",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.character_server",
        "description": "SERVER.src.character_server",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nclass CharacterServer:  # This is for Actor1, the server's own character\n    def __init__(self, db):\n        \"\"\"\n        Initialize the CharacterServer for \"Actor1\", loading character data from the database or creating a default if missing.\n        If the character data for \"Actor1\" is not found in the database, a default character profile is created and saved. LLM and TTS engines are not initialized here and must be set up asynchronously.\n        \"\"\"\n        self.db = db\n        self.character_Actor_id = \"Actor1\"  # Explicitly for Actor1\n        logger.info(f\"Initializing CharacterServer for {self.character_Actor_id}...\")",
        "detail": "SERVER.src.character_server",
        "documentation": {}
    },
    {
        "label": "CheckpointManager",
        "kind": 6,
        "importPath": "SERVER.src.checkpoint_manager",
        "description": "SERVER.src.checkpoint_manager",
        "peekOfCode": "class CheckpointManager:\n    def __init__(self, server_model_name=\"TinyLLaMA\", server_Actor_id=\"Actor1\"):\n        \"\"\"\n        Initialize the CheckpointManager with configurable server model and actor identifiers.\n        Creates necessary directories for storing checkpoints and server-specific adapters based on the provided model and actor IDs.\n        \"\"\"\n        self.server_model_name = server_model_name\n        self.server_Actor_id = server_Actor_id\n        self.server_adapter_specific_path = os.path.join(\n            ADAPTERS_PATH, self.server_model_name, self.server_Actor_id",
        "detail": "SERVER.src.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.checkpoint_manager",
        "description": "SERVER.src.checkpoint_manager",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\n# Path for server-specific adapters (Actor1)\n# Now configurable via CheckpointManager arguments for model and Actor ID.\nclass CheckpointManager:\n    def __init__(self, server_model_name=\"TinyLLaMA\", server_Actor_id=\"Actor1\"):\n        \"\"\"\n        Initialize the CheckpointManager with configurable server model and actor identifiers.\n        Creates necessary directories for storing checkpoints and server-specific adapters based on the provided model and actor IDs.\n        \"\"\"\n        self.server_model_name = server_model_name",
        "detail": "SERVER.src.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "ClientManager",
        "kind": 6,
        "importPath": "SERVER.src.client_manager",
        "description": "SERVER.src.client_manager",
        "peekOfCode": "class ClientManager:\n    def __init__(self, db: Database):\n        \"\"\"\n        Initialize the ClientManager with a database connection and prepare audio playback and health check mechanisms.\n        Attempts to initialize the pygame mixer for audio playback. Sets up threading constructs for managing periodic client health checks.\n        \"\"\"\n        self.db = db\n        if not pygame.mixer.get_init():\n            try:\n                pygame.mixer.init()",
        "detail": "SERVER.src.client_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.client_manager",
        "description": "SERVER.src.client_manager",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nCLIENT_HEALTH_CHECK_INTERVAL_SECONDS = 60 * 2\nCLIENT_HEALTH_REQUEST_TIMEOUT_SECONDS = 5\n# Retry settings for send_to_client\nSEND_TO_CLIENT_MAX_RETRIES = 2\nSEND_TO_CLIENT_BASE_DELAY_SECONDS = 1\nSEND_TO_CLIENT_REQUEST_TIMEOUT_SECONDS = 15  # Timeout for the actual /character request\nclass ClientManager:\n    def __init__(self, db: Database):\n        \"\"\"",
        "detail": "SERVER.src.client_manager",
        "documentation": {}
    },
    {
        "label": "CLIENT_HEALTH_CHECK_INTERVAL_SECONDS",
        "kind": 5,
        "importPath": "SERVER.src.client_manager",
        "description": "SERVER.src.client_manager",
        "peekOfCode": "CLIENT_HEALTH_CHECK_INTERVAL_SECONDS = 60 * 2\nCLIENT_HEALTH_REQUEST_TIMEOUT_SECONDS = 5\n# Retry settings for send_to_client\nSEND_TO_CLIENT_MAX_RETRIES = 2\nSEND_TO_CLIENT_BASE_DELAY_SECONDS = 1\nSEND_TO_CLIENT_REQUEST_TIMEOUT_SECONDS = 15  # Timeout for the actual /character request\nclass ClientManager:\n    def __init__(self, db: Database):\n        \"\"\"\n        Initialize the ClientManager with a database connection and prepare audio playback and health check mechanisms.",
        "detail": "SERVER.src.client_manager",
        "documentation": {}
    },
    {
        "label": "CLIENT_HEALTH_REQUEST_TIMEOUT_SECONDS",
        "kind": 5,
        "importPath": "SERVER.src.client_manager",
        "description": "SERVER.src.client_manager",
        "peekOfCode": "CLIENT_HEALTH_REQUEST_TIMEOUT_SECONDS = 5\n# Retry settings for send_to_client\nSEND_TO_CLIENT_MAX_RETRIES = 2\nSEND_TO_CLIENT_BASE_DELAY_SECONDS = 1\nSEND_TO_CLIENT_REQUEST_TIMEOUT_SECONDS = 15  # Timeout for the actual /character request\nclass ClientManager:\n    def __init__(self, db: Database):\n        \"\"\"\n        Initialize the ClientManager with a database connection and prepare audio playback and health check mechanisms.\n        Attempts to initialize the pygame mixer for audio playback. Sets up threading constructs for managing periodic client health checks.",
        "detail": "SERVER.src.client_manager",
        "documentation": {}
    },
    {
        "label": "SEND_TO_CLIENT_MAX_RETRIES",
        "kind": 5,
        "importPath": "SERVER.src.client_manager",
        "description": "SERVER.src.client_manager",
        "peekOfCode": "SEND_TO_CLIENT_MAX_RETRIES = 2\nSEND_TO_CLIENT_BASE_DELAY_SECONDS = 1\nSEND_TO_CLIENT_REQUEST_TIMEOUT_SECONDS = 15  # Timeout for the actual /character request\nclass ClientManager:\n    def __init__(self, db: Database):\n        \"\"\"\n        Initialize the ClientManager with a database connection and prepare audio playback and health check mechanisms.\n        Attempts to initialize the pygame mixer for audio playback. Sets up threading constructs for managing periodic client health checks.\n        \"\"\"\n        self.db = db",
        "detail": "SERVER.src.client_manager",
        "documentation": {}
    },
    {
        "label": "SEND_TO_CLIENT_BASE_DELAY_SECONDS",
        "kind": 5,
        "importPath": "SERVER.src.client_manager",
        "description": "SERVER.src.client_manager",
        "peekOfCode": "SEND_TO_CLIENT_BASE_DELAY_SECONDS = 1\nSEND_TO_CLIENT_REQUEST_TIMEOUT_SECONDS = 15  # Timeout for the actual /character request\nclass ClientManager:\n    def __init__(self, db: Database):\n        \"\"\"\n        Initialize the ClientManager with a database connection and prepare audio playback and health check mechanisms.\n        Attempts to initialize the pygame mixer for audio playback. Sets up threading constructs for managing periodic client health checks.\n        \"\"\"\n        self.db = db\n        if not pygame.mixer.get_init():",
        "detail": "SERVER.src.client_manager",
        "documentation": {}
    },
    {
        "label": "SEND_TO_CLIENT_REQUEST_TIMEOUT_SECONDS",
        "kind": 5,
        "importPath": "SERVER.src.client_manager",
        "description": "SERVER.src.client_manager",
        "peekOfCode": "SEND_TO_CLIENT_REQUEST_TIMEOUT_SECONDS = 15  # Timeout for the actual /character request\nclass ClientManager:\n    def __init__(self, db: Database):\n        \"\"\"\n        Initialize the ClientManager with a database connection and prepare audio playback and health check mechanisms.\n        Attempts to initialize the pygame mixer for audio playback. Sets up threading constructs for managing periodic client health checks.\n        \"\"\"\n        self.db = db\n        if not pygame.mixer.get_init():\n            try:",
        "detail": "SERVER.src.client_manager",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))\n# Base path for all data\nBASE_DATA_PATH = os.getenv(\"DREAMWEAVER_DATA_PATH\", os.path.join(PROJECT_ROOT, \"data\"))\n# Database path\nDB_PATH = os.getenv(\"DB_PATH\", os.path.join(BASE_DATA_PATH, \"dream_weaver.db\"))\n# Audio paths\nAUDIO_PATH = os.path.join(BASE_DATA_PATH, \"audio\")\nNARRATOR_AUDIO_PATH = os.path.join(AUDIO_PATH, \"narrator\")\nCHARACTERS_AUDIO_PATH = os.path.join(AUDIO_PATH, \"characters\")\nREFERENCE_VOICES_AUDIO_PATH = os.path.join(AUDIO_PATH, \"reference_voices\")",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "BASE_DATA_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "BASE_DATA_PATH = os.getenv(\"DREAMWEAVER_DATA_PATH\", os.path.join(PROJECT_ROOT, \"data\"))\n# Database path\nDB_PATH = os.getenv(\"DB_PATH\", os.path.join(BASE_DATA_PATH, \"dream_weaver.db\"))\n# Audio paths\nAUDIO_PATH = os.path.join(BASE_DATA_PATH, \"audio\")\nNARRATOR_AUDIO_PATH = os.path.join(AUDIO_PATH, \"narrator\")\nCHARACTERS_AUDIO_PATH = os.path.join(AUDIO_PATH, \"characters\")\nREFERENCE_VOICES_AUDIO_PATH = os.path.join(AUDIO_PATH, \"reference_voices\")\n# Models paths\nMODELS_PATH = os.getenv(",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "DB_PATH = os.getenv(\"DB_PATH\", os.path.join(BASE_DATA_PATH, \"dream_weaver.db\"))\n# Audio paths\nAUDIO_PATH = os.path.join(BASE_DATA_PATH, \"audio\")\nNARRATOR_AUDIO_PATH = os.path.join(AUDIO_PATH, \"narrator\")\nCHARACTERS_AUDIO_PATH = os.path.join(AUDIO_PATH, \"characters\")\nREFERENCE_VOICES_AUDIO_PATH = os.path.join(AUDIO_PATH, \"reference_voices\")\n# Models paths\nMODELS_PATH = os.getenv(\n    \"DREAMWEAVER_MODEL_PATH\", os.path.join(BASE_DATA_PATH, \"models\")\n)",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "AUDIO_PATH = os.path.join(BASE_DATA_PATH, \"audio\")\nNARRATOR_AUDIO_PATH = os.path.join(AUDIO_PATH, \"narrator\")\nCHARACTERS_AUDIO_PATH = os.path.join(AUDIO_PATH, \"characters\")\nREFERENCE_VOICES_AUDIO_PATH = os.path.join(AUDIO_PATH, \"reference_voices\")\n# Models paths\nMODELS_PATH = os.getenv(\n    \"DREAMWEAVER_MODEL_PATH\", os.path.join(BASE_DATA_PATH, \"models\")\n)\nADAPTERS_PATH = os.path.join(MODELS_PATH, \"adapters\")\n# Checkpoints path",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "NARRATOR_AUDIO_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "NARRATOR_AUDIO_PATH = os.path.join(AUDIO_PATH, \"narrator\")\nCHARACTERS_AUDIO_PATH = os.path.join(AUDIO_PATH, \"characters\")\nREFERENCE_VOICES_AUDIO_PATH = os.path.join(AUDIO_PATH, \"reference_voices\")\n# Models paths\nMODELS_PATH = os.getenv(\n    \"DREAMWEAVER_MODEL_PATH\", os.path.join(BASE_DATA_PATH, \"models\")\n)\nADAPTERS_PATH = os.path.join(MODELS_PATH, \"adapters\")\n# Checkpoints path\nBASE_CHECKPOINT_PATH = os.getenv(",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "CHARACTERS_AUDIO_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "CHARACTERS_AUDIO_PATH = os.path.join(AUDIO_PATH, \"characters\")\nREFERENCE_VOICES_AUDIO_PATH = os.path.join(AUDIO_PATH, \"reference_voices\")\n# Models paths\nMODELS_PATH = os.getenv(\n    \"DREAMWEAVER_MODEL_PATH\", os.path.join(BASE_DATA_PATH, \"models\")\n)\nADAPTERS_PATH = os.path.join(MODELS_PATH, \"adapters\")\n# Checkpoints path\nBASE_CHECKPOINT_PATH = os.getenv(\n    \"DREAMWEAVER_CHECKPOINT_PATH\", os.path.join(PROJECT_ROOT, \"checkpoints\")",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "REFERENCE_VOICES_AUDIO_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "REFERENCE_VOICES_AUDIO_PATH = os.path.join(AUDIO_PATH, \"reference_voices\")\n# Models paths\nMODELS_PATH = os.getenv(\n    \"DREAMWEAVER_MODEL_PATH\", os.path.join(BASE_DATA_PATH, \"models\")\n)\nADAPTERS_PATH = os.path.join(MODELS_PATH, \"adapters\")\n# Checkpoints path\nBASE_CHECKPOINT_PATH = os.getenv(\n    \"DREAMWEAVER_CHECKPOINT_PATH\", os.path.join(PROJECT_ROOT, \"checkpoints\")\n)",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "MODELS_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "MODELS_PATH = os.getenv(\n    \"DREAMWEAVER_MODEL_PATH\", os.path.join(BASE_DATA_PATH, \"models\")\n)\nADAPTERS_PATH = os.path.join(MODELS_PATH, \"adapters\")\n# Checkpoints path\nBASE_CHECKPOINT_PATH = os.getenv(\n    \"DREAMWEAVER_CHECKPOINT_PATH\", os.path.join(PROJECT_ROOT, \"checkpoints\")\n)\n# --- DreamWeaver Configurable Options ---\nDEFAULT_WHISPER_MODEL_SIZE = os.getenv(\"WHISPER_MODEL_SIZE\", \"base\")",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "ADAPTERS_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "ADAPTERS_PATH = os.path.join(MODELS_PATH, \"adapters\")\n# Checkpoints path\nBASE_CHECKPOINT_PATH = os.getenv(\n    \"DREAMWEAVER_CHECKPOINT_PATH\", os.path.join(PROJECT_ROOT, \"checkpoints\")\n)\n# --- DreamWeaver Configurable Options ---\nDEFAULT_WHISPER_MODEL_SIZE = os.getenv(\"WHISPER_MODEL_SIZE\", \"base\")\nDIARIZATION_ENABLED = os.getenv(\"DIARIZATION_ENABLED\", \"1\") == \"1\"\n# Additional narrator/model config options\nDIARIZATION_MODEL = os.getenv(\"DIARIZATION_MODEL\", \"pyannote/speaker-diarization-3.1\")",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "BASE_CHECKPOINT_PATH",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "BASE_CHECKPOINT_PATH = os.getenv(\n    \"DREAMWEAVER_CHECKPOINT_PATH\", os.path.join(PROJECT_ROOT, \"checkpoints\")\n)\n# --- DreamWeaver Configurable Options ---\nDEFAULT_WHISPER_MODEL_SIZE = os.getenv(\"WHISPER_MODEL_SIZE\", \"base\")\nDIARIZATION_ENABLED = os.getenv(\"DIARIZATION_ENABLED\", \"1\") == \"1\"\n# Additional narrator/model config options\nDIARIZATION_MODEL = os.getenv(\"DIARIZATION_MODEL\", \"pyannote/speaker-diarization-3.1\")\nAUDIO_FORMAT = os.getenv(\"AUDIO_FORMAT\", \".wav\")\nMAX_DIARIZATION_RETRIES = int(os.getenv(\"MAX_DIARIZATION_RETRIES\", \"3\"))",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_WHISPER_MODEL_SIZE",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "DEFAULT_WHISPER_MODEL_SIZE = os.getenv(\"WHISPER_MODEL_SIZE\", \"base\")\nDIARIZATION_ENABLED = os.getenv(\"DIARIZATION_ENABLED\", \"1\") == \"1\"\n# Additional narrator/model config options\nDIARIZATION_MODEL = os.getenv(\"DIARIZATION_MODEL\", \"pyannote/speaker-diarization-3.1\")\nAUDIO_FORMAT = os.getenv(\"AUDIO_FORMAT\", \".wav\")\nMAX_DIARIZATION_RETRIES = int(os.getenv(\"MAX_DIARIZATION_RETRIES\", \"3\"))\n# Server's Actor1 specific configuration\nACTOR1_PYGAME_AUDIO_ENABLED = (\n    os.getenv(\"ACTOR1_PYGAME_AUDIO_ENABLED\", \"0\") == \"1\"\n)  # Default to False (disabled)",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "DIARIZATION_ENABLED",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "DIARIZATION_ENABLED = os.getenv(\"DIARIZATION_ENABLED\", \"1\") == \"1\"\n# Additional narrator/model config options\nDIARIZATION_MODEL = os.getenv(\"DIARIZATION_MODEL\", \"pyannote/speaker-diarization-3.1\")\nAUDIO_FORMAT = os.getenv(\"AUDIO_FORMAT\", \".wav\")\nMAX_DIARIZATION_RETRIES = int(os.getenv(\"MAX_DIARIZATION_RETRIES\", \"3\"))\n# Server's Actor1 specific configuration\nACTOR1_PYGAME_AUDIO_ENABLED = (\n    os.getenv(\"ACTOR1_PYGAME_AUDIO_ENABLED\", \"0\") == \"1\"\n)  # Default to False (disabled)\n# Session duration for issued tokens (in hours)",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "DIARIZATION_MODEL",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "DIARIZATION_MODEL = os.getenv(\"DIARIZATION_MODEL\", \"pyannote/speaker-diarization-3.1\")\nAUDIO_FORMAT = os.getenv(\"AUDIO_FORMAT\", \".wav\")\nMAX_DIARIZATION_RETRIES = int(os.getenv(\"MAX_DIARIZATION_RETRIES\", \"3\"))\n# Server's Actor1 specific configuration\nACTOR1_PYGAME_AUDIO_ENABLED = (\n    os.getenv(\"ACTOR1_PYGAME_AUDIO_ENABLED\", \"0\") == \"1\"\n)  # Default to False (disabled)\n# Session duration for issued tokens (in hours)\nSESSION_DURATION_HOURS = int(os.getenv(\"SESSION_DURATION_HOURS\", 1))\n# List of editable config options for UI",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "AUDIO_FORMAT",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "AUDIO_FORMAT = os.getenv(\"AUDIO_FORMAT\", \".wav\")\nMAX_DIARIZATION_RETRIES = int(os.getenv(\"MAX_DIARIZATION_RETRIES\", \"3\"))\n# Server's Actor1 specific configuration\nACTOR1_PYGAME_AUDIO_ENABLED = (\n    os.getenv(\"ACTOR1_PYGAME_AUDIO_ENABLED\", \"0\") == \"1\"\n)  # Default to False (disabled)\n# Session duration for issued tokens (in hours)\nSESSION_DURATION_HOURS = int(os.getenv(\"SESSION_DURATION_HOURS\", 1))\n# List of editable config options for UI\nEDITABLE_CONFIG_OPTIONS = {",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "MAX_DIARIZATION_RETRIES",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "MAX_DIARIZATION_RETRIES = int(os.getenv(\"MAX_DIARIZATION_RETRIES\", \"3\"))\n# Server's Actor1 specific configuration\nACTOR1_PYGAME_AUDIO_ENABLED = (\n    os.getenv(\"ACTOR1_PYGAME_AUDIO_ENABLED\", \"0\") == \"1\"\n)  # Default to False (disabled)\n# Session duration for issued tokens (in hours)\nSESSION_DURATION_HOURS = int(os.getenv(\"SESSION_DURATION_HOURS\", 1))\n# List of editable config options for UI\nEDITABLE_CONFIG_OPTIONS = {\n    \"WHISPER_MODEL_SIZE\": DEFAULT_WHISPER_MODEL_SIZE,",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "ACTOR1_PYGAME_AUDIO_ENABLED",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "ACTOR1_PYGAME_AUDIO_ENABLED = (\n    os.getenv(\"ACTOR1_PYGAME_AUDIO_ENABLED\", \"0\") == \"1\"\n)  # Default to False (disabled)\n# Session duration for issued tokens (in hours)\nSESSION_DURATION_HOURS = int(os.getenv(\"SESSION_DURATION_HOURS\", 1))\n# List of editable config options for UI\nEDITABLE_CONFIG_OPTIONS = {\n    \"WHISPER_MODEL_SIZE\": DEFAULT_WHISPER_MODEL_SIZE,\n    \"DIARIZATION_ENABLED\": DIARIZATION_ENABLED,\n    \"DIARIZATION_MODEL\": DIARIZATION_MODEL,",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "SESSION_DURATION_HOURS",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "SESSION_DURATION_HOURS = int(os.getenv(\"SESSION_DURATION_HOURS\", 1))\n# List of editable config options for UI\nEDITABLE_CONFIG_OPTIONS = {\n    \"WHISPER_MODEL_SIZE\": DEFAULT_WHISPER_MODEL_SIZE,\n    \"DIARIZATION_ENABLED\": DIARIZATION_ENABLED,\n    \"DIARIZATION_MODEL\": DIARIZATION_MODEL,\n    \"AUDIO_FORMAT\": AUDIO_FORMAT,\n    \"MAX_DIARIZATION_RETRIES\": MAX_DIARIZATION_RETRIES,\n    \"ACTOR1_PYGAME_AUDIO_ENABLED\": ACTOR1_PYGAME_AUDIO_ENABLED,\n    \"SESSION_DURATION_HOURS\": SESSION_DURATION_HOURS,",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "EDITABLE_CONFIG_OPTIONS",
        "kind": 5,
        "importPath": "SERVER.src.config",
        "description": "SERVER.src.config",
        "peekOfCode": "EDITABLE_CONFIG_OPTIONS = {\n    \"WHISPER_MODEL_SIZE\": DEFAULT_WHISPER_MODEL_SIZE,\n    \"DIARIZATION_ENABLED\": DIARIZATION_ENABLED,\n    \"DIARIZATION_MODEL\": DIARIZATION_MODEL,\n    \"AUDIO_FORMAT\": AUDIO_FORMAT,\n    \"MAX_DIARIZATION_RETRIES\": MAX_DIARIZATION_RETRIES,\n    \"ACTOR1_PYGAME_AUDIO_ENABLED\": ACTOR1_PYGAME_AUDIO_ENABLED,\n    \"SESSION_DURATION_HOURS\": SESSION_DURATION_HOURS,\n    # Add more as needed\n}",
        "detail": "SERVER.src.config",
        "documentation": {}
    },
    {
        "label": "CSM",
        "kind": 6,
        "importPath": "SERVER.src.csm",
        "description": "SERVER.src.csm",
        "peekOfCode": "class CSM:\n    def __init__(self):\n        \"\"\"\n        Initializes the CSM instance and its core components, including database access, narration, character server, client management, hardware control, and chaos engine. Starts periodic health checks for clients upon initialization.\n        \"\"\"\n        self.db = Database(DB_PATH)\n        self.narrator = Narrator()\n        self.character_server = CharacterServer(self.db)\n        self.client_manager = ClientManager(self.db)\n        self.hardware = Hardware()",
        "detail": "SERVER.src.csm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.csm",
        "description": "SERVER.src.csm",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nclass CSM:\n    def __init__(self):\n        \"\"\"\n        Initializes the CSM instance and its core components, including database access, narration, character server, client management, hardware control, and chaos engine. Starts periodic health checks for clients upon initialization.\n        \"\"\"\n        self.db = Database(DB_PATH)\n        self.narrator = Narrator()\n        self.character_server = CharacterServer(self.db)\n        self.client_manager = ClientManager(self.db)",
        "detail": "SERVER.src.csm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "SERVER.src.dashboard",
        "description": "SERVER.src.dashboard",
        "peekOfCode": "def get_db():\n    \"\"\"\n    Yield a database connection for use in FastAPI dependencies, ensuring it is properly closed after use.\n    Yields:\n        Database: An instance of the Database connected to the configured path.\n    \"\"\"\n    db = Database(DB_PATH)\n    try:\n        yield db\n    finally:",
        "detail": "SERVER.src.dashboard",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "SERVER.src.dashboard",
        "description": "SERVER.src.dashboard",
        "peekOfCode": "router = APIRouter()\n# Dependency to get a database instance\ndef get_db():\n    \"\"\"\n    Yield a database connection for use in FastAPI dependencies, ensuring it is properly closed after use.\n    Yields:\n        Database: An instance of the Database connected to the configured path.\n    \"\"\"\n    db = Database(DB_PATH)\n    try:",
        "detail": "SERVER.src.dashboard",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "SERVER.src.database",
        "description": "SERVER.src.database",
        "peekOfCode": "class Database:\n    def __init__(self, db_path):\n        \"\"\"\n        Initialize the Database instance with the specified SQLite file path, set up thread-local storage for connections, and ensure the required database schema exists.\n        \"\"\"\n        self.db_path = db_path\n        self._thread_local = threading.local()\n        # The initial connection for the main thread is made here to ensure the schema exists.\n        # Other threads will create their own connections on first use.\n        self._get_conn()",
        "detail": "SERVER.src.database",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.database",
        "description": "SERVER.src.database",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nclass Database:\n    def __init__(self, db_path):\n        \"\"\"\n        Initialize the Database instance with the specified SQLite file path, set up thread-local storage for connections, and ensure the required database schema exists.\n        \"\"\"\n        self.db_path = db_path\n        self._thread_local = threading.local()\n        # The initial connection for the main thread is made here to ensure the schema exists.\n        # Other threads will create their own connections on first use.",
        "detail": "SERVER.src.database",
        "documentation": {}
    },
    {
        "label": "get_env_file_status",
        "kind": 2,
        "importPath": "SERVER.src.env_manager",
        "description": "SERVER.src.env_manager",
        "peekOfCode": "def get_env_file_status():\n    \"\"\"\n    Check whether the `.env` file exists at the project root and return a status message.\n    Returns:\n        str: A message indicating if the `.env` file is present or will be created upon saving.\n    \"\"\"\n    if os.path.exists(ENV_FILE_PATH):\n        msg = f\".env file found at {ENV_FILE_PATH}\"\n        logger.info(msg)\n        return msg",
        "detail": "SERVER.src.env_manager",
        "documentation": {}
    },
    {
        "label": "load_env_vars",
        "kind": 2,
        "importPath": "SERVER.src.env_manager",
        "description": "SERVER.src.env_manager",
        "peekOfCode": "def load_env_vars(*, mask_sensitive: bool = False) -> Dict[str, str]:\n    \"\"\"\n    Load environment variables from the `.env` file as a dictionary.\n    If `mask_sensitive` is True, values for keys containing \"TOKEN\", \"KEY\", or \"SECRET\" (case-insensitive) are masked for security. Returns an empty dictionary if the `.env` file does not exist.\n    Parameters:\n        mask_sensitive (bool): Whether to mask sensitive values in the output.\n    Returns:\n        dict: Dictionary of environment variable key-value pairs.\n    \"\"\"\n    env_vars = {}",
        "detail": "SERVER.src.env_manager",
        "documentation": {}
    },
    {
        "label": "save_env_vars",
        "kind": 2,
        "importPath": "SERVER.src.env_manager",
        "description": "SERVER.src.env_manager",
        "peekOfCode": "def save_env_vars(new_vars_str: str):\n    \"\"\"\n    Update or add environment variables in the `.env` file using a string of key-value assignments.\n    Parameters:\n        new_vars_str (str): String containing environment variable assignments, each in `KEY=VALUE` format on a new line.\n    Returns:\n        str: Success message if variables are saved, or an error message if saving fails.\n    \"\"\"\n    try:\n        existing_vars = load_env_vars(mask_sensitive=False)",
        "detail": "SERVER.src.env_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.env_manager",
        "description": "SERVER.src.env_manager",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\n# Path to the .env file in the project root\nENV_FILE_PATH = os.path.join(\n    PROJECT_ROOT, \".env\"\n)  # This should be SERVER_PROJECT_ROOT if .env is in SERVER/\n# Let's assume .env is meant to be in the overall project root (DreamWeaver/.env)\n# If it's SERVER/.env, then PROJECT_ROOT in config.py (which is SERVER dir) is correct.\n# For now, assuming PROJECT_ROOT from config.py is the intended location for .env (i.e. SERVER/.env)\ndef get_env_file_status():\n    \"\"\"",
        "detail": "SERVER.src.env_manager",
        "documentation": {}
    },
    {
        "label": "ENV_FILE_PATH",
        "kind": 5,
        "importPath": "SERVER.src.env_manager",
        "description": "SERVER.src.env_manager",
        "peekOfCode": "ENV_FILE_PATH = os.path.join(\n    PROJECT_ROOT, \".env\"\n)  # This should be SERVER_PROJECT_ROOT if .env is in SERVER/\n# Let's assume .env is meant to be in the overall project root (DreamWeaver/.env)\n# If it's SERVER/.env, then PROJECT_ROOT in config.py (which is SERVER dir) is correct.\n# For now, assuming PROJECT_ROOT from config.py is the intended location for .env (i.e. SERVER/.env)\ndef get_env_file_status():\n    \"\"\"\n    Check whether the `.env` file exists at the project root and return a status message.\n    Returns:",
        "detail": "SERVER.src.env_manager",
        "documentation": {}
    },
    {
        "label": "update_model_dropdown",
        "kind": 2,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "def update_model_dropdown(service_name: str):\n    models = TTSManager.get_available_models(service_name)\n    default_value = models[0] if models else None\n    return gr.update(choices=models, value=default_value)  # Use gr.update\nasync def get_story_playback_data_async():\n    if db_instance is None:\n        raise RuntimeError(\"Database instance not initialized.\")\n    history_raw = await asyncio.to_thread(db_instance.get_story_history)\n    chatbot_messages = []\n    if not history_raw:",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "add_dynamic_client_config_tab",
        "kind": 2,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "def add_dynamic_client_config_tab():\n    \"\"\"Adds the dynamic client configuration tab to the Gradio interface.\"\"\"\n    with gr.TabItem(\"Dynamic Client Configuration\"):\n        gr.Markdown(\"## Update Client Configurations via WebSocket\")\n        gr.Markdown(\n            \"Select a connected client and update its configuration parameters. The client must be connected via WebSocket for changes to take effect.\"\n        )\n        with gr.Row():\n            # Using the global_ws_connection_manager imported at the top\n            connected_clients_dropdown = gr.Dropdown(",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "launch_interface",
        "kind": 2,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "def launch_interface():  # Renamed original launch_interface\n    global db_instance, client_manager_instance, csm_instance, checkpoint_manager, env_manager_instance\n    db_instance = Database(DB_PATH)\n    client_manager_instance = ClientManager(db_instance)\n    csm_instance = CSM()\n    checkpoint_manager = CheckpointManager()\n    env_manager_instance = env_manager\n    import gradio.themes as themes\n    with gr.Blocks(\n        theme=themes.Soft(",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\n# --- Instances ---\ndb_instance = None\nclient_manager_instance = None\ncsm_instance = None\ncheckpoint_manager = None\nenv_manager_instance = None\n# --- Helper Functions ---\ndef update_model_dropdown(service_name: str):\n    models = TTSManager.get_available_models(service_name)",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "db_instance",
        "kind": 5,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "db_instance = None\nclient_manager_instance = None\ncsm_instance = None\ncheckpoint_manager = None\nenv_manager_instance = None\n# --- Helper Functions ---\ndef update_model_dropdown(service_name: str):\n    models = TTSManager.get_available_models(service_name)\n    default_value = models[0] if models else None\n    return gr.update(choices=models, value=default_value)  # Use gr.update",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "client_manager_instance",
        "kind": 5,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "client_manager_instance = None\ncsm_instance = None\ncheckpoint_manager = None\nenv_manager_instance = None\n# --- Helper Functions ---\ndef update_model_dropdown(service_name: str):\n    models = TTSManager.get_available_models(service_name)\n    default_value = models[0] if models else None\n    return gr.update(choices=models, value=default_value)  # Use gr.update\nasync def get_story_playback_data_async():",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "csm_instance",
        "kind": 5,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "csm_instance = None\ncheckpoint_manager = None\nenv_manager_instance = None\n# --- Helper Functions ---\ndef update_model_dropdown(service_name: str):\n    models = TTSManager.get_available_models(service_name)\n    default_value = models[0] if models else None\n    return gr.update(choices=models, value=default_value)  # Use gr.update\nasync def get_story_playback_data_async():\n    if db_instance is None:",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "checkpoint_manager",
        "kind": 5,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "checkpoint_manager = None\nenv_manager_instance = None\n# --- Helper Functions ---\ndef update_model_dropdown(service_name: str):\n    models = TTSManager.get_available_models(service_name)\n    default_value = models[0] if models else None\n    return gr.update(choices=models, value=default_value)  # Use gr.update\nasync def get_story_playback_data_async():\n    if db_instance is None:\n        raise RuntimeError(\"Database instance not initialized.\")",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "env_manager_instance",
        "kind": 5,
        "importPath": "SERVER.src.gradio_interface",
        "description": "SERVER.src.gradio_interface",
        "peekOfCode": "env_manager_instance = None\n# --- Helper Functions ---\ndef update_model_dropdown(service_name: str):\n    models = TTSManager.get_available_models(service_name)\n    default_value = models[0] if models else None\n    return gr.update(choices=models, value=default_value)  # Use gr.update\nasync def get_story_playback_data_async():\n    if db_instance is None:\n        raise RuntimeError(\"Database instance not initialized.\")\n    history_raw = await asyncio.to_thread(db_instance.get_story_history)",
        "detail": "SERVER.src.gradio_interface",
        "documentation": {}
    },
    {
        "label": "Hardware",
        "kind": 6,
        "importPath": "SERVER.src.hardware",
        "description": "SERVER.src.hardware",
        "peekOfCode": "class Hardware:\n    def __init__(self):\n        self.serial_port = os.getenv(\n            \"ARDUINO_SERIAL_PORT\", None\n        )  # Default to None if not set\n        self.baud_rate = int(os.getenv(\"ARDUINO_BAUD_RATE\", \"9600\"))\n        self.arduino = None\n        if self.serial_port:\n            try:\n                self.arduino = serial.Serial(",
        "detail": "SERVER.src.hardware",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.hardware",
        "description": "SERVER.src.hardware",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nclass Hardware:\n    def __init__(self):\n        self.serial_port = os.getenv(\n            \"ARDUINO_SERIAL_PORT\", None\n        )  # Default to None if not set\n        self.baud_rate = int(os.getenv(\"ARDUINO_BAUD_RATE\", \"9600\"))\n        self.arduino = None\n        if self.serial_port:\n            try:",
        "detail": "SERVER.src.hardware",
        "documentation": {}
    },
    {
        "label": "LLMEngine",
        "kind": 6,
        "importPath": "SERVER.src.llm_engine",
        "description": "SERVER.src.llm_engine",
        "peekOfCode": "class LLMEngine:\n    def __init__(\n        self, model_name=\"TinyLlama/TinyLlama-1.1B-Chat-v1.0\", db=None\n    ):  # Updated default model\n        \"\"\"\n        Initialize the LLMEngine with a specified model and optional database interface.\n        Sets up directory paths for LoRA adapters and base model caching, ensures necessary directories exist, and attempts to load the model and tokenizer. The engine is configured specifically for \"Actor1\".\n        \"\"\"\n        self.db = db\n        self.model_name = model_name",
        "detail": "SERVER.src.llm_engine",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "SERVER.src.logging_config",
        "description": "SERVER.src.logging_config",
        "peekOfCode": "def setup_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver server application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in 'SERVER/logs/server.log'.\n    \"\"\"\n    # Ensure logs directory exists\n    os.makedirs(LOGS_DIR, exist_ok=True)\n    logger = logging.getLogger(LOGGER_NAME)\n    logger.setLevel(log_level)",
        "detail": "SERVER.src.logging_config",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "SERVER.src.logging_config",
        "description": "SERVER.src.logging_config",
        "peekOfCode": "def get_logger(name=LOGGER_NAME):\n    \"\"\"\n    Returns the configured application logger.\n    \"\"\"\n    return logging.getLogger(name)\nif __name__ == \"__main__\":\n    # Example usage:\n    setup_logging(logging.DEBUG)\n    logger = get_logger()\n    logger.debug(\"This is a debug message.\")",
        "detail": "SERVER.src.logging_config",
        "documentation": {}
    },
    {
        "label": "LOGS_DIR",
        "kind": 5,
        "importPath": "SERVER.src.logging_config",
        "description": "SERVER.src.logging_config",
        "peekOfCode": "LOGS_DIR = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), \"..\", \"logs\"\n)  # SERVER/logs/\nSERVER_LOG_FILE = os.path.join(LOGS_DIR, \"server.log\")\nDEFAULT_LOG_LEVEL = logging.INFO\nLOGGER_NAME = \"dreamweaver_server\"\ndef setup_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver server application.\n    Sets up a logger that outputs to both the console and a rotating file.",
        "detail": "SERVER.src.logging_config",
        "documentation": {}
    },
    {
        "label": "SERVER_LOG_FILE",
        "kind": 5,
        "importPath": "SERVER.src.logging_config",
        "description": "SERVER.src.logging_config",
        "peekOfCode": "SERVER_LOG_FILE = os.path.join(LOGS_DIR, \"server.log\")\nDEFAULT_LOG_LEVEL = logging.INFO\nLOGGER_NAME = \"dreamweaver_server\"\ndef setup_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver server application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in 'SERVER/logs/server.log'.\n    \"\"\"\n    # Ensure logs directory exists",
        "detail": "SERVER.src.logging_config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_LEVEL",
        "kind": 5,
        "importPath": "SERVER.src.logging_config",
        "description": "SERVER.src.logging_config",
        "peekOfCode": "DEFAULT_LOG_LEVEL = logging.INFO\nLOGGER_NAME = \"dreamweaver_server\"\ndef setup_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver server application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in 'SERVER/logs/server.log'.\n    \"\"\"\n    # Ensure logs directory exists\n    os.makedirs(LOGS_DIR, exist_ok=True)",
        "detail": "SERVER.src.logging_config",
        "documentation": {}
    },
    {
        "label": "LOGGER_NAME",
        "kind": 5,
        "importPath": "SERVER.src.logging_config",
        "description": "SERVER.src.logging_config",
        "peekOfCode": "LOGGER_NAME = \"dreamweaver_server\"\ndef setup_logging(log_level=DEFAULT_LOG_LEVEL):\n    \"\"\"\n    Configures logging for the DreamWeaver server application.\n    Sets up a logger that outputs to both the console and a rotating file.\n    The log file is stored in 'SERVER/logs/server.log'.\n    \"\"\"\n    # Ensure logs directory exists\n    os.makedirs(LOGS_DIR, exist_ok=True)\n    logger = logging.getLogger(LOGGER_NAME)",
        "detail": "SERVER.src.logging_config",
        "documentation": {}
    },
    {
        "label": "Narrator",
        "kind": 6,
        "importPath": "SERVER.src.narrator",
        "description": "SERVER.src.narrator",
        "peekOfCode": "class Narrator:\n    def __init__(self, model_size=None):\n        self.reload_config()\n        if model_size is not None:\n            self.model_size = model_size\n        logger.info(f\"Narrator: Loading Whisper STT model '{self.model_size}'...\")\n        try:\n            from whisper import load_model\n            self.stt_model = load_model(self.model_size)\n            logger.info(\"Narrator: Whisper STT model loaded successfully.\")",
        "detail": "SERVER.src.narrator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.narrator",
        "description": "SERVER.src.narrator",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nclass Narrator:\n    def __init__(self, model_size=None):\n        self.reload_config()\n        if model_size is not None:\n            self.model_size = model_size\n        logger.info(f\"Narrator: Loading Whisper STT model '{self.model_size}'...\")\n        try:\n            from whisper import load_model\n            self.stt_model = load_model(self.model_size)",
        "detail": "SERVER.src.narrator",
        "documentation": {}
    },
    {
        "label": "SaveTrainingDataRequest",
        "kind": 6,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "class SaveTrainingDataRequest(BaseModel):\n    dataset: dict\n    Actor_id: str\n    token: str\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"dataset\": {\n                    \"input\": \"Narrator: The wind howls.\",\n                    \"output\": \"I shiver.\",",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "RegisterClientRequest",
        "kind": 6,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "class RegisterClientRequest(BaseModel):\n    Actor_id: str\n    token: str\n    client_port: int\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"Actor_id\": \"Actor2\",\n                \"token\": \"your_token_here\",\n                \"client_port\": 8001,",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "HeartbeatRequest",
        "kind": 6,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "class HeartbeatRequest(BaseModel):\n    Actor_id: str\n    token: str\n    status: Optional[str] = None\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"Actor_id\": \"Actor2\",\n                \"token\": \"your_token_here\",\n                \"status\": \"Idle\",",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "RequestChallengePayload",
        "kind": 6,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "class RequestChallengePayload(BaseModel):  # Renamed for clarity\n    Actor_id: str\n    token: str  # Primary token\nclass HandshakeResponseSubmit(BaseModel):\n    Actor_id: str\n    challenge_response: str\n# --- API Endpoints ---\n@app.get(\"/get_traits\", summary=\"Fetch Character Traits\")\nasync def get_traits(\n    Actor_id: str,",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "HandshakeResponseSubmit",
        "kind": 6,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "class HandshakeResponseSubmit(BaseModel):\n    Actor_id: str\n    challenge_response: str\n# --- API Endpoints ---\n@app.get(\"/get_traits\", summary=\"Fetch Character Traits\")\nasync def get_traits(\n    Actor_id: str,\n    token: str,\n    db: Database = Depends(get_db),\n    client_manager: ClientManager = Depends(get_client_manager),",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "def get_db():\n    \"\"\"\n    Yields a database connection for use within a request, ensuring it is closed afterward.\n    \"\"\"\n    db = Database(DB_PATH)\n    try:\n        yield db\n    finally:\n        db.close()  # Ensure DB connection is closed\n# Dependency to get a ClientManager instance",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "get_client_manager",
        "kind": 2,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "def get_client_manager(db: Database = Depends(get_db)):\n    \"\"\"\n    Provides a `ClientManager` instance initialized with the given database.\n    Returns:\n        ClientManager: An instance for managing client-related operations using the provided database.\n    \"\"\"\n    return ClientManager(db)  # ClientManager now also uses the new DB methods\n# --- Pydantic Models ---\nclass SaveTrainingDataRequest(BaseModel):\n    dataset: dict",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\napp = FastAPI(title=\"DreamWeaver Server API\")\napp.include_router(dashboard_router)\n# Dependency to get a database instance\ndef get_db():\n    \"\"\"\n    Yields a database connection for use within a request, ensuring it is closed afterward.\n    \"\"\"\n    db = Database(DB_PATH)\n    try:",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "SERVER.src.server_api",
        "description": "SERVER.src.server_api",
        "peekOfCode": "app = FastAPI(title=\"DreamWeaver Server API\")\napp.include_router(dashboard_router)\n# Dependency to get a database instance\ndef get_db():\n    \"\"\"\n    Yields a database connection for use within a request, ensuring it is closed afterward.\n    \"\"\"\n    db = Database(DB_PATH)\n    try:\n        yield db",
        "detail": "SERVER.src.server_api",
        "documentation": {}
    },
    {
        "label": "TTSManager",
        "kind": 6,
        "importPath": "SERVER.src.tts_manager",
        "description": "SERVER.src.tts_manager",
        "peekOfCode": "class TTSManager:\n    def __init__(\n        self,\n        tts_service_name: str,\n        model_name: Optional[str] = None,\n        speaker_wav_path: Optional[str] = None,\n        language: str = \"en\",\n    ):\n        \"\"\"\n        Initialize a TTSManager instance for the specified text-to-speech service, model, and language.",
        "detail": "SERVER.src.tts_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.tts_manager",
        "description": "SERVER.src.tts_manager",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\ntry:\n    from TTS.api import TTS as CoquiTTS\nexcept ImportError:\n    CoquiTTS = None\n    logger.info(\n        \"Server TTSManager: Coqui TTS library not found. XTTSv2 will not be available.\"\n    )\nTTS_MODELS_PATH = os.path.join(MODELS_PATH, \"tts\")\nclass TTSManager:",
        "detail": "SERVER.src.tts_manager",
        "documentation": {}
    },
    {
        "label": "TTS_MODELS_PATH",
        "kind": 5,
        "importPath": "SERVER.src.tts_manager",
        "description": "SERVER.src.tts_manager",
        "peekOfCode": "TTS_MODELS_PATH = os.path.join(MODELS_PATH, \"tts\")\nclass TTSManager:\n    def __init__(\n        self,\n        tts_service_name: str,\n        model_name: Optional[str] = None,\n        speaker_wav_path: Optional[str] = None,\n        language: str = \"en\",\n    ):\n        \"\"\"",
        "detail": "SERVER.src.tts_manager",
        "documentation": {}
    },
    {
        "label": "WebSocketConnectionManager",
        "kind": 6,
        "importPath": "SERVER.src.websocket_manager",
        "description": "SERVER.src.websocket_manager",
        "peekOfCode": "class WebSocketConnectionManager:\n    def __init__(self):\n        self.active_connections: Dict[str, WebSocket] = {}\n        logger.info(\"WebSocketConnectionManager initialized.\")\n    async def connect(self, websocket: WebSocket, actor_id: str):\n        \"\"\"\n        Accepts a new WebSocket connection and stores it.\n        \"\"\"\n        await websocket.accept()\n        self.active_connections[actor_id] = websocket",
        "detail": "SERVER.src.websocket_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "SERVER.src.websocket_manager",
        "description": "SERVER.src.websocket_manager",
        "peekOfCode": "logger = logging.getLogger(\"dreamweaver_server\")\nclass WebSocketConnectionManager:\n    def __init__(self):\n        self.active_connections: Dict[str, WebSocket] = {}\n        logger.info(\"WebSocketConnectionManager initialized.\")\n    async def connect(self, websocket: WebSocket, actor_id: str):\n        \"\"\"\n        Accepts a new WebSocket connection and stores it.\n        \"\"\"\n        await websocket.accept()",
        "detail": "SERVER.src.websocket_manager",
        "documentation": {}
    },
    {
        "label": "connection_manager",
        "kind": 5,
        "importPath": "SERVER.src.websocket_manager",
        "description": "SERVER.src.websocket_manager",
        "peekOfCode": "connection_manager = WebSocketConnectionManager()",
        "detail": "SERVER.src.websocket_manager",
        "documentation": {}
    },
    {
        "label": "TestServerAPIPytest",
        "kind": 6,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "class TestServerAPIPytest:\n    \"\"\"Pytest-style tests for Server API.\"\"\"\n    @pytest.mark.asyncio\n    async def test_server_startup_with_fixture(self, server_config):\n        \"\"\"Test server startup using pytest fixtures.\"\"\"\n        from .test_server_api import ServerAPI, ServerConfig\n        config = ServerConfig(server_config)\n        server = ServerAPI(config)\n        result = await server.start()\n        assert result is True",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "server_config",
        "kind": 2,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "def server_config():\n    \"\"\"Fixture providing standard server configuration for tests.\"\"\"\n    return {\n        \"host\": \"localhost\",\n        \"port\": 8080,\n        \"debug\": True,\n        \"max_connections\": 100,\n        \"timeout\": 30,\n        \"workers\": 1,\n    }",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "temp_config_file",
        "kind": 2,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "def temp_config_file(server_config):\n    \"\"\"Fixture providing a temporary configuration file.\"\"\"\n    with tempfile.NamedTemporaryFile(mode=\"w\", suffix=\".json\", delete=False) as f:\n        json.dump(server_config, f)\n        temp_file = f.name\n    yield temp_file\n    # Cleanup\n    if os.path.exists(temp_file):\n        os.unlink(temp_file)\n@pytest.fixture",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_server_environment",
        "kind": 2,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "def mock_server_environment(monkeypatch):\n    \"\"\"Fixture for mocking server environment variables.\"\"\"\n    test_env = {\n        \"SERVER_HOST\": \"test.localhost\",\n        \"SERVER_PORT\": \"9999\",\n        \"SERVER_DEBUG\": \"true\",\n        \"SERVER_MAX_CONNECTIONS\": \"50\",\n    }\n    for key, value in test_env.items():\n        monkeypatch.setenv(key, value)",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "def event_loop():\n    \"\"\"Create an instance of the default event loop for the test session.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\n@pytest.fixture\nasync def running_server(server_config):\n    \"\"\"Fixture providing a running server instance.\"\"\"\n    from .test_server_api import ServerAPI, ServerConfig\n    config = ServerConfig(server_config)",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_request_data",
        "kind": 2,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "def mock_request_data():\n    \"\"\"Fixture providing mock request data for testing.\"\"\"\n    return {\n        \"action\": \"test_action\",\n        \"data\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\",\n            \"nested\": {\"inner_key\": \"inner_value\"},\n        },\n        \"metadata\": {",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_database",
        "kind": 2,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "def mock_database():\n    \"\"\"Fixture providing a mock database for testing.\"\"\"\n    database = Mock()\n    database.connect.return_value = True\n    database.disconnect.return_value = True\n    database.query.return_value = {\"result\": \"success\"}\n    database.insert.return_value = {\"id\": 1, \"created\": True}\n    database.update.return_value = {\"updated\": True}\n    database.delete.return_value = {\"deleted\": True}\n    return database",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_external_api",
        "kind": 2,
        "importPath": "SERVER.tests.conftest",
        "description": "SERVER.tests.conftest",
        "peekOfCode": "def mock_external_api():\n    \"\"\"Fixture providing a mock external API for testing.\"\"\"\n    api = Mock()\n    api.get.return_value = {\"status\": \"success\", \"data\": \"mock_data\"}\n    api.post.return_value = {\"status\": \"created\", \"id\": \"mock_id\"}\n    api.put.return_value = {\"status\": \"updated\"}\n    api.delete.return_value = {\"status\": \"deleted\"}\n    return api\n# Pytest-specific test classes\nclass TestServerAPIPytest:",
        "detail": "SERVER.tests.conftest",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "SERVER.tests.run_tests",
        "description": "SERVER.tests.run_tests",
        "peekOfCode": "def run_command(cmd, description=\"\"):\n    \"\"\"Run a command and handle errors.\"\"\"\n    print(f\"\\n{'='*60}\")\n    print(f\"Running: {description or ' '.join(cmd)}\")\n    print(f\"{'='*60}\")\n    result = subprocess.run(cmd, capture_output=False)\n    if result.returncode != 0:\n        print(f\"❌ Command failed with exit code {result.returncode}\")\n        return False\n    else:",
        "detail": "SERVER.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "SERVER.tests.run_tests",
        "description": "SERVER.tests.run_tests",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Character Server Test Runner\")\n    parser.add_argument(\"--all\", action=\"store_true\", help=\"Run all tests\")\n    parser.add_argument(\"--unit\", action=\"store_true\", help=\"Run unit tests only\")\n    parser.add_argument(\n        \"--integration\", action=\"store_true\", help=\"Run integration tests only\"\n    )\n    parser.add_argument(\n        \"--performance\", action=\"store_true\", help=\"Run performance tests\"\n    )",
        "detail": "SERVER.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "TestChaosEngine",
        "kind": 6,
        "importPath": "SERVER.tests.test_chaos_engine",
        "description": "SERVER.tests.test_chaos_engine",
        "peekOfCode": "class TestChaosEngine(unittest.TestCase):\n    def setUp(self):\n        self.chaos_engine = ChaosEngine()\n        self.test_narration = \"The adventurers entered the dark cave.\"\n        self.test_char_texts = {\n            \"Alice\": \"I hope we find the treasure.\",\n            \"Bob\": \"Watch out for traps!\",\n        }\n    @patch(\"random.random\")\n    def test_no_major_event_demo_key(self, mock_random):",
        "detail": "SERVER.tests.test_chaos_engine",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerInitialization",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "class TestCharacterServerInitialization:\n    def test_init_actor1_not_in_db(self, mock_db_cs, mock_dependencies_cs):\n        mock_db_cs.get_character.return_value = None # Actor1 not in DB\n        cs = CharacterServer(db=mock_db_cs)\n        mock_db_cs.get_character.assert_called_once_with(\"Actor1\")\n        assert cs.character[\"name\"] == \"Actor1_Default\"\n        mock_db_cs.save_character.assert_called_once()\n        saved_char_args = mock_db_cs.save_character.call_args[1] # kwargs\n        assert saved_char_args[\"Actor_id\"] == \"Actor1\"\n        assert saved_char_args[\"name\"] == \"Actor1_Default\"",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerAsyncInit",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "class TestCharacterServerAsyncInit:\n    @patch(\"character_server.ACTOR1_PYGAME_AUDIO_ENABLED\", True) # Test with pygame enabled\n    async def test_async_init_success_pygame_enabled(self, character_server_bare, mock_db_cs, mock_dependencies_cs):\n        cs = character_server_bare\n        llm_mock, tts_mock = mock_dependencies_cs\n        char_data_for_init = {\n            \"name\": \"TestInitActor1\", \"personality\": \"init_pers\", \"tts\": \"xttsv2\",\n            \"tts_model\": \"xtts_model\", \"reference_audio_filename\": \"ref.wav\",\n            \"Actor_id\": \"Actor1\", \"llm_model\": \"init_llm\", \"language\": \"fr\"\n        }",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerGenerateResponse",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "class TestCharacterServerGenerateResponse:\n    @patch(\"character_server.ACTOR1_PYGAME_AUDIO_ENABLED\", True) # Assume enabled for this test\n    async def test_generate_response_success(self, character_server_initialized, mock_db_cs):\n        cs = character_server_initialized\n        # Ensure llm and tts are the mocked instances from the fixture\n        cs.llm.generate = AsyncMock(return_value=\"Generated LLM response.\")\n        cs.llm.fine_tune = AsyncMock()\n        cs.output_audio = AsyncMock()\n        narration = \"A story starts.\"\n        other_texts = {\"OtherChar\": \"I agree.\"}",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerOutputAudio",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "class TestCharacterServerOutputAudio:\n    @patch(\"character_server.ACTOR1_PYGAME_AUDIO_ENABLED\", True)\n    @patch(\"character_server.os.makedirs\")\n    @patch(\"character_server.os.path.exists\")\n    @patch(\"asyncio.to_thread\", new_callable=AsyncMock)\n    async def test_output_audio_success_pygame_enabled_and_initialized(self, mock_async_to_thread, mock_os_path_exists, mock_os_makedirs, character_server_initialized):\n        cs = character_server_initialized\n        cs.tts.synthesize = AsyncMock(return_value=True)\n        mock_os_path_exists.return_value = True\n        MockPygameMixer.get_init.return_value = True",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "mock_pygame",
        "kind": 2,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "def mock_pygame(monkeypatch):\n    monkeypatch.setattr(\"character_server.pygame.mixer\", MockPygameMixer)\n    monkeypatch.setattr(\"character_server.pygame.time\", MockPygameTime)\n    monkeypatch.setattr(\"character_server.pygame.mixer.Sound\", MockPygameSound) # Mock the Sound class constructor\n    MockPygameMixer.get_init.return_value = False # Default to not initialized\n    MockPygameMixer.init = MagicMock()\n    MockPygameMixer.get_busy = MagicMock(return_value=False) # Default to not busy\n    MockPygameSound.return_value.play = MagicMock() # Mock play method on Sound instance\n    MockPygameTime.Clock.return_value.tick = MagicMock()\n@pytest.fixture",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "mock_dependencies_cs",
        "kind": 2,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "def mock_dependencies_cs(monkeypatch, mock_pygame): # Include mock_pygame here\n    monkeypatch.setattr(\"character_server.LLMEngine\", MockLLMEngineClass)\n    monkeypatch.setattr(\"character_server.TTSManager\", MockTTSManagerClass)\n    MockLLMEngineClass.reset_mock()\n    MockTTSManagerClass.reset_mock()\n    MockPygameMixer.reset_mock()\n    MockPygameTime.reset_mock()\n    MockPygameSound.reset_mock()\n    # Mock instances returned by constructors\n    # These will be used when CharacterServer instantiates them in async_init",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "mock_db_cs",
        "kind": 2,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "def mock_db_cs():\n    db = MagicMock()\n    db.get_character.return_value = None # Default: Actor1 does not exist\n    db.save_character = MagicMock()\n    db.save_training_data = MagicMock()\n    return db\n@pytest.fixture\ndef character_server_bare(mock_db_cs, mock_dependencies_cs):\n    \"\"\"Provides a CharacterServer instance before async_init is called.\"\"\"\n    # Patch run_in_executor to prevent async_init's internal calls during __init__ if any",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "character_server_bare",
        "kind": 2,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "def character_server_bare(mock_db_cs, mock_dependencies_cs):\n    \"\"\"Provides a CharacterServer instance before async_init is called.\"\"\"\n    # Patch run_in_executor to prevent async_init's internal calls during __init__ if any\n    # (though CharacterServer's __init__ is sync)\n    # Also, async_init itself will be explicitly called in tests.\n    cs = CharacterServer(db=mock_db_cs)\n    return cs\n@pytest.fixture\nasync def character_server_initialized(character_server_bare, mock_db_cs, mock_dependencies_cs):\n    \"\"\"Provides a CharacterServer instance that has run a mocked async_init.\"\"\"",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "MockLLMEngineClass",
        "kind": 5,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "MockLLMEngineClass = MagicMock()\nMockTTSManagerClass = MagicMock()\nMockPygameMixer = MagicMock()\nMockPygameTime = MagicMock()\nMockPygameSound = MagicMock()\n@pytest.fixture\ndef mock_pygame(monkeypatch):\n    monkeypatch.setattr(\"character_server.pygame.mixer\", MockPygameMixer)\n    monkeypatch.setattr(\"character_server.pygame.time\", MockPygameTime)\n    monkeypatch.setattr(\"character_server.pygame.mixer.Sound\", MockPygameSound) # Mock the Sound class constructor",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "MockTTSManagerClass",
        "kind": 5,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "MockTTSManagerClass = MagicMock()\nMockPygameMixer = MagicMock()\nMockPygameTime = MagicMock()\nMockPygameSound = MagicMock()\n@pytest.fixture\ndef mock_pygame(monkeypatch):\n    monkeypatch.setattr(\"character_server.pygame.mixer\", MockPygameMixer)\n    monkeypatch.setattr(\"character_server.pygame.time\", MockPygameTime)\n    monkeypatch.setattr(\"character_server.pygame.mixer.Sound\", MockPygameSound) # Mock the Sound class constructor\n    MockPygameMixer.get_init.return_value = False # Default to not initialized",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "MockPygameMixer",
        "kind": 5,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "MockPygameMixer = MagicMock()\nMockPygameTime = MagicMock()\nMockPygameSound = MagicMock()\n@pytest.fixture\ndef mock_pygame(monkeypatch):\n    monkeypatch.setattr(\"character_server.pygame.mixer\", MockPygameMixer)\n    monkeypatch.setattr(\"character_server.pygame.time\", MockPygameTime)\n    monkeypatch.setattr(\"character_server.pygame.mixer.Sound\", MockPygameSound) # Mock the Sound class constructor\n    MockPygameMixer.get_init.return_value = False # Default to not initialized\n    MockPygameMixer.init = MagicMock()",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "MockPygameTime",
        "kind": 5,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "MockPygameTime = MagicMock()\nMockPygameSound = MagicMock()\n@pytest.fixture\ndef mock_pygame(monkeypatch):\n    monkeypatch.setattr(\"character_server.pygame.mixer\", MockPygameMixer)\n    monkeypatch.setattr(\"character_server.pygame.time\", MockPygameTime)\n    monkeypatch.setattr(\"character_server.pygame.mixer.Sound\", MockPygameSound) # Mock the Sound class constructor\n    MockPygameMixer.get_init.return_value = False # Default to not initialized\n    MockPygameMixer.init = MagicMock()\n    MockPygameMixer.get_busy = MagicMock(return_value=False) # Default to not busy",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "MockPygameSound",
        "kind": 5,
        "importPath": "SERVER.tests.test_character_server",
        "description": "SERVER.tests.test_character_server",
        "peekOfCode": "MockPygameSound = MagicMock()\n@pytest.fixture\ndef mock_pygame(monkeypatch):\n    monkeypatch.setattr(\"character_server.pygame.mixer\", MockPygameMixer)\n    monkeypatch.setattr(\"character_server.pygame.time\", MockPygameTime)\n    monkeypatch.setattr(\"character_server.pygame.mixer.Sound\", MockPygameSound) # Mock the Sound class constructor\n    MockPygameMixer.get_init.return_value = False # Default to not initialized\n    MockPygameMixer.init = MagicMock()\n    MockPygameMixer.get_busy = MagicMock(return_value=False) # Default to not busy\n    MockPygameSound.return_value.play = MagicMock() # Mock play method on Sound instance",
        "detail": "SERVER.tests.test_character_server",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerBenchmarks",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server_benchmark",
        "description": "SERVER.tests.test_character_server_benchmark",
        "peekOfCode": "class TestCharacterServerBenchmarks:\n    \"\"\"Benchmark test suite for character server performance validation.\"\"\"\n    def test_character_creation_performance_benchmark(self):\n        \"\"\"Benchmark character creation performance.\"\"\"\n        from test_character_server import MockCharacterServer\n        server = MockCharacterServer()\n        char_data = {\"name\": \"BenchmarkHero\", \"class\": \"Warrior\", \"level\": 1}\n        # Benchmark character creation\n        creation_times = []\n        num_iterations = 1000",
        "detail": "SERVER.tests.test_character_server_benchmark",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerConfiguration",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server_config",
        "description": "SERVER.tests.test_character_server_config",
        "peekOfCode": "class TestCharacterServerConfiguration:\n    \"\"\"Test suite for character server configuration scenarios.\"\"\"\n    def test_character_server_default_configuration(self):\n        \"\"\"Test character server with default configuration.\"\"\"\n        from test_character_server import MockCharacterServer\n        server = MockCharacterServer()\n        # Test default behavior\n        assert server.next_id == 1\n        assert len(server.characters) == 0\n        # Create character with defaults",
        "detail": "SERVER.tests.test_character_server_config",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerIntegrationScenarios",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server_integration",
        "description": "SERVER.tests.test_character_server_integration",
        "peekOfCode": "class TestCharacterServerIntegrationScenarios:\n    \"\"\"Integration test scenarios for character server.\"\"\"\n    @pytest.fixture\n    def temp_storage_path(self):\n        \"\"\"Fixture providing temporary storage path for integration tests.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            yield temp_dir\n    @pytest.fixture\n    def integrated_character_server(self, temp_storage_path):\n        \"\"\"Fixture providing character server with simulated external integrations.\"\"\"",
        "detail": "SERVER.tests.test_character_server_integration",
        "documentation": {}
    },
    {
        "label": "TestCharacterServerPerformanceIntegration",
        "kind": 6,
        "importPath": "SERVER.tests.test_character_server_integration",
        "description": "SERVER.tests.test_character_server_integration",
        "peekOfCode": "class TestCharacterServerPerformanceIntegration:\n    \"\"\"Performance integration tests for character server.\"\"\"\n    def test_character_server_load_performance(self):\n        \"\"\"Test character server performance under load.\"\"\"\n        server = MockCharacterServer()\n        # Performance test parameters\n        num_characters = 1000\n        batch_size = 100\n        # Measure creation performance\n        start_time = time.time()",
        "detail": "SERVER.tests.test_character_server_integration",
        "documentation": {}
    },
    {
        "label": "TestConfigSchema",
        "kind": 6,
        "importPath": "SERVER.tests.test_config_schema",
        "description": "SERVER.tests.test_config_schema",
        "peekOfCode": "class TestConfigSchema(unittest.TestCase):\n    \"\"\"Test configuration against predefined schemas.\"\"\"\n    def setUp(self):\n        \"\"\"Set up schema definitions.\"\"\"\n        self.config_schema = {\n            \"type\": \"object\",\n            \"properties\": {\n                \"database\": {\n                    \"type\": \"object\",\n                    \"properties\": {",
        "detail": "SERVER.tests.test_config_schema",
        "documentation": {}
    },
    {
        "label": "TestCSM",
        "kind": 6,
        "importPath": "SERVER.tests.test_csm",
        "description": "SERVER.tests.test_csm",
        "peekOfCode": "class TestCSM:\n    \"\"\"Comprehensive unit tests for the CSM (Character Story Manager) class.\n    Testing Framework: pytest\n    This test suite covers:\n    - Happy path scenarios\n    - Edge cases and boundary conditions\n    - Failure modes and error handling\n    - Concurrent processing\n    - Component integration\n    \"\"\"",
        "detail": "SERVER.tests.test_csm",
        "documentation": {}
    },
    {
        "label": "TestDatabaseInitialization",
        "kind": 6,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "class TestDatabaseInitialization:\n    def test_db_creation_and_schema(self, db):\n        \"\"\"Test that the database is created and tables exist.\"\"\"\n        conn = db._get_conn()\n        cursor = conn.cursor()\n        tables_to_check = [\"characters\", \"story_log\", \"training_data\", \"client_tokens\"]\n        for table_name in tables_to_check:\n            cursor.execute(f\"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}';\")\n            assert cursor.fetchone() is not None, f\"Table {table_name} should exist.\"\n        # Check WAL mode",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestCharacterManagement",
        "kind": 6,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "class TestCharacterManagement:\n    def test_save_and_get_character(self, db):\n        \"\"\"Test saving a new character and retrieving it.\"\"\"\n        db.save_character(\n            name=\"Hero\", personality=\"Brave\", goals=\"Save world\", backstory=\"Mysterious\",\n            tts=\"gtts\", tts_model=\"en\", reference_audio_filename=None,\n            Actor_id=\"Actor2\", llm_model=\"tinyllama\"\n        )\n        char = db.get_character(\"Actor2\")\n        assert char is not None",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestStoryLogManagement",
        "kind": 6,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "class TestStoryLogManagement:\n    def test_save_story_entry_and_get_history(self, db):\n        db.save_story_entry(\"Narrator\", \"Chapter 1 begins.\", \"narrator_audio_ch1.wav\")\n        db.save_story_entry(\"Hero\", \"I am ready!\", None) # No audio for character here\n        history = db.get_story_history()\n        assert len(history) == 2\n        assert history[0][\"speaker\"] == \"Narrator\"\n        assert history[0][\"text\"] == \"Chapter 1 begins.\"\n        assert history[0][\"narrator_audio_path\"] == \"narrator_audio_ch1.wav\"\n        assert history[1][\"speaker\"] == \"Hero\"",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestTrainingDataManagement",
        "kind": 6,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "class TestTrainingDataManagement:\n    def test_save_and_get_training_data(self, db):\n        # Need a character for foreign key constraint\n        db.save_character(name=\"Trainer\", Actor_id=\"TrainerActor\", personality=\"Trainer\", goals=\"Train\", backstory=\"Trainer\", tts=\"gtts\", tts_model=\"en\", reference_audio_filename=None, llm_model=\"test\")\n        dataset1 = {\"input\": \"Hello\", \"output\": \"Hi there!\"}\n        dataset2 = {\"input\": \"How are you?\", \"output\": \"I am fine.\"}\n        db.save_training_data(dataset1, \"TrainerActor\")\n        db.save_training_data(dataset2, \"TrainerActor\")\n        data = db.get_training_data_for_Actor(\"TrainerActor\")\n        assert len(data) == 2",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestClientTokenManagement",
        "kind": 6,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "class TestClientTokenManagement:\n    ACTOR_ID = \"Client1\"\n    TOKEN = \"test_token_123\"\n    def setup_method(self, method):\n        \"\"\"Ensure Actor1 exists for some tests that might depend on it implicitly.\"\"\"\n        # This is a bit of a workaround for tests that might interact with Actor1 indirectly\n        # or if save_client_token for Actor1 needs Actor1 character to exist.\n        # db_instance = Database(TEST_DB_PATH) # Get a fresh instance if needed\n        # if not db_instance.get_character(\"Actor1\"):\n        #     db_instance.save_character(name=\"ServerChar\", personality=\"Host\", goals=\"Manage story\", backstory=\"Server's own character\",",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestDatabaseConnection",
        "kind": 6,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "class TestDatabaseConnection:\n    def test_close_connection(self, db):\n        \"\"\"Test that the database connection can be closed.\"\"\"\n        # Connection is typically established in fixture.\n        # We can try to close it and then attempt an operation that would fail.\n        conn_before_close = db._thread_local.conn\n        db.close()\n        assert not hasattr(db._thread_local, 'conn')\n        # Verify that a new connection is made if _get_conn is called after close\n        # This implicitly tests that the old connection was indeed removed from _thread_local",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 2,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "def db():\n    \"\"\"Fixture to create and tear down an in-memory database for each test.\"\"\"\n    # Patch threading.local to simplify testing single-threaded scenarios\n    # or to ensure connection is not shared unexpectedly across test parameterizations if an issue arises.\n    # For basic sqlite3 :memory:, direct use might be fine.\n    # If issues with _thread_local occur, this is where to patch it.\n    # with patch('threading.local') as mock_thread_local:\n    #     mock_thread_local.return_value = MagicMock()\n    database = Database(TEST_DB_PATH)\n    yield database",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TEST_DB_PATH",
        "kind": 5,
        "importPath": "SERVER.tests.test_database",
        "description": "SERVER.tests.test_database",
        "peekOfCode": "TEST_DB_PATH = \":memory:\"\n@pytest.fixture\ndef db():\n    \"\"\"Fixture to create and tear down an in-memory database for each test.\"\"\"\n    # Patch threading.local to simplify testing single-threaded scenarios\n    # or to ensure connection is not shared unexpectedly across test parameterizations if an issue arises.\n    # For basic sqlite3 :memory:, direct use might be fine.\n    # If issues with _thread_local occur, this is where to patch it.\n    # with patch('threading.local') as mock_thread_local:\n    #     mock_thread_local.return_value = MagicMock()",
        "detail": "SERVER.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestServerLLMEngineInitialization",
        "kind": 6,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "class TestServerLLMEngineInitialization:\n    # ... (Assuming these tests are similar to client and were correct)\n    def test_init_paths_and_defaults(self, server_llm_engine_no_init, mock_db_llm):\n        engine = server_llm_engine_no_init\n        assert engine.db == mock_db_llm\n        # ... rest of assertions\n@pytest.mark.asyncio\nclass TestServerLLMEngineGenerate:\n    # ... (Assuming these tests are similar to client and were correct)\n    async def test_generate_success(self, server_llm_engine_no_init):",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "TestServerLLMEngineGenerate",
        "kind": 6,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "class TestServerLLMEngineGenerate:\n    # ... (Assuming these tests are similar to client and were correct)\n    async def test_generate_success(self, server_llm_engine_no_init):\n        engine = server_llm_engine_no_init\n        # ... rest of test\n@pytest.mark.asyncio\nclass TestServerLLMEngineFineTune:\n    @patch(\"asyncio.to_thread\", new_callable=AsyncMock)\n    async def test_fine_tune_actor1_success(self, mock_to_thread, server_llm_engine_no_init, mock_db_llm):\n        engine = server_llm_engine_no_init",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "TestServerLLMEngineFineTune",
        "kind": 6,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "class TestServerLLMEngineFineTune:\n    @patch(\"asyncio.to_thread\", new_callable=AsyncMock)\n    async def test_fine_tune_actor1_success(self, mock_to_thread, server_llm_engine_no_init, mock_db_llm):\n        engine = server_llm_engine_no_init\n        engine.is_initialized = True\n        engine.model = MockGetPeftModel.return_value # This is a PeftModel mock\n        engine.tokenizer = MagicMock(eos_token=\"<EOS>\")",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "reset_global_mocks_llm_server",
        "kind": 2,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "def reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()\n    if hasattr(MockPeftModel, 'save_pretrained'):\n        MockPeftModel.save_pretrained.reset_mock()\n    MockGetPeftModel.reset_mock()\n    MockLoraConfig.reset_mock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "mock_server_dependencies_llm",
        "kind": 2,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "def mock_server_dependencies_llm(monkeypatch): # Renamed\n    monkeypatch.setattr(\"SERVER.src.llm_engine.AutoModelForCausalLM\", MockAutoModelForCausalLM)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.AutoTokenizer\", MockAutoTokenizer)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.BitsAndBytesConfig\", MockBitsAndBytesConfig)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.prepare_model_for_kbit_training\", MockPrepareModelForKbitTraining)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.PeftModel\", MockPeftModel)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.LoraConfig\", MockLoraConfig)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.get_peft_model\", MockGetPeftModel)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.torch\", MockTorch)\n    monkeypatch.setattr(\"SERVER.src.llm_engine.Dataset\", MockDataset)",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "mock_db_llm",
        "kind": 2,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "def mock_db_llm(): # Renamed\n    db = MagicMock()\n    db.get_training_data_for_Actor.return_value = []\n    return db\n@pytest.fixture\ndef server_llm_engine_no_init(mock_server_dependencies_llm, mock_db_llm): # Renamed\n    with patch.object(LLMEngine, \"_load_model\", MagicMock()):\n        engine = LLMEngine(model_name=\"server_test_model\", db=mock_db_llm)\n        engine.is_initialized = False\n    return engine",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "server_llm_engine_no_init",
        "kind": 2,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "def server_llm_engine_no_init(mock_server_dependencies_llm, mock_db_llm): # Renamed\n    with patch.object(LLMEngine, \"_load_model\", MagicMock()):\n        engine = LLMEngine(model_name=\"server_test_model\", db=mock_db_llm)\n        engine.is_initialized = False\n    return engine\n# --- Test Classes (Initialization and Generate are similar to client, adapt if needed) ---\nclass TestServerLLMEngineInitialization:\n    # ... (Assuming these tests are similar to client and were correct)\n    def test_init_paths_and_defaults(self, server_llm_engine_no_init, mock_db_llm):\n        engine = server_llm_engine_no_init",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockPeftModel",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockPeftModel = MagicMock()\nMockAutoModelForCausalLM = MagicMock()\nMockAutoTokenizer = MagicMock()\nMockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockAutoModelForCausalLM",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockAutoModelForCausalLM = MagicMock()\nMockAutoTokenizer = MagicMock()\nMockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockAutoTokenizer",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockAutoTokenizer = MagicMock()\nMockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockBitsAndBytesConfig",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockBitsAndBytesConfig = MagicMock()\nMockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockPrepareModelForKbitTraining",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockPrepareModelForKbitTraining = MagicMock()\nMockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockLoraConfig",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockLoraConfig = MagicMock()\nMockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockGetPeftModel",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockGetPeftModel = MagicMock()\nMockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockDataset",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockDataset = MagicMock()\nMockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockTrainer",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockTrainer = MagicMock()\nMockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockTrainingArguments",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockTrainingArguments = MagicMock()\nMockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockTorch",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockTorch = MagicMock()\nMockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()\n    if hasattr(MockPeftModel, 'save_pretrained'):",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "MockDataCollatorForLanguageModeling",
        "kind": 5,
        "importPath": "SERVER.tests.test_llm_engine",
        "description": "SERVER.tests.test_llm_engine",
        "peekOfCode": "MockDataCollatorForLanguageModeling = MagicMock()\n@pytest.fixture(autouse=True)\ndef reset_global_mocks_llm_server(): # Renamed for server\n    MockAutoModelForCausalLM.from_pretrained.reset_mock()\n    MockAutoTokenizer.from_pretrained.reset_mock()\n    MockBitsAndBytesConfig.reset_mock()\n    MockPrepareModelForKbitTraining.reset_mock()\n    MockPeftModel.from_pretrained.reset_mock()\n    if hasattr(MockPeftModel, 'save_pretrained'):\n        MockPeftModel.save_pretrained.reset_mock()",
        "detail": "SERVER.tests.test_llm_engine",
        "documentation": {}
    },
    {
        "label": "TestNarratorInitialization",
        "kind": 6,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "class TestNarratorInitialization:\n    \"\"\"Test cases for Narrator class initialization.\"\"\"\n    @patch(\"narrator.load_model\")\n    @patch(\"narrator.Pipeline\")\n    def test_init_default_model_size(self, mock_pipeline, mock_load_model):\n        \"\"\"Test initialization with default model size.\"\"\"\n        mock_load_model.return_value = Mock()\n        narrator = Narrator()\n        mock_load_model.assert_called_once()\n        assert narrator.stt_model is not None",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "TestNarratorProcessNarration",
        "kind": 6,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "class TestNarratorProcessNarration:\n    \"\"\"Test cases for the process_narration method.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n        self.test_audio_file = os.path.join(self.temp_dir, \"test_audio.wav\")\n        # Create a dummy audio file\n        with open(self.test_audio_file, \"wb\") as f:\n            f.write(b\"dummy audio content\")\n    def teardown_method(self):",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "TestNarratorCorrectLastTranscription",
        "kind": 6,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "class TestNarratorCorrectLastTranscription:\n    \"\"\"Test cases for the correct_last_transcription method.\"\"\"\n    @patch(\"narrator.load_model\")\n    @patch(\"narrator.Pipeline\")\n    def test_correct_last_transcription(self, mock_pipeline, mock_load_model):\n        \"\"\"Test correcting the last transcription.\"\"\"\n        mock_load_model.return_value = Mock()\n        narrator = Narrator()\n        narrator.last_transcription = \"Original transcription\"\n        narrator.correct_last_transcription(\"Corrected transcription\")",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "TestNarratorEdgeCases",
        "kind": 6,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "class TestNarratorEdgeCases:\n    \"\"\"Test edge cases and error conditions.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n    def teardown_method(self):\n        \"\"\"Clean up test fixtures.\"\"\"\n        shutil.rmtree(self.temp_dir, ignore_errors=True)\n    @patch(\"narrator.load_model\")\n    @patch(\"narrator.Pipeline\")",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "TestNarratorIntegration",
        "kind": 6,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "class TestNarratorIntegration:\n    \"\"\"Integration test cases.\"\"\"\n    def setup_method(self):\n        \"\"\"Set up integration test fixtures.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n    def teardown_method(self):\n        \"\"\"Clean up integration test fixtures.\"\"\"\n        shutil.rmtree(self.temp_dir, ignore_errors=True)\n    @patch(\"narrator.load_model\")\n    @patch(\"narrator.Pipeline\")",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "test_narrator_initialization_different_models",
        "kind": 2,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "def test_narrator_initialization_different_models(\n    mock_pipeline, mock_load_model, model_size\n):\n    \"\"\"Test narrator initialization with different model sizes.\"\"\"\n    mock_load_model.return_value = Mock()\n    narrator = Narrator(model_size=model_size)\n    mock_load_model.assert_called_once_with(model_size)\n    assert narrator.stt_model is not None\n@pytest.mark.parametrize(\n    \"text_input,expected_length\",",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "sys.modules[\"whisper\"]",
        "kind": 5,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "sys.modules[\"whisper\"] = Mock()\nsys.modules[\"pyannote\"] = Mock()\nsys.modules[\"pyannote.audio\"] = Mock()\ntry:\n    from narrator import Narrator\nexcept ImportError as e:\n    pytest.skip(f\"Narrator module not found: {e}\", allow_module_level=True)\nclass TestNarratorInitialization:\n    \"\"\"Test cases for Narrator class initialization.\"\"\"\n    @patch(\"narrator.load_model\")",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "sys.modules[\"pyannote\"]",
        "kind": 5,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "sys.modules[\"pyannote\"] = Mock()\nsys.modules[\"pyannote.audio\"] = Mock()\ntry:\n    from narrator import Narrator\nexcept ImportError as e:\n    pytest.skip(f\"Narrator module not found: {e}\", allow_module_level=True)\nclass TestNarratorInitialization:\n    \"\"\"Test cases for Narrator class initialization.\"\"\"\n    @patch(\"narrator.load_model\")\n    @patch(\"narrator.Pipeline\")",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "sys.modules[\"pyannote.audio\"]",
        "kind": 5,
        "importPath": "SERVER.tests.test_narrator",
        "description": "SERVER.tests.test_narrator",
        "peekOfCode": "sys.modules[\"pyannote.audio\"] = Mock()\ntry:\n    from narrator import Narrator\nexcept ImportError as e:\n    pytest.skip(f\"Narrator module not found: {e}\", allow_module_level=True)\nclass TestNarratorInitialization:\n    \"\"\"Test cases for Narrator class initialization.\"\"\"\n    @patch(\"narrator.load_model\")\n    @patch(\"narrator.Pipeline\")\n    def test_init_default_model_size(self, mock_pipeline, mock_load_model):",
        "detail": "SERVER.tests.test_narrator",
        "documentation": {}
    },
    {
        "label": "TestServerAPI",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_api",
        "description": "SERVER.tests.test_server_api",
        "peekOfCode": "class TestServerAPI(unittest.TestCase):\n    \"\"\"Comprehensive unit tests for ServerAPI class.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test fixtures before each test method.\"\"\"\n        self.test_config = ServerConfig(\n            {\n                \"host\": \"localhost\",\n                \"port\": 8080,\n                \"debug\": True,\n                \"max_connections\": 10,",
        "detail": "SERVER.tests.test_server_api",
        "documentation": {}
    },
    {
        "label": "TestServerConfig",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_api",
        "description": "SERVER.tests.test_server_api",
        "peekOfCode": "class TestServerConfig(unittest.TestCase):\n    \"\"\"Unit tests for ServerConfig class.\"\"\"\n    def test_config_initialization_empty(self):\n        \"\"\"Test ServerConfig initialization with empty config.\"\"\"\n        config = ServerConfig({})\n        self.assertIsInstance(config.config, dict)\n    def test_config_initialization_none(self):\n        \"\"\"Test ServerConfig initialization with None.\"\"\"\n        config = ServerConfig(None)\n        self.assertIsInstance(config.config, dict)",
        "detail": "SERVER.tests.test_server_api",
        "documentation": {}
    },
    {
        "label": "TestAPIResponse",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_api",
        "description": "SERVER.tests.test_server_api",
        "peekOfCode": "class TestAPIResponse(unittest.TestCase):\n    \"\"\"Unit tests for APIResponse class.\"\"\"\n    def test_response_initialization_defaults(self):\n        \"\"\"Test APIResponse initialization with defaults.\"\"\"\n        response = APIResponse()\n        self.assertIsNone(response.data)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.message, \"\")\n    def test_response_initialization_with_data(self):\n        \"\"\"Test APIResponse initialization with data.\"\"\"",
        "detail": "SERVER.tests.test_server_api",
        "documentation": {}
    },
    {
        "label": "TestAPIError",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_api",
        "description": "SERVER.tests.test_server_api",
        "peekOfCode": "class TestAPIError(unittest.TestCase):\n    \"\"\"Unit tests for APIError class.\"\"\"\n    def test_api_error_initialization_defaults(self):\n        \"\"\"Test APIError initialization with defaults.\"\"\"\n        error = APIError(\"Test error\")\n        self.assertEqual(error.message, \"Test error\")\n        self.assertEqual(error.status_code, 500)\n        self.assertEqual(str(error), \"Test error\")\n    def test_api_error_initialization_with_status(self):\n        \"\"\"Test APIError initialization with status code.\"\"\"",
        "detail": "SERVER.tests.test_server_api",
        "documentation": {}
    },
    {
        "label": "TestRequestHandler",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_api",
        "description": "SERVER.tests.test_server_api",
        "peekOfCode": "class TestRequestHandler(unittest.TestCase):\n    \"\"\"Unit tests for RequestHandler class.\"\"\"\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.config = ServerConfig()\n        self.handler = RequestHandler(self.config)\n    def test_handler_initialization(self):\n        \"\"\"Test RequestHandler initialization.\"\"\"\n        self.assertIsInstance(self.handler.config, ServerConfig)\n        self.assertIsInstance(self.handler.middleware, list)",
        "detail": "SERVER.tests.test_server_api",
        "documentation": {}
    },
    {
        "label": "TestServerAPIIntegration",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_api",
        "description": "SERVER.tests.test_server_api",
        "peekOfCode": "class TestServerAPIIntegration(unittest.TestCase):\n    \"\"\"Integration tests for Server API components.\"\"\"\n    def setUp(self):\n        \"\"\"Set up integration test fixtures.\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n        self.config_file = os.path.join(self.temp_dir, \"test_config.json\")\n    def tearDown(self):\n        \"\"\"Clean up integration test fixtures.\"\"\"\n        import shutil\n        if os.path.exists(self.temp_dir):",
        "detail": "SERVER.tests.test_server_api",
        "documentation": {}
    },
    {
        "label": "TestServerAPIPerformance",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_api",
        "description": "SERVER.tests.test_server_api",
        "peekOfCode": "class TestServerAPIPerformance(unittest.TestCase):\n    \"\"\"Performance tests for Server API.\"\"\"\n    def setUp(self):\n        \"\"\"Set up performance test fixtures.\"\"\"\n        self.config = ServerConfig(\n            {\"host\": \"localhost\", \"port\": 8083, \"max_connections\": 100}\n        )\n        self.server = ServerAPI(self.config)\n    def test_high_volume_requests(self):\n        \"\"\"Test server performance with high volume of requests.\"\"\"",
        "detail": "SERVER.tests.test_server_api",
        "documentation": {}
    },
    {
        "label": "TestServerConfigComprehensive",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_config",
        "description": "SERVER.tests.test_server_config",
        "peekOfCode": "class TestServerConfigComprehensive(unittest.TestCase):\n    \"\"\"Comprehensive tests for ServerConfig class.\"\"\"\n    def test_config_validation_valid_port(self):\n        \"\"\"Test configuration validation with valid port.\"\"\"\n        config = ServerConfig({\"port\": 8080})\n        self.assertTrue(config.validate())\n    def test_config_validation_invalid_port_zero(self):\n        \"\"\"Test configuration validation with zero port.\"\"\"\n        config = ServerConfig({\"port\": 0})\n        with self.assertRaises(ConfigError):",
        "detail": "SERVER.tests.test_server_config",
        "documentation": {}
    },
    {
        "label": "TestServerAPIPerformanceBenchmarks",
        "kind": 6,
        "importPath": "SERVER.tests.test_server_performance",
        "description": "SERVER.tests.test_server_performance",
        "peekOfCode": "class TestServerAPIPerformanceBenchmarks(unittest.TestCase):\n    \"\"\"Performance benchmarking tests for Server API.\"\"\"\n    def setUp(self):\n        \"\"\"Set up performance test environment.\"\"\"\n        self.config = ServerConfig(\n            {\"host\": \"localhost\", \"port\": 8084, \"max_connections\": 1000, \"timeout\": 5}\n        )\n        self.server = ServerAPI(self.config)\n    def tearDown(self):\n        \"\"\"Clean up performance test environment.\"\"\"",
        "detail": "SERVER.tests.test_server_performance",
        "documentation": {}
    },
    {
        "label": "TestServerTTSManagerInitialization",
        "kind": 6,
        "importPath": "SERVER.tests.test_tts_manager",
        "description": "SERVER.tests.test_tts_manager",
        "peekOfCode": "class TestServerTTSManagerInitialization:\n    def test_init_gtts_service_success(self, server_tts_manager_gtts_success):\n        manager, mock_gtts_lib, _ = server_tts_manager_gtts_success\n        assert manager.service_name == \"gtts\"\n        assert manager.language == \"en\"\n        assert manager.is_initialized\n        assert manager.tts_instance == manager._gtts_synthesize_blocking\n    def test_init_gtts_service_failure_lib_missing(self, monkeypatch):\n        monkeypatch.setattr(\"SERVER.src.tts_manager.gtts\", None)\n        with patch(\"os.makedirs\"), patch.dict(os.environ, {\"TTS_HOME\": MODELS_PATH}):",
        "detail": "SERVER.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "TestServerTTSManagerSynthesizeAsync",
        "kind": 6,
        "importPath": "SERVER.tests.test_tts_manager",
        "description": "SERVER.tests.test_tts_manager",
        "peekOfCode": "class TestServerTTSManagerSynthesizeAsync:\n    @patch(\"SERVER.src.tts_manager.os.makedirs\")\n    @patch(\"SERVER.src.tts_manager.os.path.exists\")\n    @patch(\"SERVER.src.tts_manager.os.path.getsize\")\n    @patch(\"SERVER.src.tts_manager.asyncio.to_thread\")\n    async def test_synthesize_gtts_success(self, mock_to_thread, mock_getsize, mock_exists, mock_makedirs, server_tts_manager_gtts_success):\n        manager, _, _ = server_tts_manager_gtts_success\n        mock_exists.return_value = True\n        mock_getsize.return_value = 100\n        test_text = \"Hello gTTS Server\"",
        "detail": "SERVER.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "TestServerTTSManagerStaticMethods",
        "kind": 6,
        "importPath": "SERVER.tests.test_tts_manager",
        "description": "SERVER.tests.test_tts_manager",
        "peekOfCode": "class TestServerTTSManagerStaticMethods:\n    @patch(\"SERVER.src.tts_manager.gtts\", MagicMock())\n    @patch(\"SERVER.src.tts_manager.CoquiTTS\", MagicMock())\n    def test_list_services_both_available(self):\n        services = TTSManager.list_services()\n        assert \"gtts\" in services\n        assert \"xttsv2\" in services\n    @patch(\"SERVER.src.tts_manager.gtts\", None)\n    @patch(\"SERVER.src.tts_manager.CoquiTTS\", MagicMock())\n    def test_list_services_only_xttsv2_available(self):",
        "detail": "SERVER.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "TestServerTTSManagerPrivateHelpers",
        "kind": 6,
        "importPath": "SERVER.tests.test_tts_manager",
        "description": "SERVER.tests.test_tts_manager",
        "peekOfCode": "class TestServerTTSManagerPrivateHelpers:\n    @patch(\"SERVER.src.tts_manager.os.makedirs\")\n    def test_get_or_download_model_blocking(self, mock_makedirs, monkeypatch):\n        monkeypatch.setattr(\"SERVER.src.tts_manager.gtts\", MagicMock())\n        with patch.dict(os.environ, {\"TTS_HOME\": MODELS_PATH}):\n            manager = TTSManager(tts_service_name=\"gtts\")\n        result_xtts = manager._get_or_download_model_blocking(\"xttsv2\", \"server_xtts_model\")\n        assert result_xtts == \"server_xtts_model\"\n        mock_makedirs.assert_any_call(os.path.join(SERVER_TTS_MODELS_PATH, \"xttsv2\"), exist_ok=True)\n        result_gtts = manager._get_or_download_model_blocking(\"gtts\", \"en\")",
        "detail": "SERVER.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "server_tts_manager_gtts_success",
        "kind": 2,
        "importPath": "SERVER.tests.test_tts_manager",
        "description": "SERVER.tests.test_tts_manager",
        "peekOfCode": "def server_tts_manager_gtts_success(monkeypatch):\n    \"\"\"Fixture for server TTSManager with gTTS mocked for success.\"\"\"\n    mock_gtts_lib = MagicMock()\n    monkeypatch.setattr(\"SERVER.src.tts_manager.gtts\", mock_gtts_lib)\n    # Mock os.makedirs called during __init__\n    with patch(\"os.makedirs\") as mock_os_makedirs:\n        # Mock os.environ if TTS_HOME is critical for gTTS part (it's more for Coqui)\n        with patch.dict(os.environ, {\"TTS_HOME\": MODELS_PATH}):\n             manager = TTSManager(tts_service_name=\"gtts\", language=\"en\")\n    return manager, mock_gtts_lib, mock_os_makedirs",
        "detail": "SERVER.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "server_tts_manager_xttsv2_success",
        "kind": 2,
        "importPath": "SERVER.tests.test_tts_manager",
        "description": "SERVER.tests.test_tts_manager",
        "peekOfCode": "def server_tts_manager_xttsv2_success(monkeypatch):\n    \"\"\"Fixture for server TTSManager with CoquiTTS mocked for success.\"\"\"\n    mock_coqui_tts_lib = MagicMock()\n    mock_coqui_tts_instance = MagicMock()\n    mock_coqui_tts_lib.return_value = mock_coqui_tts_instance\n    monkeypatch.setattr(\"SERVER.src.tts_manager.CoquiTTS\", mock_coqui_tts_lib)\n    mock_torch = MagicMock()\n    mock_torch.cuda.is_available.return_value = False # Assume CPU\n    monkeypatch.setattr(\"SERVER.src.tts_manager.torch\", mock_torch)\n    with patch(\"os.makedirs\") as mock_os_makedirs:",
        "detail": "SERVER.tests.test_tts_manager",
        "documentation": {}
    },
    {
        "label": "TestWebSocketConnectionManager",
        "kind": 6,
        "importPath": "SERVER.tests.test_websocket_manager",
        "description": "SERVER.tests.test_websocket_manager",
        "peekOfCode": "class TestWebSocketConnectionManager:\n    async def test_init(self, manager: WebSocketConnectionManager):\n        assert manager.active_connections == {}\n    async def test_connect(self, manager: WebSocketConnectionManager, mock_websocket: AsyncMock):\n        actor_id = \"actor1\"\n        await manager.connect(mock_websocket, actor_id)\n        mock_websocket.accept.assert_awaited_once()\n        assert actor_id in manager.active_connections\n        assert manager.active_connections[actor_id] == mock_websocket\n        assert len(manager.active_connections) == 1",
        "detail": "SERVER.tests.test_websocket_manager",
        "documentation": {}
    },
    {
        "label": "manager",
        "kind": 2,
        "importPath": "SERVER.tests.test_websocket_manager",
        "description": "SERVER.tests.test_websocket_manager",
        "peekOfCode": "def manager():\n    \"\"\"Fixture to create a new WebSocketConnectionManager instance for each test.\"\"\"\n    # Reset the global one if it's being imported and potentially modified elsewhere,\n    # though for class unit tests, instantiating directly is cleaner.\n    # For now, let's assume we test a fresh instance.\n    return WebSocketConnectionManager()\n@pytest.fixture\ndef mock_websocket():\n    \"\"\"Fixture to create a mock WebSocket object.\"\"\"\n    ws = AsyncMock()",
        "detail": "SERVER.tests.test_websocket_manager",
        "documentation": {}
    },
    {
        "label": "mock_websocket",
        "kind": 2,
        "importPath": "SERVER.tests.test_websocket_manager",
        "description": "SERVER.tests.test_websocket_manager",
        "peekOfCode": "def mock_websocket():\n    \"\"\"Fixture to create a mock WebSocket object.\"\"\"\n    ws = AsyncMock()\n    ws.accept = AsyncMock()\n    ws.send_json = AsyncMock()\n    ws.close = AsyncMock()\n    return ws\n@pytest.mark.asyncio\nclass TestWebSocketConnectionManager:\n    async def test_init(self, manager: WebSocketConnectionManager):",
        "detail": "SERVER.tests.test_websocket_manager",
        "documentation": {}
    },
    {
        "label": "run_gradio",
        "kind": 2,
        "importPath": "SERVER.main",
        "description": "SERVER.main",
        "peekOfCode": "def run_gradio():\n    \"\"\"\n    Starts the Gradio server by launching the Gradio interface in a separate process.\n    \"\"\"\n    setup_logging()  # Setup logging for the Gradio process\n    logger = get_logger()\n    logger.info(\"Starting Gradio interface process...\")\n    launch_interface()\ndef run_fastapi() -> None:\n    \"\"\"",
        "detail": "SERVER.main",
        "documentation": {}
    },
    {
        "label": "run_fastapi",
        "kind": 2,
        "importPath": "SERVER.main",
        "description": "SERVER.main",
        "peekOfCode": "def run_fastapi() -> None:\n    \"\"\"\n    Starts the FastAPI server using Uvicorn on host 0.0.0.0 and port 8000 with info-level logging.\n    \"\"\"\n    setup_logging()  # Setup logging for the FastAPI process\n    logger = get_logger()\n    logger.info(\"Starting FastAPI server process...\")\n    uvicorn.run(server_api_app, host=\"0.0.0.0\", port=8000, log_level=\"info\")\ndef terminate_process(proc: multiprocessing.Process, name: str) -> None:\n    \"\"\"",
        "detail": "SERVER.main",
        "documentation": {}
    },
    {
        "label": "terminate_process",
        "kind": 2,
        "importPath": "SERVER.main",
        "description": "SERVER.main",
        "peekOfCode": "def terminate_process(proc: multiprocessing.Process, name: str) -> None:\n    \"\"\"\n    Attempt to gracefully terminate a multiprocessing process, forcefully killing it if necessary.\n    Parameters:\n        proc (multiprocessing.Process): The process to terminate.\n        name (str): A human-readable name for the process, used in status messages.\n    \"\"\"\n    logger = get_logger()\n    if proc.is_alive():\n        logger.info(f\"Terminating {name} (PID: {proc.pid})...\")",
        "detail": "SERVER.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "SERVER.main",
        "description": "SERVER.main",
        "peekOfCode": "def main():\n    \"\"\"\n    Start and manage Gradio and FastAPI servers in separate processes with robust lifecycle and shutdown handling.\n    This function initializes multiprocessing with the 'spawn' method for cross-platform compatibility, launches the Gradio and FastAPI servers in independent processes, and monitors their status. It registers signal handlers to ensure both servers are terminated gracefully on SIGINT or SIGTERM, and handles unexpected process exits or exceptions by shutting down both servers before exiting.\n    \"\"\"\n    # Call setup_logging here for the main process\n    setup_logging()\n    logger = get_logger()\n    # Use 'spawn' for Windows safety and cross-platform compatibility\n    multiprocessing.set_start_method(\"spawn\", force=True)  # Must be called only once",
        "detail": "SERVER.main",
        "documentation": {}
    },
    {
        "label": "initialize_tts",
        "kind": 2,
        "importPath": "voice_assistant.tts_service",
        "description": "voice_assistant.tts_service",
        "peekOfCode": "def initialize_tts():\n    global tts_instance\n    print(f\"TTS Service: Initializing with configured device: {TTS_DEVICE}\") # Added logging\n    # TTS_MODEL_NAME is loaded from .env (set during setup_tts) or defaults from config.py\n    if not TTS_MODEL_NAME:\n        print(\"Error: TTS model identifier is not configured. Cannot initialize TTS.\")\n        raise RuntimeError(\"TTS model not configured.\")\n    try:\n        # --- Add this block to handle PyTorch 2.6+ weights_only=True issue for XTTS ---\n        # torch is already imported at the top of this file",
        "detail": "voice_assistant.tts_service",
        "documentation": {}
    },
    {
        "label": "text_to_speech",
        "kind": 2,
        "importPath": "voice_assistant.tts_service",
        "description": "voice_assistant.tts_service",
        "peekOfCode": "def text_to_speech(text: str): # Sync version\n    if tts_instance is None:\n        raise RuntimeError(\"TTS not initialized\")\n    # Replicate XTTS logic for sync version (simplified, assumes tts_instance is already XTTS if configured)\n    tts_call_kwargs = {\"text\": text, \"speed\": TTS_SPEED_RATE}\n    if \"xtts\" in TTS_MODEL_NAME.lower(): # Use configured model name\n        tts_call_kwargs[\"language\"] = \"en\"\n        if os.path.exists(DEFAULT_SPEAKER_WAV_PATH_TTS_SERVICE): # Check speaker wav\n            tts_call_kwargs[\"speaker_wav\"] = DEFAULT_SPEAKER_WAV_PATH_TTS_SERVICE\n    audio = tts_instance.tts(**tts_call_kwargs)",
        "detail": "voice_assistant.tts_service",
        "documentation": {}
    },
    {
        "label": "tts_instance",
        "kind": 5,
        "importPath": "voice_assistant.tts_service",
        "description": "voice_assistant.tts_service",
        "peekOfCode": "tts_instance = None\ndef initialize_tts():\n    global tts_instance\n    print(f\"TTS Service: Initializing with configured device: {TTS_DEVICE}\") # Added logging\n    # TTS_MODEL_NAME is loaded from .env (set during setup_tts) or defaults from config.py\n    if not TTS_MODEL_NAME:\n        print(\"Error: TTS model identifier is not configured. Cannot initialize TTS.\")\n        raise RuntimeError(\"TTS model not configured.\")\n    try:\n        # --- Add this block to handle PyTorch 2.6+ weights_only=True issue for XTTS ---",
        "detail": "voice_assistant.tts_service",
        "documentation": {}
    }
]